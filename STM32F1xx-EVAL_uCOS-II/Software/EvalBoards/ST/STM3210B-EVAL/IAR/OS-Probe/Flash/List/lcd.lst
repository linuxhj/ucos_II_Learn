###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        27/Feb/2018  22:18:55
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\lcd.c
#    Command line =  
#        "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\lcd.c"
#        -lCN "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\"
#        -o "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\CPU\ST\STM32\inc\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LCD\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LIB\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\"
#        -Ol --use_c++_inline
#    List file    =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\lcd.lst
#    Object file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\lcd.o
#
###############################################################################

F:\Study\uCOS\UCOS II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\BSP\lcd.c
      1          /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
      2          * File Name          : lcd.c
      3          * Author             : MCD Application Team
      4          * Version            : V1.1
      5          * Date               : 11/26/2007
      6          * Description        : This file includes the LCD driver for AM-240320LTNQW00H
      7          *                      (LCD_HX8312) and AM-240320L8TNQW00H (LCD_ILI9320)
      8          *                      Liquid Crystal Display Module of STM3210B-EVAL board.
      9          ********************************************************************************
     10          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     11          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     12          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     13          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     14          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     15          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     16          *******************************************************************************/
     17          
     18          /* Includes ------------------------------------------------------------------*/
     19          #include "fonts.h"

   \                                 In section .rodata, align 4
   \   __absolute uc16 ASCII_Table[2280]
   \                     ASCII_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000002C   0x0000 0x0000      DC16 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00000048   0x0180 0x0180      DC16 384, 384, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00CC 0x00CC
   \              0x00CC       
   \   0000006A   0x00CC 0x00CC      DC16 204, 204, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00CC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000092   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 3168, 3168, 3168, 1584, 1584, 8190, 8190, 1584
   \              0x0000 0x0000
   \              0x0000 0x0C60
   \              0x0C60 0x0C60
   \              0x0630 0x0630
   \              0x1FFE 0x1FFE
   \              0x0630       
   \   000000AC   0x0738 0x0318      DC16 1848, 792, 8190, 8190, 792, 792, 396, 396, 396, 0, 0, 128, 992
   \              0x1FFE 0x1FFE
   \              0x0318 0x0318
   \              0x018C 0x018C
   \              0x018C 0x0000
   \              0x0000 0x0080
   \              0x03E0       
   \   000000C6   0x0FF8 0x0E9C      DC16 4088, 3740, 7308, 6284, 140, 152, 504, 2016, 3712, 7296, 6284
   \              0x1C8C 0x188C
   \              0x008C 0x0098
   \              0x01F8 0x07E0
   \              0x0E80 0x1C80
   \              0x188C       
   \   000000DC   0x188C 0x189C      DC16 6284, 6300, 3256, 4080, 992, 128, 128, 0, 0, 0, 0, 0, 0, 6158
   \              0x0CB8 0x0FF0
   \              0x03E0 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180E
   \   000000F8   0x0C1B 0x0C11      DC16 3099, 3089, 1553, 1553, 785, 785, 411, 398, 14528, 27840, 17504
   \              0x0611 0x0611
   \              0x0311 0x0311
   \              0x019B 0x018E
   \              0x38C0 0x6CC0
   \              0x4460       
   \   0000010E   0x4460 0x4430      DC16 17504, 17456, 17456, 17432, 27672, 14348, 0, 0, 0, 0, 480, 1008
   \              0x4430 0x4418
   \              0x6C18 0x380C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x01E0 0x03F0
   \   00000126   0x0738 0x0618      DC16 1848, 1560, 1560, 816, 496, 240, 248, 12700, 13070, 7686, 7174
   \              0x0618 0x0330
   \              0x01F0 0x00F0
   \              0x00F8 0x319C
   \              0x330E 0x1E06
   \              0x1C06       
   \   0000013C   0x1C06 0x3F06      DC16 7174, 16134, 29692, 8688, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12
   \              0x73FC 0x21F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \   0000015C   0x000C 0x000C      DC16 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0200
   \   00000184   0x0300 0x0180      DC16 768, 384, 192, 192, 96, 96, 48, 48, 48, 48, 48, 48, 48, 48, 96, 96
   \              0x00C0 0x00C0
   \              0x0060 0x0060
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0060 0x0060
   \   000001A4   0x00C0 0x00C0      DC16 192, 192, 384, 768, 512, 0, 0, 32, 96, 192, 384, 384, 768, 768
   \              0x0180 0x0300
   \              0x0200 0x0000
   \              0x0000 0x0020
   \              0x0060 0x00C0
   \              0x0180 0x0180
   \              0x0300 0x0300
   \   000001C0   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 768, 768, 384, 384
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0300 0x0300
   \              0x0180 0x0180
   \   000001D8   0x00C0 0x0060      DC16 192, 96, 32, 0, 0, 0, 0, 0, 0, 0, 192, 192, 1752, 2040, 480, 816
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x06D8 0x07F8
   \              0x01E0 0x0330
   \   000001F8   0x0738 0x0000      DC16 1848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0180 0x0180
   \   00000220   0x0180 0x0180      DC16 384, 384, 384, 16380, 16380, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              0x0180 0x3FFC
   \              0x3FFC 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000023C   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180       
   \   00000266   0x0100 0x0100      DC16 256, 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2016
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07E0
   \   0000028A   0x07E0 0x0000      DC16 2016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000002B4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 3072, 3072, 1536
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0C00
   \              0x0C00 0x0600
   \   000002D8   0x0600 0x0600      DC16 1536, 1536, 768, 768, 768, 896, 384, 384, 384, 192, 192, 192, 96
   \              0x0300 0x0300
   \              0x0300 0x0380
   \              0x0180 0x0180
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0060       
   \   000002F2   0x0060 0x0000      DC16 96, 0, 0, 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 6156, 6156, 6156
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x07F0
   \              0x0E38 0x0C18
   \              0x180C 0x180C
   \              0x180C       
   \   00000310   0x180C 0x180C      DC16 6156, 6156, 6156, 6156, 6156, 6156, 3096, 3640, 2032, 992, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x180C
   \              0x0C18 0x0E38
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000       
   \   0000032A   0x0000 0x0000      DC16 0, 0, 0, 0, 256, 384, 448, 496, 408, 392, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0100 0x0180
   \              0x01C0 0x01F0
   \              0x0198 0x0188
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   00000348   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 992, 4088, 3096
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x0FF8 0x0C18
   \   00000368   0x180C 0x180C      DC16 6156, 6156, 6144, 6144, 3072, 1536, 768, 384, 192, 96, 48, 24
   \              0x1800 0x1800
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030 0x0018
   \   00000380   0x1FFC 0x1FFC      DC16 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 480, 2040, 3608, 3084, 3084, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x01E0
   \              0x07F8 0x0E18
   \              0x0C0C 0x0C0C
   \              0x0C00       
   \   0000039E   0x0600 0x03C0      DC16 1536, 960, 1984, 3072, 6144, 6144, 6156, 6156, 3096, 2040, 992, 0
   \              0x07C0 0x0C00
   \              0x1800 0x1800
   \              0x180C 0x180C
   \              0x0C18 0x07F8
   \              0x03E0 0x0000
   \   000003B6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 3072, 3584, 3840, 3840, 3456, 3264, 3168, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0C00 0x0E00
   \              0x0F00 0x0F00
   \              0x0D80 0x0CC0
   \              0x0C60 0x0C60
   \   000003D2   0x0C30 0x0C18      DC16 3120, 3096, 3084, 16380, 16380, 3072, 3072, 3072, 3072, 0, 0, 0, 0
   \              0x0C0C 0x3FFC
   \              0x3FFC 0x0C00
   \              0x0C00 0x0C00
   \              0x0C00 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000003EC   0x0000 0x0000      DC16 0, 0, 0, 4088, 4088, 24, 24, 12, 1004, 2044, 3612, 7168, 6144
   \              0x0000 0x0FF8
   \              0x0FF8 0x0018
   \              0x0018 0x000C
   \              0x03EC 0x07FC
   \              0x0E1C 0x1C00
   \              0x1800       
   \   00000406   0x1800 0x1800      DC16 6144, 6144, 6156, 3100, 3608, 2040, 992, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x180C 0x0C1C
   \              0x0E18 0x07F8
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07C0       
   \   00000424   0x0FF0 0x1C38      DC16 4080, 7224, 6168, 24, 12, 972, 4076, 3644, 7196, 6156, 6156, 6156
   \              0x1818 0x0018
   \              0x000C 0x03CC
   \              0x0FEC 0x0E3C
   \              0x1C1C 0x180C
   \              0x180C 0x180C
   \   0000043C   0x1C18 0x0E38      DC16 7192, 3640, 2032, 992, 0, 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1FFC
   \              0x1FFC 0x0C00
   \              0x0600       
   \   0000045A   0x0600 0x0300      DC16 1536, 768, 896, 384, 448, 192, 224, 96, 96, 112, 48, 48, 48, 0, 0
   \              0x0380 0x0180
   \              0x01C0 0x00C0
   \              0x00E0 0x0060
   \              0x0060 0x0070
   \              0x0030 0x0030
   \              0x0030 0x0000
   \              0x0000       
   \   00000478   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 3096, 3096, 1592, 2032, 2032
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x07F0 0x0E38
   \              0x0C18 0x0C18
   \              0x0C18 0x0638
   \              0x07F0 0x07F0
   \   00000494   0x0C18 0x180C      DC16 3096, 6156, 6156, 6156, 6156, 3128, 4088, 992, 0, 0, 0, 0, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x0C38
   \              0x0FF8 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004B2   0x03E0 0x07F0      DC16 992, 2032, 3640, 3100, 6156, 6156, 6156, 7196, 7736, 7160, 6624
   \              0x0E38 0x0C1C
   \              0x180C 0x180C
   \              0x180C 0x1C1C
   \              0x1E38 0x1BF8
   \              0x19E0       
   \   000004C8   0x1800 0x0C00      DC16 6144, 3072, 3072, 3612, 2040, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0C00 0x0E1C
   \              0x07F8 0x01F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004EA   0x0000 0x0180      DC16 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000512   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 256
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0100
   \   00000536   0x0100 0x0080      DC16 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 7168, 3968, 992
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x1C00 0x0F80
   \              0x03E0       
   \   00000558   0x00F8 0x0018      DC16 248, 24, 248, 992, 3968, 7168, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00F8 0x03E0
   \              0x0F80 0x1C00
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   0000057A   0x0000 0x0000      DC16 0, 0, 0, 8184, 0, 0, 0, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000005A2   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 8, 56, 496, 1984, 7936, 6144, 7936, 1984, 496
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0038 0x01F0
   \              0x07C0 0x1F00
   \              0x1800 0x1F00
   \              0x07C0 0x01F0
   \   000005C2   0x0038 0x0008      DC16 56, 8, 0, 0, 0, 0, 0, 0, 992, 4088, 3096, 6156, 6156, 6144, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x0FF8
   \              0x0C18 0x180C
   \              0x180C 0x1800
   \              0x0C00       
   \   000005E0   0x0600 0x0300      DC16 1536, 768, 384, 192, 192, 192, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000602   0x0000 0x07E0      DC16 0, 2016, 6168, 8196, 10690, 18978, 17425, 17417, 17417, 17417
   \              0x1818 0x2004
   \              0x29C2 0x4A22
   \              0x4411 0x4409
   \              0x4409 0x4409
   \   00000616   0x2209 0x1311      DC16 8713, 4881, 3298, 16386, 8196, 6168, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x0CE2 0x4002
   \              0x2004 0x1818
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000632   0x0380 0x0380      DC16 896, 896, 1728, 1728, 1728, 3168, 3168, 6192, 6192, 6192, 16376
   \              0x06C0 0x06C0
   \              0x06C0 0x0C60
   \              0x0C60 0x1830
   \              0x1830 0x1830
   \              0x3FF8       
   \   00000648   0x3FF8 0x701C      DC16 16376, 28700, 24588, 24588, 49158, 49158, 0, 0, 0, 0, 0, 0, 0
   \              0x600C 0x600C
   \              0xC006 0xC006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000662   0x03FC 0x0FFC      DC16 1020, 4092, 3084, 6156, 6156, 6156, 3084, 2044, 4092, 6156, 12300
   \              0x0C0C 0x180C
   \              0x180C 0x180C
   \              0x0C0C 0x07FC
   \              0x0FFC 0x180C
   \              0x300C       
   \   00000678   0x300C 0x300C      DC16 12300, 12300, 12300, 6156, 8188, 2044, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07C0
   \   00000694   0x1FF0 0x3838      DC16 8176, 14392, 12316, 28684, 24582, 6, 6, 6, 6, 6, 6, 24582, 28684
   \              0x301C 0x700C
   \              0x6006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x6006
   \              0x700C       
   \   000006AE   0x301C 0x1FF0      DC16 12316, 8176, 2016, 0, 0, 0, 0, 0, 0, 0, 1022, 4094, 3590, 6150
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03FE 0x0FFE
   \              0x0E06 0x1806
   \   000006CA   0x1806 0x3006      DC16 6150, 12294, 12294, 12294, 12294, 12294, 12294, 12294, 6150, 6150
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x1806 0x1806
   \   000006DE   0x0E06 0x0FFE      DC16 3590, 4094, 1022, 0, 0, 0, 0, 0, 0, 0, 16380, 16380, 12, 12, 12
   \              0x03FE 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3FFC 0x3FFC
   \              0x000C 0x000C
   \              0x000C       
   \   000006FC   0x000C 0x000C      DC16 12, 12, 8188, 8188, 12, 12, 12, 12, 12, 12, 16380, 16380, 0, 0, 0
   \              0x1FFC 0x1FFC
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x3FFC 0x3FFC
   \              0x0000 0x0000
   \              0x0000       
   \   0000071A   0x0000 0x0000      DC16 0, 0, 0, 0, 16376, 16376, 24, 24, 24, 24, 24, 8184, 8184, 24, 24
   \              0x0000 0x0000
   \              0x3FF8 0x3FF8
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x1FF8
   \              0x1FF8 0x0018
   \              0x0018       
   \   00000738   0x0018 0x0018      DC16 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 4064, 16376, 30780
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0FE0
   \              0x3FF8 0x783C
   \   00000758   0x600E 0xE006      DC16 24590, 57350, 49159, 3, 3, 65027, 65027, 49155, 49159, 49158
   \              0xC007 0x0003
   \              0x0003 0xFE03
   \              0xFE03 0xC003
   \              0xC007 0xC006
   \   0000076C   0xC00E 0xF03C      DC16 49166, 61500, 16376, 4064, 0, 0, 0, 0, 0, 0, 0, 12300, 12300
   \              0x3FF8 0x0FE0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C       
   \   00000786   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 16380, 16380, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x3FFC
   \              0x3FFC 0x300C
   \              0x300C       
   \   00000798   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 0, 0, 0, 0, 0, 0, 0, 384
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \   000007B4   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000007CE   0x0180 0x0180      DC16 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 1536, 1536, 1536, 1536, 1536
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600       
   \   000007EC   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1560, 1560, 1848, 1008
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0618
   \              0x0618 0x0738
   \              0x03F0       
   \   00000802   0x01E0 0x0000      DC16 480, 0, 0, 0, 0, 0, 0, 0, 12294, 6150, 3078, 1542, 774, 390, 198
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3006 0x1806
   \              0x0C06 0x0606
   \              0x0306 0x0186
   \              0x00C6       
   \   00000820   0x0066 0x0076      DC16 102, 118, 222, 398, 774, 1542, 3078, 6150, 12294, 24582, 0, 0, 0
   \              0x00DE 0x018E
   \              0x0306 0x0606
   \              0x0C06 0x1806
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000       
   \   0000083A   0x0000 0x0000      DC16 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \   0000085E   0x0018 0x1FF8      DC16 24, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 57358, 61470, 61470, 61470
   \              0x1FF8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xE00E 0xF01E
   \              0xF01E 0xF01E
   \   0000087A   0xD836 0xD836      DC16 55350, 55350, 55350, 55350, 52326, 52326, 52326, 50886, 50886
   \              0xD836 0xD836
   \              0xCC66 0xCC66
   \              0xCC66 0xC6C6
   \              0xC6C6       
   \   0000088C   0xC6C6 0xC6C6      DC16 50886, 50886, 50054, 50054, 0, 0, 0, 0, 0, 0, 0, 12300, 12316
   \              0xC386 0xC386
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x301C       
   \   000008A6   0x303C 0x303C      DC16 12348, 12348, 12396, 12396, 12492, 12492, 12684, 13068, 13068
   \              0x306C 0x306C
   \              0x30CC 0x30CC
   \              0x318C 0x330C
   \              0x330C       
   \   000008B8   0x360C 0x360C      DC16 13836, 13836, 15372, 15372, 14348, 12300, 0, 0, 0, 0, 0, 0, 0
   \              0x3C0C 0x3C0C
   \              0x380C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000008D2   0x07E0 0x1FF8      DC16 2016, 8184, 14364, 28686, 24582, 49155, 49155, 49155, 49155, 49155
   \              0x381C 0x700E
   \              0x6006 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \   000008E6   0xC003 0xC003      DC16 49155, 49155, 24582, 28686, 14364, 8184, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x6006 0x700E
   \              0x381C 0x1FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000902   0x0FFC 0x1FFC      DC16 4092, 8188, 14348, 12300, 12300, 12300, 12300, 6156, 8188, 2044
   \              0x380C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \   00000916   0x000C 0x000C      DC16 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 2016, 8184, 14364
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07E0 0x1FF8
   \              0x381C       
   \   00000938   0x700E 0x6006      DC16 28686, 24582, 57347, 49155, 49155, 49155, 49155, 49155, 57351
   \              0xE003 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \              0xE007       
   \   0000094A   0x6306 0x3F0E      DC16 25350, 16142, 15388, 16376, 63456, 49152, 0, 0, 0, 0, 0, 0, 4094
   \              0x3C1C 0x3FF8
   \              0xF7E0 0xC000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0FFE       
   \   00000964   0x1FFE 0x3806      DC16 8190, 14342, 12294, 12294, 12294, 14342, 8190, 2046, 774, 1542
   \              0x3006 0x3006
   \              0x3006 0x3806
   \              0x1FFE 0x07FE
   \              0x0306 0x0606
   \   00000978   0x0C06 0x1806      DC16 3078, 6150, 6150, 12294, 12294, 24582, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x1806 0x3006
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000994   0x0FF8 0x0C1C      DC16 4088, 3100, 6156, 6156, 12, 28, 1016, 4064, 7680, 14336, 12294
   \              0x180C 0x180C
   \              0x000C 0x001C
   \              0x03F8 0x0FE0
   \              0x1E00 0x3800
   \              0x3006       
   \   000009AA   0x3006 0x300E      DC16 12294, 12302, 7196, 4088, 2016, 0, 0, 0, 0, 0, 0, 0, 32766, 32766
   \              0x1C1C 0x0FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7FFE 0x7FFE
   \   000009C6   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000009E0   0x0180 0x0180      DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 12300, 12300, 12300, 12300, 12300
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \   000009FC   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C       
   \   00000A0E   0x1818 0x1FF8      DC16 6168, 8184, 2016, 0, 0, 0, 0, 0, 0, 0, 24579, 12294, 12294, 12294
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x6003 0x3006
   \              0x3006 0x3006
   \   00000A2A   0x180C 0x180C      DC16 6156, 6156, 6156, 3096, 3096, 3640, 1584, 1584, 1904, 864, 864
   \              0x180C 0x0C18
   \              0x0C18 0x0E38
   \              0x0630 0x0630
   \              0x0770 0x0360
   \              0x0360       
   \   00000A40   0x01C0 0x01C0      DC16 448, 448, 0, 0, 0, 0, 0, 0, 0, 24579, 25027, 25027, 25027, 13158
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x6003
   \              0x61C3 0x61C3
   \              0x61C3 0x3366
   \   00000A5C   0x3366 0x3366      DC16 13158, 13158, 13158, 13158, 13158, 7020, 7020, 7020, 6700, 7740
   \              0x3366 0x3366
   \              0x3366 0x1B6C
   \              0x1B6C 0x1B6C
   \              0x1A2C 0x1E3C
   \   00000A70   0x0E38 0x0E38      DC16 3640, 3640, 0, 0, 0, 0, 0, 0, 0, 57359, 28684, 12312, 6192, 3184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xE00F
   \              0x700C 0x3018
   \              0x1830 0x0C70
   \   00000A8C   0x0E60 0x07C0      DC16 3680, 1984, 896, 896, 960, 1760, 3184, 7216, 6168, 12300, 24590
   \              0x0380 0x0380
   \              0x03C0 0x06E0
   \              0x0C70 0x1C30
   \              0x1818 0x300C
   \              0x600E       
   \   00000AA2   0xE007 0x0000      DC16 57351, 0, 0, 0, 0, 0, 0, 0, 49155, 24582, 12300, 14364, 6200, 3120
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xC003 0x6006
   \              0x300C 0x381C
   \              0x1838 0x0C30
   \   00000ABE   0x0660 0x07E0      DC16 1632, 2016, 960, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0, 0
   \              0x03C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \   00000ADA   0x0000 0x0000      DC16 0, 0, 0, 0, 32764, 32764, 24576, 12288, 6144, 3072, 1536, 768, 384
   \              0x0000 0x0000
   \              0x7FFC 0x7FFC
   \              0x6000 0x3000
   \              0x1800 0x0C00
   \              0x0600 0x0300
   \              0x0180       
   \   00000AF4   0x00C0 0x0060      DC16 192, 96, 48, 24, 12, 6, 32766, 32766, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0030 0x0018
   \              0x000C 0x0006
   \              0x7FFE 0x7FFE
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B14   0x03E0 0x0060      DC16 992, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \   00000B34   0x0060 0x0060      DC16 96, 96, 96, 992, 992, 0, 0, 48, 48, 96, 96, 96, 192, 192, 192, 448
   \              0x0060 0x03E0
   \              0x03E0 0x0000
   \              0x0000 0x0030
   \              0x0030 0x0060
   \              0x0060 0x0060
   \              0x00C0 0x00C0
   \              0x00C0 0x01C0
   \   00000B54   0x0180 0x0180      DC16 384, 384, 384, 768, 768, 768, 1536, 1536, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0180 0x0300
   \              0x0300 0x0300
   \              0x0600 0x0600
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B74   0x03E0 0x0300      DC16 992, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300       
   \   00000B8E   0x0300 0x0300      DC16 768, 768, 768, 768, 768, 768, 992, 992, 0, 0, 0, 448, 448, 864
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x03E0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x01C0
   \              0x01C0 0x0360
   \   00000BAA   0x0360 0x0360      DC16 864, 864, 1584, 1584, 3096, 3096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0630
   \              0x0C18 0x0C18
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000BCC   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xFFFF
   \   00000BF4   0xFFFF 0x0000      DC16 65535, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000C1A   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1008, 2040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03F0
   \              0x07F8       
   \   00000C40   0x0C1C 0x0C0C      DC16 3100, 3084, 3840, 4080, 3320, 3084, 3084, 3868, 4088, 6384, 0, 0
   \              0x0F00 0x0FF0
   \              0x0CF8 0x0C0C
   \              0x0C0C 0x0F1C
   \              0x0FF8 0x18F0
   \              0x0000 0x0000
   \   00000C58   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 984, 4088, 3128, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x03D8 0x0FF8
   \              0x0C38 0x1818
   \              0x1818       
   \   00000C76   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 3128, 4088, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x0C38 0x0FF8
   \              0x03D8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000C96   0x0000 0x0000      DC16 0, 0, 0, 960, 2032, 3632, 3096, 24, 24, 24, 24, 3096, 3632, 2032
   \              0x0000 0x03C0
   \              0x07F0 0x0E30
   \              0x0C18 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0C18
   \              0x0E30 0x07F0
   \   00000CB2   0x03C0 0x0000      DC16 960, 0, 0, 0, 0, 0, 0, 0, 6144, 6144, 6144, 6144, 6144, 7104, 8176
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1800 0x1800
   \              0x1800 0x1800
   \              0x1800 0x1BC0
   \              0x1FF0       
   \   00000CD0   0x1C30 0x1818      DC16 7216, 6168, 6168, 6168, 6168, 6168, 6168, 7216, 8176, 7104, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C30
   \              0x1FF0 0x1BC0
   \              0x0000 0x0000
   \   00000CE8   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 4080, 3120, 6168, 8184, 8184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1FF8 0x1FF8
   \   00000D08   0x0018 0x0018      DC16 24, 24, 6200, 7216, 4080, 1984, 0, 0, 0, 0, 0, 0, 0, 3968, 4032
   \              0x1838 0x1C30
   \              0x0FF0 0x07C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0F80
   \              0x0FC0       
   \   00000D26   0x00C0 0x00C0      DC16 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000D40   0x00C0 0x00C0      DC16 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3552, 4088, 3608
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0DE0 0x0FF8
   \              0x0E18       
   \   00000D62   0x0C0C 0x0C0C      DC16 3084, 3084, 3084, 3084, 3084, 3084, 3608, 4088, 3552, 3072, 3084
   \              0x0C0C 0x0C0C
   \              0x0C0C 0x0C0C
   \              0x0E18 0x0FF8
   \              0x0DE0 0x0C00
   \              0x0C0C       
   \   00000D78   0x061C 0x07F8      DC16 1564, 2040, 496, 0, 0, 24, 24, 24, 24, 24, 2008, 4088, 7224, 6168
   \              0x01F0 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x07D8 0x0FF8
   \              0x1C38 0x1818
   \   00000D94   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000DB0   0x0000 0x00C0      DC16 0, 192, 192, 0, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000DCE   0x00C0 0x00C0      DC16 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0       
   \   00000DF0   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E0A   0x00F8 0x0078      DC16 248, 120, 0, 0, 12, 12, 12, 12, 12, 3084, 1548, 780, 396, 204, 108
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0C0C
   \              0x060C 0x030C
   \              0x018C 0x00CC
   \              0x006C       
   \   00000E28   0x00FC 0x019C      DC16 252, 412, 908, 780, 1548, 3084, 0, 0, 0, 0, 0, 0, 0, 192, 192, 192
   \              0x038C 0x030C
   \              0x060C 0x0C0C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x00C0
   \   00000E48   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E62   0x00C0 0x0000      DC16 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15484, 32511, 58311
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3C7C
   \              0x7EFF 0xE3C7
   \   00000E82   0xC183 0xC183      DC16 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 0
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0x0000
   \   00000E96   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1944, 4088, 7224, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0798
   \              0x0FF8 0x1C38
   \              0x1818 0x1818
   \   00000EB6   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000ED4   0x0000 0x0000      DC16 0, 0, 0, 0, 960, 4080, 3120, 6168, 6168, 6168, 6168, 6168, 6168
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000EEE   0x0C30 0x0FF0      DC16 3120, 4080, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 984, 4088
   \              0x03C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03D8
   \              0x0FF8       
   \   00000F10   0x0C38 0x1818      DC16 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128, 4088, 984, 24, 24
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0C38
   \              0x0FF8 0x03D8
   \              0x0018 0x0018
   \   00000F28   0x0018 0x0018      DC16 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 7104, 8176, 7216, 6168, 6168
   \              0x0018 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1BC0 0x1FF0
   \              0x1C30 0x1818
   \              0x1818       
   \   00000F46   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 7216, 8176, 7104, 6144, 6144, 6144, 6144
   \              0x1818 0x1818
   \              0x1C30 0x1FF0
   \              0x1BC0 0x1800
   \              0x1800 0x1800
   \              0x1800       
   \   00000F5C   0x1800 0x0000      DC16 6144, 0, 0, 0, 0, 0, 0, 0, 1968, 1008, 112, 48, 48, 48, 48, 48, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07B0 0x03F0
   \              0x0070 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030       
   \   00000F7E   0x0030 0x0030      DC16 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 1008, 3640
   \              0x0030 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x03F0 0x0E38
   \   00000FA2   0x0C18 0x0038      DC16 3096, 56, 1008, 1984, 3072, 3096, 3640, 2032, 992, 0, 0, 0, 0, 0
   \              0x03F0 0x07C0
   \              0x0C00 0x0C18
   \              0x0E38 0x07F0
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000FBE   0x0000 0x0000      DC16 0, 0, 0, 128, 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192
   \              0x0000 0x0080
   \              0x00C0 0x00C0
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000FDA   0x00C0 0x00C0      DC16 192, 192, 192, 1984, 1920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00C0 0x07C0
   \              0x0780 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000FFC   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 7224, 8176
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C38
   \              0x1FF0       
   \   00001012   0x19E0 0x0000      DC16 6624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6156, 3096, 3096, 3096
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180C
   \              0x0C18 0x0C18
   \              0x0C18       
   \   00001034   0x0630 0x0630      DC16 1584, 1584, 1584, 864, 864, 864, 448, 448, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0360
   \              0x0360 0x0360
   \              0x01C0 0x01C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00001054   0x0000 0x0000      DC16 0, 0, 0, 0, 16833, 16833, 25027, 25443, 25443, 25443, 13878, 13878
   \              0x0000 0x0000
   \              0x41C1 0x41C1
   \              0x61C3 0x6363
   \              0x6363 0x6363
   \              0x3636 0x3636
   \   0000106C   0x3636 0x1C1C      DC16 13878, 7196, 7196, 7196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14364
   \              0x1C1C 0x1C1C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x381C       
   \   0000108E   0x1C38 0x0C30      DC16 7224, 3120, 1632, 864, 864, 864, 864, 1632, 3120, 7224, 14364, 0
   \              0x0660 0x0360
   \              0x0360 0x0360
   \              0x0360 0x0660
   \              0x0C30 0x1C38
   \              0x381C 0x0000
   \   000010A6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12312, 6192, 6192, 6256, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3018
   \              0x1830 0x1830
   \              0x1870 0x0C60
   \   000010C6   0x0C60 0x0CE0      DC16 3168, 3296, 1728, 1728, 896, 896, 896, 384, 384, 448, 240, 112, 0
   \              0x06C0 0x06C0
   \              0x0380 0x0380
   \              0x0380 0x0180
   \              0x0180 0x01C0
   \              0x00F0 0x0070
   \              0x0000       
   \   000010E0   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536, 768, 384, 192, 96, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1FFC 0x1FFC
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030       
   \   000010FE   0x0018 0x1FFC      DC16 24, 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 768, 384, 192, 192, 192, 192
   \              0x1FFC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0300 0x0180
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   0000111E   0x00C0 0x00C0      DC16 192, 192, 96, 96, 48, 96, 64, 192, 192, 192, 192, 192, 192, 384
   \              0x0060 0x0060
   \              0x0030 0x0060
   \              0x0040 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x0180
   \   0000113A   0x0300 0x0000      DC16 768, 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00001156   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \   00001172   0x0060 0x00C0      DC16 96, 192, 448, 384, 384, 384, 384, 384, 768, 768, 1536, 768, 256
   \              0x01C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0300 0x0300
   \              0x0600 0x0300
   \              0x0100       
   \   0000118C   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 192, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x00C0 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000011AE   0x0000 0x10F0      DC16 0, 4336, 8184, 3848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1FF8 0x0F08
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
     20          #include "lcd.h"
     21          
     22          /* Private typedef -----------------------------------------------------------*/
     23          /* Private define ------------------------------------------------------------*/
     24          #define LCD_ILI9320  0x9320
     25          #define LCD_HX8312   0x8312
     26          
     27          #define START_BYTE  0x70
     28          #define SET_INDEX   0x00
     29          #define READ_STATUS 0x01
     30          #define WRITE_REG   0x02
     31          #define READ_REG    0x03
     32          
     33          /* Private macro -------------------------------------------------------------*/
     34          /* Private variables ---------------------------------------------------------*/
     35            /* Global variables to set the written text color */

   \                                 In section .bss, align 2
     36          static  vu16 TextColor = 0x0000, BackColor = 0xFFFF;
   \                     TextColor:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     BackColor:
   \   00000000   0xFFFF             DC16 65535

   \                                 In section .data, align 4
     37          static vu32 LCDType = LCD_ILI9320;
   \                     LCDType:
   \   00000000   0x00009320         DC32 37664
     38          
     39          /* Private function prototypes -----------------------------------------------*/
     40          static void LCD_WriteRegHX8312(u8 LCD_Reg, u8 LCD_RegValue);
     41          static void LCD_WriteRegILI9320(u8 LCD_Reg, u16 LCD_RegValue);
     42          static  u32   StrLength(u8 *Str);
     43          static  void  Delay    (u32 nCount);
     44          
     45          /* Private functions ---------------------------------------------------------*/
     46          
     47          /*******************************************************************************
     48          * Function Name  : LCD_Setup
     49          * Description    : Setups the LCD.
     50          * Input          : None
     51          * Output         : None
     52          * Return         : None
     53          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     54          void  Delay (u32 nCount)
     55          {
   \                     Delay: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
     56              volatile  int  i;
     57          
     58          
     59              for (i = 0; i < nCount * 100; i++) {
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0xE002             B.N      ??Delay_0
   \                     ??Delay_1: (+1)
   \   00000008   0x9900             LDR      R1,[SP, #+0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0x9100             STR      R1,[SP, #+0]
   \                     ??Delay_0: (+1)
   \   0000000E   0x9900             LDR      R1,[SP, #+0]
   \   00000010   0x2264             MOVS     R2,#+100
   \   00000012   0xFB02 0xF200      MUL      R2,R2,R0
   \   00000016   0x4291             CMP      R1,R2
   \   00000018   0xD3F6             BCC.N    ??Delay_1
     60                  ;
     61              }
     62          }
   \   0000001A   0xB001             ADD      SP,SP,#+4
   \   0000001C   0x4770             BX       LR               ;; return
     63          /*******************************************************************************
     64          * Function Name  : StrLength
     65          * Description    : Returns length of string.
     66          * Input          : - Str: Character Pointer.
     67          * Output         : None
     68          * Return         : String length.
     69          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     70          static u32 StrLength(u8 *Str)
     71          {
     72            u32 Index = 0;
   \                     StrLength: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
     73          
     74            /* Increment the Index unless the end of string */
     75            for(Index = 0; *Str != '\0'; Str++, Index++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE001             B.N      ??StrLength_0
   \                     ??StrLength_1: (+1)
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \                     ??StrLength_0: (+1)
   \   0000000A   0x7802             LDRB     R2,[R0, #+0]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1FA             BNE.N    ??StrLength_1
     76            {
     77            }
     78          
     79            return Index;
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0x4770             BX       LR               ;; return
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void LCD_Setup(void)
     83          {
   \                     LCD_Setup: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     84          /* Configure the LCD Control pins --------------------------------------------*/
     85            LCD_CtrlLinesConfig();
   \   00000002   0x.... 0x....      BL       LCD_CtrlLinesConfig
     86          
     87          /* Configure the SPI2 interface ----------------------------------------------*/
     88            LCD_SPIConfig();
   \   00000006   0x.... 0x....      BL       LCD_SPIConfig
     89          
     90            if(LCDType == LCD_ILI9320)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF249 0x3120      MOVW     R1,#+37664
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xF040 0x80FD      BNE.W    ??LCD_Setup_0
     91            {
     92              Delay(5); /* Delay 50 ms */
   \   0000001A   0x2005             MOVS     R0,#+5
   \   0000001C   0x.... 0x....      BL       Delay
     93              /* Start Initial Sequence ------------------------------------------------*/
     94              LCD_WriteReg(R229, 0x8000); /* Set the internal vcore voltage */
   \   00000020   0xF44F 0x4100      MOV      R1,#+32768
   \   00000024   0x20E5             MOVS     R0,#+229
   \   00000026   0x.... 0x....      BL       LCD_WriteReg
     95              LCD_WriteReg(R0,  0x0001); /* Start internal OSC. */
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
     96              LCD_WriteReg(R1,  0x0100); /* set SS and SM bit */
   \   00000032   0xF44F 0x7180      MOV      R1,#+256
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       LCD_WriteReg
     97              LCD_WriteReg(R2,  0x0700); /* set 1 line inversion */
   \   0000003C   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      BL       LCD_WriteReg
     98              LCD_WriteReg(R3,  0x1030); /* set GRAM write direction and BGR=1. */
   \   00000046   0xF241 0x0130      MOVW     R1,#+4144
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x.... 0x....      BL       LCD_WriteReg
     99              LCD_WriteReg(R4,  0x0000); /* Resize register */
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x.... 0x....      BL       LCD_WriteReg
    100              LCD_WriteReg(R8,  0x0202); /* set the back porch and front porch */
   \   00000058   0xF240 0x2102      MOVW     R1,#+514
   \   0000005C   0x2008             MOVS     R0,#+8
   \   0000005E   0x.... 0x....      BL       LCD_WriteReg
    101              LCD_WriteReg(R9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x2009             MOVS     R0,#+9
   \   00000066   0x.... 0x....      BL       LCD_WriteReg
    102              LCD_WriteReg(R10, 0x0000); /* FMARK function */
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x.... 0x....      BL       LCD_WriteReg
    103              LCD_WriteReg(R12, 0x0000); /* RGB interface setting */
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x200C             MOVS     R0,#+12
   \   00000076   0x.... 0x....      BL       LCD_WriteReg
    104              LCD_WriteReg(R13, 0x0000); /* Frame marker Position */
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x200D             MOVS     R0,#+13
   \   0000007E   0x.... 0x....      BL       LCD_WriteReg
    105              LCD_WriteReg(R15, 0x0000); /* RGB interface polarity */
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x200F             MOVS     R0,#+15
   \   00000086   0x.... 0x....      BL       LCD_WriteReg
    106          
    107              /* Power On sequence -----------------------------------------------------*/
    108              LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x2010             MOVS     R0,#+16
   \   0000008E   0x.... 0x....      BL       LCD_WriteReg
    109              LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x2011             MOVS     R0,#+17
   \   00000096   0x.... 0x....      BL       LCD_WriteReg
    110              LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x2012             MOVS     R0,#+18
   \   0000009E   0x.... 0x....      BL       LCD_WriteReg
    111              LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x2013             MOVS     R0,#+19
   \   000000A6   0x.... 0x....      BL       LCD_WriteReg
    112              Delay(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   000000AA   0x2014             MOVS     R0,#+20
   \   000000AC   0x.... 0x....      BL       Delay
    113              LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000000B0   0xF241 0x71B0      MOVW     R1,#+6064
   \   000000B4   0x2010             MOVS     R0,#+16
   \   000000B6   0x.... 0x....      BL       LCD_WriteReg
    114              LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000000BA   0xF240 0x1137      MOVW     R1,#+311
   \   000000BE   0x2011             MOVS     R0,#+17
   \   000000C0   0x.... 0x....      BL       LCD_WriteReg
    115              Delay(5);                  /* Delay 50 ms */
   \   000000C4   0x2005             MOVS     R0,#+5
   \   000000C6   0x.... 0x....      BL       Delay
    116              LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
   \   000000CA   0xF240 0x1139      MOVW     R1,#+313
   \   000000CE   0x2012             MOVS     R0,#+18
   \   000000D0   0x.... 0x....      BL       LCD_WriteReg
    117              Delay(5);                  /* Delay 50 ms */
   \   000000D4   0x2005             MOVS     R0,#+5
   \   000000D6   0x.... 0x....      BL       Delay
    118              LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000000DA   0xF44F 0x51E8      MOV      R1,#+7424
   \   000000DE   0x2013             MOVS     R0,#+19
   \   000000E0   0x.... 0x....      BL       LCD_WriteReg
    119              LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000000E4   0x2113             MOVS     R1,#+19
   \   000000E6   0x2029             MOVS     R0,#+41
   \   000000E8   0x.... 0x....      BL       LCD_WriteReg
    120              Delay(5);                  /* Delay 50 ms */
   \   000000EC   0x2005             MOVS     R0,#+5
   \   000000EE   0x.... 0x....      BL       Delay
    121              LCD_WriteReg(R32, 0x0000); /* GRAM horizontal Address */
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x2020             MOVS     R0,#+32
   \   000000F6   0x.... 0x....      BL       LCD_WriteReg
    122              LCD_WriteReg(R33, 0x0000); /* GRAM Vertical Address */
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x2021             MOVS     R0,#+33
   \   000000FE   0x.... 0x....      BL       LCD_WriteReg
    123          
    124              /* Adjust the Gamma Curve ------------------------------------------------*/
    125              LCD_WriteReg(R48, 0x0006);
   \   00000102   0x2106             MOVS     R1,#+6
   \   00000104   0x2030             MOVS     R0,#+48
   \   00000106   0x.... 0x....      BL       LCD_WriteReg
    126              LCD_WriteReg(R49, 0x0101);
   \   0000010A   0xF240 0x1101      MOVW     R1,#+257
   \   0000010E   0x2031             MOVS     R0,#+49
   \   00000110   0x.... 0x....      BL       LCD_WriteReg
    127              LCD_WriteReg(R50, 0x0003);
   \   00000114   0x2103             MOVS     R1,#+3
   \   00000116   0x2032             MOVS     R0,#+50
   \   00000118   0x.... 0x....      BL       LCD_WriteReg
    128              LCD_WriteReg(R53, 0x0106);
   \   0000011C   0xF44F 0x7183      MOV      R1,#+262
   \   00000120   0x2035             MOVS     R0,#+53
   \   00000122   0x.... 0x....      BL       LCD_WriteReg
    129              LCD_WriteReg(R54, 0x0b02);
   \   00000126   0xF640 0x3102      MOVW     R1,#+2818
   \   0000012A   0x2036             MOVS     R0,#+54
   \   0000012C   0x.... 0x....      BL       LCD_WriteReg
    130              LCD_WriteReg(R55, 0x0302);
   \   00000130   0xF240 0x3102      MOVW     R1,#+770
   \   00000134   0x2037             MOVS     R0,#+55
   \   00000136   0x.... 0x....      BL       LCD_WriteReg
    131              LCD_WriteReg(R56, 0x0707);
   \   0000013A   0xF240 0x7107      MOVW     R1,#+1799
   \   0000013E   0x2038             MOVS     R0,#+56
   \   00000140   0x.... 0x....      BL       LCD_WriteReg
    132              LCD_WriteReg(R57, 0x0007);
   \   00000144   0x2107             MOVS     R1,#+7
   \   00000146   0x2039             MOVS     R0,#+57
   \   00000148   0x.... 0x....      BL       LCD_WriteReg
    133              LCD_WriteReg(R60, 0x0600);
   \   0000014C   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000150   0x203C             MOVS     R0,#+60
   \   00000152   0x.... 0x....      BL       LCD_WriteReg
    134              LCD_WriteReg(R61, 0x020b);
   \   00000156   0xF240 0x210B      MOVW     R1,#+523
   \   0000015A   0x203D             MOVS     R0,#+61
   \   0000015C   0x.... 0x....      BL       LCD_WriteReg
    135          
    136              /* Set GRAM area ---------------------------------------------------------*/
    137              LCD_WriteReg(R80, 0x0000); /* Horizontal GRAM Start Address */
   \   00000160   0x2100             MOVS     R1,#+0
   \   00000162   0x2050             MOVS     R0,#+80
   \   00000164   0x.... 0x....      BL       LCD_WriteReg
    138              LCD_WriteReg(R81, 0x00EF); /* Horizontal GRAM End Address */
   \   00000168   0x21EF             MOVS     R1,#+239
   \   0000016A   0x2051             MOVS     R0,#+81
   \   0000016C   0x.... 0x....      BL       LCD_WriteReg
    139              LCD_WriteReg(R82, 0x0000); /* Vertical GRAM Start Address */
   \   00000170   0x2100             MOVS     R1,#+0
   \   00000172   0x2052             MOVS     R0,#+82
   \   00000174   0x.... 0x....      BL       LCD_WriteReg
    140              LCD_WriteReg(R83, 0x013F); /* Vertical GRAM End Address */
   \   00000178   0xF240 0x113F      MOVW     R1,#+319
   \   0000017C   0x2053             MOVS     R0,#+83
   \   0000017E   0x.... 0x....      BL       LCD_WriteReg
    141          
    142              LCD_WriteReg(R96,  0x2700); /* Gate Scan Line */
   \   00000182   0xF44F 0x511C      MOV      R1,#+9984
   \   00000186   0x2060             MOVS     R0,#+96
   \   00000188   0x.... 0x....      BL       LCD_WriteReg
    143              LCD_WriteReg(R97,  0x0001); /* NDL,VLE, REV */
   \   0000018C   0x2101             MOVS     R1,#+1
   \   0000018E   0x2061             MOVS     R0,#+97
   \   00000190   0x.... 0x....      BL       LCD_WriteReg
    144              LCD_WriteReg(R106, 0x0000); /* set scrolling line */
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x206A             MOVS     R0,#+106
   \   00000198   0x.... 0x....      BL       LCD_WriteReg
    145          
    146              /* Partial Display Control -----------------------------------------------*/
    147              LCD_WriteReg(R128, 0x0000);
   \   0000019C   0x2100             MOVS     R1,#+0
   \   0000019E   0x2080             MOVS     R0,#+128
   \   000001A0   0x.... 0x....      BL       LCD_WriteReg
    148              LCD_WriteReg(R129, 0x0000);
   \   000001A4   0x2100             MOVS     R1,#+0
   \   000001A6   0x2081             MOVS     R0,#+129
   \   000001A8   0x.... 0x....      BL       LCD_WriteReg
    149              LCD_WriteReg(R130, 0x0000);
   \   000001AC   0x2100             MOVS     R1,#+0
   \   000001AE   0x2082             MOVS     R0,#+130
   \   000001B0   0x.... 0x....      BL       LCD_WriteReg
    150              LCD_WriteReg(R131, 0x0000);
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0x2083             MOVS     R0,#+131
   \   000001B8   0x.... 0x....      BL       LCD_WriteReg
    151              LCD_WriteReg(R132, 0x0000);
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0x2084             MOVS     R0,#+132
   \   000001C0   0x.... 0x....      BL       LCD_WriteReg
    152              LCD_WriteReg(R133, 0x0000);
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0x2085             MOVS     R0,#+133
   \   000001C8   0x.... 0x....      BL       LCD_WriteReg
    153          
    154              /* Panel Control ---------------------------------------------------------*/
    155              LCD_WriteReg(R144, 0x0010);
   \   000001CC   0x2110             MOVS     R1,#+16
   \   000001CE   0x2090             MOVS     R0,#+144
   \   000001D0   0x.... 0x....      BL       LCD_WriteReg
    156              LCD_WriteReg(R146, 0x0000);
   \   000001D4   0x2100             MOVS     R1,#+0
   \   000001D6   0x2092             MOVS     R0,#+146
   \   000001D8   0x.... 0x....      BL       LCD_WriteReg
    157              LCD_WriteReg(R147, 0x0003);
   \   000001DC   0x2103             MOVS     R1,#+3
   \   000001DE   0x2093             MOVS     R0,#+147
   \   000001E0   0x.... 0x....      BL       LCD_WriteReg
    158              LCD_WriteReg(R149, 0x0110);
   \   000001E4   0xF44F 0x7188      MOV      R1,#+272
   \   000001E8   0x2095             MOVS     R0,#+149
   \   000001EA   0x.... 0x....      BL       LCD_WriteReg
    159              LCD_WriteReg(R151, 0x0000);
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x2097             MOVS     R0,#+151
   \   000001F2   0x.... 0x....      BL       LCD_WriteReg
    160              LCD_WriteReg(R152, 0x0000);
   \   000001F6   0x2100             MOVS     R1,#+0
   \   000001F8   0x2098             MOVS     R0,#+152
   \   000001FA   0x.... 0x....      BL       LCD_WriteReg
    161          
    162              /* Set GRAM write direction and BGR = 1 */
    163              /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    164              /* AM=1 (address is updated in vertical writing direction) */
    165              LCD_WriteReg(R3, 0x1018);
   \   000001FE   0xF241 0x0118      MOVW     R1,#+4120
   \   00000202   0x2003             MOVS     R0,#+3
   \   00000204   0x.... 0x....      BL       LCD_WriteReg
    166          
    167              LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
   \   00000208   0xF240 0x1173      MOVW     R1,#+371
   \   0000020C   0x2007             MOVS     R0,#+7
   \   0000020E   0x.... 0x....      BL       LCD_WriteReg
   \   00000212   0xE160             B.N      ??LCD_Setup_1
    168            }
    169            else if(LCDType == LCD_HX8312)
   \                     ??LCD_Setup_0: (+1)
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000218   0x6800             LDR      R0,[R0, #+0]
   \   0000021A   0xF248 0x3112      MOVW     R1,#+33554
   \   0000021E   0x4288             CMP      R0,R1
   \   00000220   0xF040 0x8159      BNE.W    ??LCD_Setup_1
    170            {
    171              /* Enable the LCD Oscillator ---------------------------------------------*/
    172              LCD_WriteReg(R1, 0x10);
   \   00000224   0x2110             MOVS     R1,#+16
   \   00000226   0x2001             MOVS     R0,#+1
   \   00000228   0x.... 0x....      BL       LCD_WriteReg
    173              LCD_WriteReg(R0, 0xA0);
   \   0000022C   0x21A0             MOVS     R1,#+160
   \   0000022E   0x2000             MOVS     R0,#+0
   \   00000230   0x.... 0x....      BL       LCD_WriteReg
    174              LCD_WriteReg(R3, 0x01);
   \   00000234   0x2101             MOVS     R1,#+1
   \   00000236   0x2003             MOVS     R0,#+3
   \   00000238   0x.... 0x....      BL       LCD_WriteReg
    175              Delay(1); /* Delay 10 ms */
   \   0000023C   0x2001             MOVS     R0,#+1
   \   0000023E   0x.... 0x....      BL       Delay
    176              LCD_WriteReg(R3, 0x00);
   \   00000242   0x2100             MOVS     R1,#+0
   \   00000244   0x2003             MOVS     R0,#+3
   \   00000246   0x.... 0x....      BL       LCD_WriteReg
    177              LCD_WriteReg(R43, 0x04);
   \   0000024A   0x2104             MOVS     R1,#+4
   \   0000024C   0x202B             MOVS     R0,#+43
   \   0000024E   0x.... 0x....      BL       LCD_WriteReg
    178          
    179              LCD_WriteReg(R40, 0x18);
   \   00000252   0x2118             MOVS     R1,#+24
   \   00000254   0x2028             MOVS     R0,#+40
   \   00000256   0x.... 0x....      BL       LCD_WriteReg
    180              LCD_WriteReg(R26, 0x05);
   \   0000025A   0x2105             MOVS     R1,#+5
   \   0000025C   0x201A             MOVS     R0,#+26
   \   0000025E   0x.... 0x....      BL       LCD_WriteReg
    181              LCD_WriteReg(R37, 0x05);
   \   00000262   0x2105             MOVS     R1,#+5
   \   00000264   0x2025             MOVS     R0,#+37
   \   00000266   0x.... 0x....      BL       LCD_WriteReg
    182              LCD_WriteReg(R25, 0x00);
   \   0000026A   0x2100             MOVS     R1,#+0
   \   0000026C   0x2019             MOVS     R0,#+25
   \   0000026E   0x.... 0x....      BL       LCD_WriteReg
    183          
    184              /* LCD Power On ----------------------------------------------------------*/
    185              LCD_WriteReg(R28, 0x73);
   \   00000272   0x2173             MOVS     R1,#+115
   \   00000274   0x201C             MOVS     R0,#+28
   \   00000276   0x.... 0x....      BL       LCD_WriteReg
    186              LCD_WriteReg(R36, 0x74);
   \   0000027A   0x2174             MOVS     R1,#+116
   \   0000027C   0x2024             MOVS     R0,#+36
   \   0000027E   0x.... 0x....      BL       LCD_WriteReg
    187              LCD_WriteReg(R30, 0x01);
   \   00000282   0x2101             MOVS     R1,#+1
   \   00000284   0x201E             MOVS     R0,#+30
   \   00000286   0x.... 0x....      BL       LCD_WriteReg
    188              LCD_WriteReg(R24, 0xC1);
   \   0000028A   0x21C1             MOVS     R1,#+193
   \   0000028C   0x2018             MOVS     R0,#+24
   \   0000028E   0x.... 0x....      BL       LCD_WriteReg
    189              Delay(1); /* Delay 10 ms */
   \   00000292   0x2001             MOVS     R0,#+1
   \   00000294   0x.... 0x....      BL       Delay
    190              LCD_WriteReg(R24, 0xE1);
   \   00000298   0x21E1             MOVS     R1,#+225
   \   0000029A   0x2018             MOVS     R0,#+24
   \   0000029C   0x.... 0x....      BL       LCD_WriteReg
    191              LCD_WriteReg(R24, 0xF1);
   \   000002A0   0x21F1             MOVS     R1,#+241
   \   000002A2   0x2018             MOVS     R0,#+24
   \   000002A4   0x.... 0x....      BL       LCD_WriteReg
    192              Delay(6); /* Delay 60 ms */
   \   000002A8   0x2006             MOVS     R0,#+6
   \   000002AA   0x.... 0x....      BL       Delay
    193              LCD_WriteReg(R24, 0xF5);
   \   000002AE   0x21F5             MOVS     R1,#+245
   \   000002B0   0x2018             MOVS     R0,#+24
   \   000002B2   0x.... 0x....      BL       LCD_WriteReg
    194              Delay(6); /* Delay 60 ms */
   \   000002B6   0x2006             MOVS     R0,#+6
   \   000002B8   0x.... 0x....      BL       Delay
    195              LCD_WriteReg(R27, 0x09);
   \   000002BC   0x2109             MOVS     R1,#+9
   \   000002BE   0x201B             MOVS     R0,#+27
   \   000002C0   0x.... 0x....      BL       LCD_WriteReg
    196              Delay(1); /* Delay 10 ms */
   \   000002C4   0x2001             MOVS     R0,#+1
   \   000002C6   0x.... 0x....      BL       Delay
    197              LCD_WriteReg(R31, 0x11);
   \   000002CA   0x2111             MOVS     R1,#+17
   \   000002CC   0x201F             MOVS     R0,#+31
   \   000002CE   0x.... 0x....      BL       LCD_WriteReg
    198              LCD_WriteReg(R32, 0x0E);
   \   000002D2   0x210E             MOVS     R1,#+14
   \   000002D4   0x2020             MOVS     R0,#+32
   \   000002D6   0x.... 0x....      BL       LCD_WriteReg
    199              LCD_WriteReg(R30, 0x81);
   \   000002DA   0x2181             MOVS     R1,#+129
   \   000002DC   0x201E             MOVS     R0,#+30
   \   000002DE   0x.... 0x....      BL       LCD_WriteReg
    200              Delay(1); /* Delay 10 ms */
   \   000002E2   0x2001             MOVS     R0,#+1
   \   000002E4   0x.... 0x....      BL       Delay
    201          
    202              /* Chip Set --------------------------------------------------------------*/
    203              LCD_WriteReg(R157, 0x00);
   \   000002E8   0x2100             MOVS     R1,#+0
   \   000002EA   0x209D             MOVS     R0,#+157
   \   000002EC   0x.... 0x....      BL       LCD_WriteReg
    204              LCD_WriteReg(R192, 0x00);
   \   000002F0   0x2100             MOVS     R1,#+0
   \   000002F2   0x20C0             MOVS     R0,#+192
   \   000002F4   0x.... 0x....      BL       LCD_WriteReg
    205          
    206              LCD_WriteReg(R14, 0x00);
   \   000002F8   0x2100             MOVS     R1,#+0
   \   000002FA   0x200E             MOVS     R0,#+14
   \   000002FC   0x.... 0x....      BL       LCD_WriteReg
    207              LCD_WriteReg(R15, 0x00);
   \   00000300   0x2100             MOVS     R1,#+0
   \   00000302   0x200F             MOVS     R0,#+15
   \   00000304   0x.... 0x....      BL       LCD_WriteReg
    208              LCD_WriteReg(R16, 0x00);
   \   00000308   0x2100             MOVS     R1,#+0
   \   0000030A   0x2010             MOVS     R0,#+16
   \   0000030C   0x.... 0x....      BL       LCD_WriteReg
    209              LCD_WriteReg(R17, 0x00);
   \   00000310   0x2100             MOVS     R1,#+0
   \   00000312   0x2011             MOVS     R0,#+17
   \   00000314   0x.... 0x....      BL       LCD_WriteReg
    210              LCD_WriteReg(R18, 0x00);
   \   00000318   0x2100             MOVS     R1,#+0
   \   0000031A   0x2012             MOVS     R0,#+18
   \   0000031C   0x.... 0x....      BL       LCD_WriteReg
    211              LCD_WriteReg(R19, 0x00);
   \   00000320   0x2100             MOVS     R1,#+0
   \   00000322   0x2013             MOVS     R0,#+19
   \   00000324   0x.... 0x....      BL       LCD_WriteReg
    212              LCD_WriteReg(R20, 0x00);
   \   00000328   0x2100             MOVS     R1,#+0
   \   0000032A   0x2014             MOVS     R0,#+20
   \   0000032C   0x.... 0x....      BL       LCD_WriteReg
    213              LCD_WriteReg(R21, 0x00);
   \   00000330   0x2100             MOVS     R1,#+0
   \   00000332   0x2015             MOVS     R0,#+21
   \   00000334   0x.... 0x....      BL       LCD_WriteReg
    214              LCD_WriteReg(R22, 0x00);
   \   00000338   0x2100             MOVS     R1,#+0
   \   0000033A   0x2016             MOVS     R0,#+22
   \   0000033C   0x.... 0x....      BL       LCD_WriteReg
    215              LCD_WriteReg(R23, 0x00);
   \   00000340   0x2100             MOVS     R1,#+0
   \   00000342   0x2017             MOVS     R0,#+23
   \   00000344   0x.... 0x....      BL       LCD_WriteReg
    216          
    217              LCD_WriteReg(R52, 0x01);
   \   00000348   0x2101             MOVS     R1,#+1
   \   0000034A   0x2034             MOVS     R0,#+52
   \   0000034C   0x.... 0x....      BL       LCD_WriteReg
    218              LCD_WriteReg(R53, 0x00);
   \   00000350   0x2100             MOVS     R1,#+0
   \   00000352   0x2035             MOVS     R0,#+53
   \   00000354   0x.... 0x....      BL       LCD_WriteReg
    219          
    220              LCD_WriteReg(R75, 0x00);
   \   00000358   0x2100             MOVS     R1,#+0
   \   0000035A   0x204B             MOVS     R0,#+75
   \   0000035C   0x.... 0x....      BL       LCD_WriteReg
    221              LCD_WriteReg(R76, 0x00);
   \   00000360   0x2100             MOVS     R1,#+0
   \   00000362   0x204C             MOVS     R0,#+76
   \   00000364   0x.... 0x....      BL       LCD_WriteReg
    222              LCD_WriteReg(R78, 0x00);
   \   00000368   0x2100             MOVS     R1,#+0
   \   0000036A   0x204E             MOVS     R0,#+78
   \   0000036C   0x.... 0x....      BL       LCD_WriteReg
    223              LCD_WriteReg(R79, 0x00);
   \   00000370   0x2100             MOVS     R1,#+0
   \   00000372   0x204F             MOVS     R0,#+79
   \   00000374   0x.... 0x....      BL       LCD_WriteReg
    224              LCD_WriteReg(R80, 0x00);
   \   00000378   0x2100             MOVS     R1,#+0
   \   0000037A   0x2050             MOVS     R0,#+80
   \   0000037C   0x.... 0x....      BL       LCD_WriteReg
    225          
    226              LCD_WriteReg(R60, 0x00);
   \   00000380   0x2100             MOVS     R1,#+0
   \   00000382   0x203C             MOVS     R0,#+60
   \   00000384   0x.... 0x....      BL       LCD_WriteReg
    227              LCD_WriteReg(R61, 0x00);
   \   00000388   0x2100             MOVS     R1,#+0
   \   0000038A   0x203D             MOVS     R0,#+61
   \   0000038C   0x.... 0x....      BL       LCD_WriteReg
    228              LCD_WriteReg(R62, 0x01);
   \   00000390   0x2101             MOVS     R1,#+1
   \   00000392   0x203E             MOVS     R0,#+62
   \   00000394   0x.... 0x....      BL       LCD_WriteReg
    229              LCD_WriteReg(R63, 0x3F);
   \   00000398   0x213F             MOVS     R1,#+63
   \   0000039A   0x203F             MOVS     R0,#+63
   \   0000039C   0x.... 0x....      BL       LCD_WriteReg
    230              LCD_WriteReg(R64, 0x02);
   \   000003A0   0x2102             MOVS     R1,#+2
   \   000003A2   0x2040             MOVS     R0,#+64
   \   000003A4   0x.... 0x....      BL       LCD_WriteReg
    231              LCD_WriteReg(R65, 0x02);
   \   000003A8   0x2102             MOVS     R1,#+2
   \   000003AA   0x2041             MOVS     R0,#+65
   \   000003AC   0x.... 0x....      BL       LCD_WriteReg
    232              LCD_WriteReg(R66, 0x00);
   \   000003B0   0x2100             MOVS     R1,#+0
   \   000003B2   0x2042             MOVS     R0,#+66
   \   000003B4   0x.... 0x....      BL       LCD_WriteReg
    233              LCD_WriteReg(R67, 0x00);
   \   000003B8   0x2100             MOVS     R1,#+0
   \   000003BA   0x2043             MOVS     R0,#+67
   \   000003BC   0x.... 0x....      BL       LCD_WriteReg
    234              LCD_WriteReg(R68, 0x00);
   \   000003C0   0x2100             MOVS     R1,#+0
   \   000003C2   0x2044             MOVS     R0,#+68
   \   000003C4   0x.... 0x....      BL       LCD_WriteReg
    235              LCD_WriteReg(R69, 0x00);
   \   000003C8   0x2100             MOVS     R1,#+0
   \   000003CA   0x2045             MOVS     R0,#+69
   \   000003CC   0x.... 0x....      BL       LCD_WriteReg
    236              LCD_WriteReg(R70, 0xEF);
   \   000003D0   0x21EF             MOVS     R1,#+239
   \   000003D2   0x2046             MOVS     R0,#+70
   \   000003D4   0x.... 0x....      BL       LCD_WriteReg
    237              LCD_WriteReg(R71, 0x00);
   \   000003D8   0x2100             MOVS     R1,#+0
   \   000003DA   0x2047             MOVS     R0,#+71
   \   000003DC   0x.... 0x....      BL       LCD_WriteReg
    238              LCD_WriteReg(R72, 0x00);
   \   000003E0   0x2100             MOVS     R1,#+0
   \   000003E2   0x2048             MOVS     R0,#+72
   \   000003E4   0x.... 0x....      BL       LCD_WriteReg
    239              LCD_WriteReg(R73, 0x01);
   \   000003E8   0x2101             MOVS     R1,#+1
   \   000003EA   0x2049             MOVS     R0,#+73
   \   000003EC   0x.... 0x....      BL       LCD_WriteReg
    240              LCD_WriteReg(R74, 0x3F);
   \   000003F0   0x213F             MOVS     R1,#+63
   \   000003F2   0x204A             MOVS     R0,#+74
   \   000003F4   0x.... 0x....      BL       LCD_WriteReg
    241          
    242              LCD_WriteReg(R29, 0x08);  /* R29:Gate scan direction setting */
   \   000003F8   0x2108             MOVS     R1,#+8
   \   000003FA   0x201D             MOVS     R0,#+29
   \   000003FC   0x.... 0x....      BL       LCD_WriteReg
    243          
    244              LCD_WriteReg(R134, 0x00);
   \   00000400   0x2100             MOVS     R1,#+0
   \   00000402   0x2086             MOVS     R0,#+134
   \   00000404   0x.... 0x....      BL       LCD_WriteReg
    245              LCD_WriteReg(R135, 0x30);
   \   00000408   0x2130             MOVS     R1,#+48
   \   0000040A   0x2087             MOVS     R0,#+135
   \   0000040C   0x.... 0x....      BL       LCD_WriteReg
    246              LCD_WriteReg(R136, 0x02);
   \   00000410   0x2102             MOVS     R1,#+2
   \   00000412   0x2088             MOVS     R0,#+136
   \   00000414   0x.... 0x....      BL       LCD_WriteReg
    247              LCD_WriteReg(R137, 0x05);
   \   00000418   0x2105             MOVS     R1,#+5
   \   0000041A   0x2089             MOVS     R0,#+137
   \   0000041C   0x.... 0x....      BL       LCD_WriteReg
    248          
    249              LCD_WriteReg(R141, 0x01);  /* R141:Register set-up mode for one line clock */
   \   00000420   0x2101             MOVS     R1,#+1
   \   00000422   0x208D             MOVS     R0,#+141
   \   00000424   0x.... 0x....      BL       LCD_WriteReg
    250              LCD_WriteReg(R139, 0x20);  /* R139:One line SYSCLK number in one-line */
   \   00000428   0x2120             MOVS     R1,#+32
   \   0000042A   0x208B             MOVS     R0,#+139
   \   0000042C   0x.... 0x....      BL       LCD_WriteReg
    251              LCD_WriteReg(R51, 0x01);  /* R51:N line inversion setting */
   \   00000430   0x2101             MOVS     R1,#+1
   \   00000432   0x2033             MOVS     R0,#+51
   \   00000434   0x.... 0x....      BL       LCD_WriteReg
    252              LCD_WriteReg(R55, 0x01);  /* R55:Scanning method setting */
   \   00000438   0x2101             MOVS     R1,#+1
   \   0000043A   0x2037             MOVS     R0,#+55
   \   0000043C   0x.... 0x....      BL       LCD_WriteReg
    253              LCD_WriteReg(R118, 0x00);
   \   00000440   0x2100             MOVS     R1,#+0
   \   00000442   0x2076             MOVS     R0,#+118
   \   00000444   0x.... 0x....      BL       LCD_WriteReg
    254          
    255              /* Gamma Set -------------------------------------------------------------*/
    256              LCD_WriteReg(R143, 0x10);
   \   00000448   0x2110             MOVS     R1,#+16
   \   0000044A   0x208F             MOVS     R0,#+143
   \   0000044C   0x.... 0x....      BL       LCD_WriteReg
    257              LCD_WriteReg(R144, 0x67);
   \   00000450   0x2167             MOVS     R1,#+103
   \   00000452   0x2090             MOVS     R0,#+144
   \   00000454   0x.... 0x....      BL       LCD_WriteReg
    258              LCD_WriteReg(R145, 0x07);
   \   00000458   0x2107             MOVS     R1,#+7
   \   0000045A   0x2091             MOVS     R0,#+145
   \   0000045C   0x.... 0x....      BL       LCD_WriteReg
    259              LCD_WriteReg(R146, 0x65);
   \   00000460   0x2165             MOVS     R1,#+101
   \   00000462   0x2092             MOVS     R0,#+146
   \   00000464   0x.... 0x....      BL       LCD_WriteReg
    260              LCD_WriteReg(R147, 0x07);
   \   00000468   0x2107             MOVS     R1,#+7
   \   0000046A   0x2093             MOVS     R0,#+147
   \   0000046C   0x.... 0x....      BL       LCD_WriteReg
    261              LCD_WriteReg(R148, 0x01);
   \   00000470   0x2101             MOVS     R1,#+1
   \   00000472   0x2094             MOVS     R0,#+148
   \   00000474   0x.... 0x....      BL       LCD_WriteReg
    262              LCD_WriteReg(R149, 0x76);
   \   00000478   0x2176             MOVS     R1,#+118
   \   0000047A   0x2095             MOVS     R0,#+149
   \   0000047C   0x.... 0x....      BL       LCD_WriteReg
    263              LCD_WriteReg(R150, 0x56);
   \   00000480   0x2156             MOVS     R1,#+86
   \   00000482   0x2096             MOVS     R0,#+150
   \   00000484   0x.... 0x....      BL       LCD_WriteReg
    264              LCD_WriteReg(R151, 0x00);
   \   00000488   0x2100             MOVS     R1,#+0
   \   0000048A   0x2097             MOVS     R0,#+151
   \   0000048C   0x.... 0x....      BL       LCD_WriteReg
    265              LCD_WriteReg(R152, 0x06);
   \   00000490   0x2106             MOVS     R1,#+6
   \   00000492   0x2098             MOVS     R0,#+152
   \   00000494   0x.... 0x....      BL       LCD_WriteReg
    266              LCD_WriteReg(R153, 0x03);
   \   00000498   0x2103             MOVS     R1,#+3
   \   0000049A   0x2099             MOVS     R0,#+153
   \   0000049C   0x.... 0x....      BL       LCD_WriteReg
    267              LCD_WriteReg(R154, 0x00);
   \   000004A0   0x2100             MOVS     R1,#+0
   \   000004A2   0x209A             MOVS     R0,#+154
   \   000004A4   0x.... 0x....      BL       LCD_WriteReg
    268          
    269              /* Display On ------------------------------------------------------------*/
    270              LCD_WriteReg(R1, 0x50);
   \   000004A8   0x2150             MOVS     R1,#+80
   \   000004AA   0x2001             MOVS     R0,#+1
   \   000004AC   0x.... 0x....      BL       LCD_WriteReg
    271              LCD_WriteReg(R5, 0x04);
   \   000004B0   0x2104             MOVS     R1,#+4
   \   000004B2   0x2005             MOVS     R0,#+5
   \   000004B4   0x.... 0x....      BL       LCD_WriteReg
    272          
    273              LCD_WriteReg(R0, 0x80);
   \   000004B8   0x2180             MOVS     R1,#+128
   \   000004BA   0x2000             MOVS     R0,#+0
   \   000004BC   0x.... 0x....      BL       LCD_WriteReg
    274              LCD_WriteReg(R59, 0x01);
   \   000004C0   0x2101             MOVS     R1,#+1
   \   000004C2   0x203B             MOVS     R0,#+59
   \   000004C4   0x.... 0x....      BL       LCD_WriteReg
    275              Delay(4);  /* Delay 40 ms */
   \   000004C8   0x2004             MOVS     R0,#+4
   \   000004CA   0x.... 0x....      BL       Delay
    276              LCD_WriteReg(R0, 0x20);
   \   000004CE   0x2120             MOVS     R1,#+32
   \   000004D0   0x2000             MOVS     R0,#+0
   \   000004D2   0x.... 0x....      BL       LCD_WriteReg
    277            }
    278          }
   \                     ??LCD_Setup_1: (+1)
   \   000004D6   0xBD01             POP      {R0,PC}          ;; return
    279          
    280          /*******************************************************************************
    281          * Function Name  : STM3210B_LCD_Init
    282          * Description    : Initializes the LCD.
    283          * Input          : None
    284          * Output         : None
    285          * Return         : None
    286          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          void STM3210B_LCD_Init(void)
    288          {
   \                     STM3210B_LCD_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    289            /* Setups the LCD */
    290            LCD_Setup();
   \   00000002   0x.... 0x....      BL       LCD_Setup
    291          
    292            /* Try to read new LCD controller ID 0x9320 */
    293            if (LCD_ReadReg(R0) == LCD_ILI9320)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCD_ReadReg
   \   0000000C   0xF249 0x3120      MOVW     R1,#+37664
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD105             BNE.N    ??STM3210B_LCD_Init_0
    294            {
    295              LCDType = LCD_ILI9320;
   \   00000014   0xF249 0x3020      MOVW     R0,#+37664
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable19
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0xE006             B.N      ??STM3210B_LCD_Init_1
    296            }
    297            else
    298            {
    299              LCDType = LCD_HX8312;
   \                     ??STM3210B_LCD_Init_0: (+1)
   \   00000020   0xF248 0x3012      MOVW     R0,#+33554
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable19
   \   00000028   0x6008             STR      R0,[R1, #+0]
    300              /* Setups the LCD */
    301              LCD_Setup();
   \   0000002A   0x.... 0x....      BL       LCD_Setup
    302            }
    303          }
   \                     ??STM3210B_LCD_Init_1: (+1)
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
    304          
    305          /*******************************************************************************
    306          * Function Name  : LCD_SetTextColor
    307          * Description    : Sets the Text color.
    308          * Input          : - Color: specifies the Text color code RGB(5-6-5).
    309          * Output         : - TextColor: Text color global variable used by LCD_DrawChar
    310          *                  and LCD_DrawPicture functions.
    311          * Return         : None
    312          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    313          void LCD_SetTextColor(vu16 Color)
    314          {
   \                     LCD_SetTextColor: (+1)
   \   00000000   0xB401             PUSH     {R0}
    315            TextColor = Color;
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable27
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    316          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    317          
    318          /*******************************************************************************
    319          * Function Name  : LCD_SetBackColor
    320          * Description    : Sets the Background color.
    321          * Input          : - Color: specifies the Background color code RGB(5-6-5).
    322          * Output         : - BackColor: Background color global variable used by
    323          *                  LCD_DrawChar and LCD_DrawPicture functions.
    324          * Return         : None
    325          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    326          void LCD_SetBackColor(vu16 Color)
    327          {
   \                     LCD_SetBackColor: (+1)
   \   00000000   0xB401             PUSH     {R0}
    328            BackColor = Color;
   \   00000002   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable27_1
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    329          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    330          
    331          /*******************************************************************************
    332          * Function Name  : LCD_ClearLine
    333          * Description    : Clears the selected line.
    334          * Input          : - Line: the Line to be cleared.
    335          *                    This parameter can be one of the following values:
    336          *                       - Linex: where x can be 0..9
    337          * Output         : None
    338          * Return         : None
    339          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    340          void LCD_ClearLine(u8 Line)
    341          {
   \                     LCD_ClearLine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    342            LCD_DisplayStringLine(Line, "                    ");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable27_2
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LCD_DisplayStringLine
    343          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    344          
    345          /*******************************************************************************
    346          * Function Name  : LCD_Clear
    347          * Description    : Clears the hole LCD.
    348          * Input          : Color: the color of the background.
    349          * Output         : None
    350          * Return         : None
    351          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    352          void LCD_Clear(u16 Color)
    353          {
   \                     LCD_Clear: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    354            u32 index = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    355          
    356            LCD_SetCursor(0x00, 0x013F);
   \   00000006   0xF240 0x113F      MOVW     R1,#+319
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       LCD_SetCursor
    357          
    358            if(LCDType == LCD_ILI9320)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF249 0x3120      MOVW     R1,#+37664
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD101             BNE.N    ??LCD_Clear_0
    359            {
    360              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   0000001E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    361            }
    362          
    363            for(index = 0; index < 76800; index++)
   \                     ??LCD_Clear_0: (+1)
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE004             B.N      ??LCD_Clear_1
    364            {
    365              LCD_WriteRAM(Color);
   \                     ??LCD_Clear_2: (+1)
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       LCD_WriteRAM
    366            }
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_Clear_1: (+1)
   \   00000030   0xF5B5 0x3F96      CMP      R5,#+76800
   \   00000034   0xD3F7             BCC.N    ??LCD_Clear_2
    367          
    368            if(LCDType == LCD_ILI9320)
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF249 0x3120      MOVW     R1,#+37664
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD105             BNE.N    ??LCD_Clear_3
    369            {
    370              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000044   0x2201             MOVS     R2,#+1
   \   00000046   0x2104             MOVS     R1,#+4
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   0000004C   0x.... 0x....      BL       LCD_CtrlLinesWrite
    371            }
    372          }
   \                     ??LCD_Clear_3: (+1)
   \   00000050   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    373          
    374          /*******************************************************************************
    375          * Function Name  : LCD_SetCursor
    376          * Description    : Sets the cursor position.
    377          * Input          : - Xpos: specifies the X position.
    378          *                  - Ypos: specifies the Y position.
    379          * Output         : None
    380          * Return         : None
    381          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    382          void LCD_SetCursor(u8 Xpos, u16 Ypos)
    383          {
   \                     LCD_SetCursor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    384            if(LCDType == LCD_ILI9320)
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable19
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000E   0x4291             CMP      R1,R2
   \   00000010   0xD10B             BNE.N    ??LCD_SetCursor_0
    385            {
    386              LCD_WriteReg(R32, Xpos);
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x0001             MOVS     R1,R0
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x.... 0x....      BL       LCD_WriteReg
    387              LCD_WriteReg(R33, Ypos);
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x2021             MOVS     R0,#+33
   \   00000024   0x.... 0x....      BL       LCD_WriteReg
   \   00000028   0xE016             B.N      ??LCD_SetCursor_1
    388            }
    389            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SetCursor_0: (+1)
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable19
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF248 0x3212      MOVW     R2,#+33554
   \   00000034   0x4291             CMP      R1,R2
   \   00000036   0xD10F             BNE.N    ??LCD_SetCursor_1
    390            {
    391              LCD_WriteReg(R66, Xpos);
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x0001             MOVS     R1,R0
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x2042             MOVS     R0,#+66
   \   00000040   0x.... 0x....      BL       LCD_WriteReg
    392              LCD_WriteReg(R67, ((Ypos & 0x100)>> 8));
   \   00000044   0xF3C4 0x2100      UBFX     R1,R4,#+8,#+1
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x2043             MOVS     R0,#+67
   \   0000004C   0x.... 0x....      BL       LCD_WriteReg
    393              LCD_WriteReg(R68, (Ypos & 0xFF));
   \   00000050   0xB2E1             UXTB     R1,R4            ;; ZeroExt  R1,R4,#+24,#+24
   \   00000052   0x2044             MOVS     R0,#+68
   \   00000054   0x.... 0x....      BL       LCD_WriteReg
    394            }
    395          }
   \                     ??LCD_SetCursor_1: (+1)
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
    396          
    397          /*******************************************************************************
    398          * Function Name  : LCD_DrawChar
    399          * Description    : Draws a character on LCD.
    400          * Input          : - Xpos: the Line where to display the character shape.
    401          *                    This parameter can be one of the following values:
    402          *                       - Linex: where x can be 0..9
    403          *                  - Ypos: start column address.
    404          *                  - c: pointer to the character data.
    405          * Output         : None
    406          * Return         : None
    407          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    408          void LCD_DrawChar(u8 Xpos, u16 Ypos, uc16 *c)
    409          {
   \                     LCD_DrawChar: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    410            u32 index = 0, i = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    411            u8 Xaddress = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    412          
    413            Xaddress = Xpos;
   \   00000010   0x0006             MOVS     R6,R0
    414          
    415            LCD_SetCursor(Xaddress, Ypos);
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LCD_SetCursor
    416          
    417            for(index = 0; index < 24; index++)
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0xE014             B.N      ??LCD_DrawChar_0
    418            {
    419              if(LCDType == LCD_ILI9320)
    420              {
    421                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    422              }
    423              for(i = 0; i < 16; i++)
    424              {
    425                if((c[index] & (1 << i)) == 0x00)
    426                {
    427                  LCD_WriteRAM(BackColor);
    428                }
    429                else
    430                {
    431                  LCD_WriteRAM(TextColor);
    432                }
    433              }
    434              if(LCDType == LCD_ILI9320)
   \                     ??LCD_DrawChar_1: (+1)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF249 0x3120      MOVW     R1,#+37664
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD105             BNE.N    ??LCD_DrawChar_2
    435              {
    436                LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x2104             MOVS     R1,#+4
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   00000038   0x.... 0x....      BL       LCD_CtrlLinesWrite
    437              }
    438              Xaddress++;
   \                     ??LCD_DrawChar_2: (+1)
   \   0000003C   0x1C76             ADDS     R6,R6,#+1
    439              LCD_SetCursor(Xaddress, Ypos);
   \   0000003E   0x0021             MOVS     R1,R4
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x.... 0x....      BL       LCD_SetCursor
   \   0000004A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawChar_0: (+1)
   \   0000004C   0x2F18             CMP      R7,#+24
   \   0000004E   0xD222             BCS.N    ??LCD_DrawChar_3
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF249 0x3120      MOVW     R1,#+37664
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xD101             BNE.N    ??LCD_DrawChar_4
   \   0000005E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \                     ??LCD_DrawChar_4: (+1)
   \   00000062   0xF05F 0x0800      MOVS     R8,#+0
   \   00000066   0xE006             B.N      ??LCD_DrawChar_5
   \                     ??LCD_DrawChar_6: (+1)
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000006C   0x8800             LDRH     R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawChar_7: (+1)
   \   00000072   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LCD_DrawChar_5: (+1)
   \   00000076   0xF1B8 0x0F10      CMP      R8,#+16
   \   0000007A   0xD2D2             BCS.N    ??LCD_DrawChar_1
   \   0000007C   0xF835 0x0017      LDRH     R0,[R5, R7, LSL #+1]
   \   00000080   0x2101             MOVS     R1,#+1
   \   00000082   0xFA11 0xF108      LSLS     R1,R1,R8
   \   00000086   0x4208             TST      R0,R1
   \   00000088   0xD1EE             BNE.N    ??LCD_DrawChar_6
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   0000008E   0x8800             LDRH     R0,[R0, #+0]
   \   00000090   0x.... 0x....      BL       LCD_WriteRAM
   \   00000094   0xE7ED             B.N      ??LCD_DrawChar_7
    440            }
    441          }
   \                     ??LCD_DrawChar_3: (+1)
   \   00000096   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    442          
    443          /*******************************************************************************
    444          * Function Name  : LCD_DisplayChar
    445          * Description    : Displays one character (16dots width, 24dots height).
    446          * Input          : - Line: the Line where to display the character shape .
    447          *                    This parameter can be one of the following values:
    448          *                       - Linex: where x can be 0..9
    449          *                  - Column: start column address.
    450          *                  - Ascii: character ascii code, must be between 0x20 and 0x7E.
    451          * Output         : None
    452          * Return         : None
    453          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    454          void LCD_DisplayChar(u8 Line, u16 Column, u8 Ascii)
    455          {
   \                     LCD_DisplayChar: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    456            Ascii -= 32;
   \   00000002   0x3A20             SUBS     R2,R2,#+32
    457            LCD_DrawChar(Line, Column, &ASCII_Table[Ascii * 24]);
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable27_4
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x2430             MOVS     R4,#+48
   \   0000000C   0xFB04 0x3202      MLA      R2,R4,R2,R3
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       LCD_DrawChar
    458          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    459          
    460          /*******************************************************************************
    461          * Function Name  : LCD_DisplayStringLine
    462          * Description    : Displays a maximum of 20 char on the LCD.
    463          * Input          : - Line: the Line where to display the character shape .
    464          *                    This parameter can be one of the following values:
    465          *                       - Linex: where x can be 0..9
    466          *                  - *ptr: pointer to string to display on LCD.
    467          * Output         : None
    468          * Return         : None
    469          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    470          void LCD_DisplayStringLine(u8 Line, u8 *ptr)
    471          {
   \                     LCD_DisplayStringLine: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    472            u32 i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    473            u16 refcolumn = 319;
   \   00000008   0xF240 0x173F      MOVW     R7,#+319
   \   0000000C   0xE009             B.N      ??LCD_DisplayStringLine_0
    474          
    475            /* Send the string character by character on lCD */
    476            while ((*ptr != 0) & (i < 20))
    477            {
    478              /* Display one character on LCD */
    479              LCD_DisplayChar(Line, refcolumn, *ptr);
   \                     ??LCD_DisplayStringLine_1: (+1)
   \   0000000E   0x782A             LDRB     R2,[R5, #+0]
   \   00000010   0x0039             MOVS     R1,R7
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_DisplayChar
    480              /* Decrement the column position by 16 */
    481              refcolumn -= 16;
   \   0000001C   0x3F10             SUBS     R7,R7,#+16
    482              /* Point on the next character */
    483              ptr++;
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
    484              /* Increment the character counter */
    485              i++;
   \   00000020   0x1C76             ADDS     R6,R6,#+1
    486            }
   \                     ??LCD_DisplayStringLine_0: (+1)
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ.N    ??LCD_DisplayStringLine_2
   \   00000028   0x2E14             CMP      R6,#+20
   \   0000002A   0xD3F0             BCC.N    ??LCD_DisplayStringLine_1
    487          }
   \                     ??LCD_DisplayStringLine_2: (+1)
   \   0000002C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    488          
    489          /*******************************************************************************
    490          * Function Name  : LCD_DisplayString
    491          * Description    : Displays a maximum of 200 char on the LCD.
    492          * Input          : - Line: the starting Line where to display the character shape.
    493          *                    This parameter can be one of the following values:
    494          *                       - Linex: where x can be 0..9
    495          *                  - *ptr: pointer to string to display on LCD.
    496          * Output         : None
    497          * Return         : None
    498          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    499          void LCD_DisplayString(u8 Line, u8 *ptr)
    500          {
   \                     LCD_DisplayString: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    501            u32 i = 0, column = 0, index = 0, spaceindex = 0;
   \   00000008   0xF05F 0x0900      MOVS     R9,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000012   0x2600             MOVS     R6,#+0
    502            u16 refcolumn = 319;
   \   00000014   0xF240 0x1A3F      MOVW     R10,#+319
    503            u32 length = 0;
   \   00000018   0xF05F 0x0800      MOVS     R8,#+0
    504          
    505            /* Get the string length */
    506            length = StrLength(ptr);
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       StrLength
   \   00000022   0x4680             MOV      R8,R0
    507            if(length > 200)
   \   00000024   0xF1B8 0x0FC9      CMP      R8,#+201
   \   00000028   0xD311             BCC.N    ??LCD_DisplayString_0
    508            {
    509              /* Set the Cursor position */
    510              LCD_SetCursor(Line, 0x013F);
   \   0000002A   0xF240 0x113F      MOVW     R1,#+319
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       LCD_SetCursor
    511              /* Clear the Selected Line */
    512              LCD_ClearLine(Line);
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x.... 0x....      BL       LCD_ClearLine
    513              LCD_DisplayStringLine(Line, "   String too long  ");
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable27_5
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x.... 0x....      BL       LCD_DisplayStringLine
    514            }
    515            else
    516            {
    517              /* Set the Cursor position */
    518              LCD_SetCursor(Line, 0x013F);
    519              /* Clear the Selected Line */
    520          //    LCD_ClearLine(Line);
    521          
    522              while(length--)
    523              {
    524                if(index == 20)
    525                {
    526                  if(*ptr == 0x20)
    527                  {
    528                    ptr++;
    529                  }
    530                  else
    531                  {
    532                    for(i = 0; i < spaceindex; i++)
    533                    {
    534                      LCD_DisplayChar(Line, column, ' ');
    535                      column -= 16;
    536                    }
    537                    ptr -= (spaceindex - 1);
    538                    length += (spaceindex - 1);
    539                  }
    540                  Line += 24;
    541                  /* Clear the Selected Line */
    542          //        LCD_ClearLine(Line);
    543                  refcolumn = 319;
    544                  index = 0;
    545                }
    546                /* Display one character on LCD */
    547                LCD_DisplayChar(Line, refcolumn, *ptr);
    548          
    549                /* Increment character number in one line */
    550                index++;
    551          
    552                /* Decrement the column position by 16 */
    553                refcolumn -= 16;
    554                /* Point on the next character */
    555                ptr++;
    556                /* Increment the number of character after the last space */
    557                spaceindex++;
    558                if(*ptr == 0x20)
    559                {
    560                  spaceindex = 0;
    561                  column = refcolumn - 16;
    562                }
    563              }
    564            }
    565          }
   \                     ??LCD_DisplayString_1: (+1)
   \   0000004A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??LCD_DisplayString_0: (+1)
   \   0000004E   0xF240 0x113F      MOVW     R1,#+319
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       LCD_SetCursor
   \   0000005A   0xE02A             B.N      ??LCD_DisplayString_2
   \                     ??LCD_DisplayString_3: (+1)
   \   0000005C   0x2220             MOVS     R2,#+32
   \   0000005E   0x0039             MOVS     R1,R7
   \   00000060   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       LCD_DisplayChar
   \   0000006A   0x3F10             SUBS     R7,R7,#+16
   \   0000006C   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LCD_DisplayString_4: (+1)
   \   00000070   0x45B1             CMP      R9,R6
   \   00000072   0xD3F3             BCC.N    ??LCD_DisplayString_3
   \   00000074   0x1E70             SUBS     R0,R6,#+1
   \   00000076   0x1A2D             SUBS     R5,R5,R0
   \   00000078   0x1E70             SUBS     R0,R6,#+1
   \   0000007A   0xEB10 0x0808      ADDS     R8,R0,R8
   \                     ??LCD_DisplayString_5: (+1)
   \   0000007E   0x3418             ADDS     R4,R4,#+24
   \   00000080   0xF240 0x1A3F      MOVW     R10,#+319
   \   00000084   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??LCD_DisplayString_6: (+1)
   \   00000088   0x782A             LDRB     R2,[R5, #+0]
   \   0000008A   0x4651             MOV      R1,R10
   \   0000008C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x.... 0x....      BL       LCD_DisplayChar
   \   00000096   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000009A   0xF1BA 0x0A10      SUBS     R10,R10,#+16
   \   0000009E   0x1C6D             ADDS     R5,R5,#+1
   \   000000A0   0x1C76             ADDS     R6,R6,#+1
   \   000000A2   0x7828             LDRB     R0,[R5, #+0]
   \   000000A4   0x2820             CMP      R0,#+32
   \   000000A6   0xD104             BNE.N    ??LCD_DisplayString_2
   \   000000A8   0x2600             MOVS     R6,#+0
   \   000000AA   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000AE   0xF1BA 0x0710      SUBS     R7,R10,#+16
   \                     ??LCD_DisplayString_2: (+1)
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD0C6             BEQ.N    ??LCD_DisplayString_1
   \   000000BC   0xF1B9 0x0F14      CMP      R9,#+20
   \   000000C0   0xD1E2             BNE.N    ??LCD_DisplayString_6
   \   000000C2   0x7828             LDRB     R0,[R5, #+0]
   \   000000C4   0x2820             CMP      R0,#+32
   \   000000C6   0xD101             BNE.N    ??LCD_DisplayString_7
   \   000000C8   0x1C6D             ADDS     R5,R5,#+1
   \   000000CA   0xE7D8             B.N      ??LCD_DisplayString_5
   \                     ??LCD_DisplayString_7: (+1)
   \   000000CC   0xF05F 0x0900      MOVS     R9,#+0
   \   000000D0   0xE7CE             B.N      ??LCD_DisplayString_4
    566          /*******************************************************************************
    567          * Function Name  : LCD_SetDisplayWindow
    568          * Description    : Sets a display window
    569          * Input          : - Xpos: specifies the X buttom left position.
    570          *                  - Ypos: specifies the Y buttom left position.
    571          *                  - Height: display window height.
    572          *                  - Width: display window width.
    573          * Output         : None
    574          * Return         : None
    575          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    576          void LCD_SetDisplayWindow(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    577          {
   \                     LCD_SetDisplayWindow: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001E             MOVS     R6,R3
    578            if(LCDType == LCD_ILI9320)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF249 0x3120      MOVW     R1,#+37664
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD12B             BNE.N    ??LCD_SetDisplayWindow_0
    579            {
    580              /* Horizontal GRAM Start Address */
    581              if(Xpos >= Height)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001C   0x42BC             CMP      R4,R7
   \   0000001E   0xD308             BCC.N    ??LCD_SetDisplayWindow_1
    582              {
    583                LCD_WriteReg(R80, (Xpos - Height + 1));
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000024   0x1BE0             SUBS     R0,R4,R7
   \   00000026   0x1C41             ADDS     R1,R0,#+1
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0x2050             MOVS     R0,#+80
   \   0000002C   0x.... 0x....      BL       LCD_WriteReg
   \   00000030   0xE003             B.N      ??LCD_SetDisplayWindow_2
    584              }
    585              else
    586              {
    587                LCD_WriteReg(R80, 0);
   \                     ??LCD_SetDisplayWindow_1: (+1)
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x2050             MOVS     R0,#+80
   \   00000036   0x.... 0x....      BL       LCD_WriteReg
    588              }
    589              /* Horizontal GRAM End Address */
    590              LCD_WriteReg(R81, Xpos);
   \                     ??LCD_SetDisplayWindow_2: (+1)
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x2051             MOVS     R0,#+81
   \   00000042   0x.... 0x....      BL       LCD_WriteReg
    591              /* Vertical GRAM Start Address */
    592              if(Ypos >= Width)
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000004A   0x42B5             CMP      R5,R6
   \   0000004C   0xD306             BCC.N    ??LCD_SetDisplayWindow_3
    593              {
    594                LCD_WriteReg(R82, (Ypos - Width + 1));
   \   0000004E   0x1BA8             SUBS     R0,R5,R6
   \   00000050   0x1C41             ADDS     R1,R0,#+1
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0x2052             MOVS     R0,#+82
   \   00000056   0x.... 0x....      BL       LCD_WriteReg
   \   0000005A   0xE003             B.N      ??LCD_SetDisplayWindow_4
    595              }
    596              else
    597              {
    598                LCD_WriteReg(R82, 0);
   \                     ??LCD_SetDisplayWindow_3: (+1)
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x2052             MOVS     R0,#+82
   \   00000060   0x.... 0x....      BL       LCD_WriteReg
    599              }
    600              /* Vertical GRAM End Address */
    601              LCD_WriteReg(R83, Ypos);
   \                     ??LCD_SetDisplayWindow_4: (+1)
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   0x2053             MOVS     R0,#+83
   \   0000006A   0x.... 0x....      BL       LCD_WriteReg
   \   0000006E   0xE036             B.N      ??LCD_SetDisplayWindow_5
    602            }
    603            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SetDisplayWindow_0: (+1)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF248 0x3112      MOVW     R1,#+33554
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD12F             BNE.N    ??LCD_SetDisplayWindow_5
    604            {
    605              LCD_WriteReg(R1, 0xD0);
   \   0000007E   0x21D0             MOVS     R1,#+208
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       LCD_WriteReg
    606              LCD_WriteReg(R5, 0x14);
   \   00000086   0x2114             MOVS     R1,#+20
   \   00000088   0x2005             MOVS     R0,#+5
   \   0000008A   0x.... 0x....      BL       LCD_WriteReg
    607          
    608              LCD_WriteReg(R69, (Xpos - Height + 1));
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000092   0x1BE0             SUBS     R0,R4,R7
   \   00000094   0x1C41             ADDS     R1,R0,#+1
   \   00000096   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000098   0x2045             MOVS     R0,#+69
   \   0000009A   0x.... 0x....      BL       LCD_WriteReg
    609              LCD_WriteReg(R70, Xpos);
   \   0000009E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A0   0x0021             MOVS     R1,R4
   \   000000A2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A4   0x2046             MOVS     R0,#+70
   \   000000A6   0x.... 0x....      BL       LCD_WriteReg
    610          
    611              LCD_WriteReg(R71, (((Ypos - Width + 1) & 0x100)>> 8));
   \   000000AA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   0x1BA8             SUBS     R0,R5,R6
   \   000000B0   0x1C40             ADDS     R0,R0,#+1
   \   000000B2   0x1200             ASRS     R0,R0,#+8
   \   000000B4   0xF010 0x0101      ANDS     R1,R0,#0x1
   \   000000B8   0x2047             MOVS     R0,#+71
   \   000000BA   0x.... 0x....      BL       LCD_WriteReg
    612              LCD_WriteReg(R72, ((Ypos - Width + 1) & 0xFF));
   \   000000BE   0x1BA8             SUBS     R0,R5,R6
   \   000000C0   0x1C40             ADDS     R0,R0,#+1
   \   000000C2   0xB2C1             UXTB     R1,R0            ;; ZeroExt  R1,R0,#+24,#+24
   \   000000C4   0x2048             MOVS     R0,#+72
   \   000000C6   0x.... 0x....      BL       LCD_WriteReg
    613          
    614              LCD_WriteReg(R73, ((Ypos & 0x100)>> 8));
   \   000000CA   0xF3C5 0x2100      UBFX     R1,R5,#+8,#+1
   \   000000CE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000D0   0x2049             MOVS     R0,#+73
   \   000000D2   0x.... 0x....      BL       LCD_WriteReg
    615              LCD_WriteReg(R74, (Ypos & 0xFF));
   \   000000D6   0xB2E9             UXTB     R1,R5            ;; ZeroExt  R1,R5,#+24,#+24
   \   000000D8   0x204A             MOVS     R0,#+74
   \   000000DA   0x.... 0x....      BL       LCD_WriteReg
    616            }
    617          
    618            LCD_SetCursor(Xpos, Ypos);
   \                     ??LCD_SetDisplayWindow_5: (+1)
   \   000000DE   0x0029             MOVS     R1,R5
   \   000000E0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x.... 0x....      BL       LCD_SetCursor
    619          }
   \   000000EA   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    620          
    621          /*******************************************************************************
    622          * Function Name  : LCD_WindowModeDisable
    623          * Description    : Disables LCD Window mode.
    624          * Input          : None
    625          * Output         : None
    626          * Return         : None
    627          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    628          void LCD_WindowModeDisable(void)
    629          {
   \                     LCD_WindowModeDisable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    630            if(LCDType == LCD_ILI9320)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD10D             BNE.N    ??LCD_WindowModeDisable_0
    631            {
    632              LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   \   00000010   0xF44F 0x73A0      MOV      R3,#+320
   \   00000014   0x22F0             MOVS     R2,#+240
   \   00000016   0xF240 0x113F      MOVW     R1,#+319
   \   0000001A   0x20EF             MOVS     R0,#+239
   \   0000001C   0x.... 0x....      BL       LCD_SetDisplayWindow
    633              LCD_WriteReg(R3, 0x1018);
   \   00000020   0xF241 0x0118      MOVW     R1,#+4120
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x.... 0x....      BL       LCD_WriteReg
   \   0000002A   0xE00E             B.N      ??LCD_WindowModeDisable_1
    634            }
    635            else if(LCDType == LCD_HX8312)
   \                     ??LCD_WindowModeDisable_0: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF248 0x3112      MOVW     R1,#+33554
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD107             BNE.N    ??LCD_WindowModeDisable_1
    636            {
    637              LCD_WriteReg(R1, 0x50);
   \   0000003A   0x2150             MOVS     R1,#+80
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       LCD_WriteReg
    638              LCD_WriteReg(R5, 0x04);
   \   00000042   0x2104             MOVS     R1,#+4
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x.... 0x....      BL       LCD_WriteReg
    639            }
    640          
    641          }
   \                     ??LCD_WindowModeDisable_1: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    642          /*******************************************************************************
    643          * Function Name  : LCD_DrawLine
    644          * Description    : Displays a line.
    645          * Input          : - Xpos: specifies the X position.
    646          *                  - Ypos: specifies the Y position.
    647          *                  - Length: line length.
    648          *                  - Direction: line direction.
    649          *                    This parameter can be one of the following values: Vertical
    650          *                    or Horizontal.
    651          * Output         : None
    652          * Return         : None
    653          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    654          void LCD_DrawLine(u8 Xpos, u16 Ypos, u16 Length, u8 Direction)
    655          {
   \                     LCD_DrawLine: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0014             MOVS     R4,R2
   \   0000000A   0x4698             MOV      R8,R3
    656            u32 i = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    657          
    658            LCD_SetCursor(Xpos, Ypos);
   \   0000000E   0x0039             MOVS     R1,R7
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       LCD_SetCursor
    659          
    660            if(Direction == Horizontal)
   \   0000001A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000022   0xD122             BNE.N    ??LCD_DrawLine_0
    661            {
    662              if(LCDType == LCD_ILI9320)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF249 0x3120      MOVW     R1,#+37664
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD101             BNE.N    ??LCD_DrawLine_1
    663              {
    664                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000032   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    665              }
    666              for(i = 0; i < Length; i++)
   \                     ??LCD_DrawLine_1: (+1)
   \   00000036   0x2500             MOVS     R5,#+0
   \   00000038   0xE005             B.N      ??LCD_DrawLine_2
    667              {
    668                LCD_WriteRAM(TextColor);
   \                     ??LCD_DrawLine_3: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       LCD_WriteRAM
    669              }
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_DrawLine_2: (+1)
   \   00000046   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000048   0x42A5             CMP      R5,R4
   \   0000004A   0xD3F6             BCC.N    ??LCD_DrawLine_3
    670              if(LCDType == LCD_ILI9320)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0xF249 0x3120      MOVW     R1,#+37664
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD105             BNE.N    ??LCD_DrawLine_4
    671              {
    672                LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x2104             MOVS     R1,#+4
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   00000062   0x.... 0x....      BL       LCD_CtrlLinesWrite
    673              }
    674            }
    675            else
    676            {
    677             for(i = 0; i < Length; i++)
    678              {
    679                if(LCDType == LCD_ILI9320)
    680                {
    681                  LCD_WriteRAMWord(TextColor);
    682                }
    683                else  if(LCDType == LCD_HX8312)
    684                {
    685                  LCD_WriteRAM(TextColor);
    686                }
    687                Xpos++;
    688                LCD_SetCursor(Xpos, Ypos);
    689              }
    690            }
    691          }
   \                     ??LCD_DrawLine_4: (+1)
   \   00000066   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??LCD_DrawLine_0: (+1)
   \   0000006A   0x2500             MOVS     R5,#+0
   \   0000006C   0xE013             B.N      ??LCD_DrawLine_5
   \                     ??LCD_DrawLine_6: (+1)
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF248 0x3112      MOVW     R1,#+33554
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD104             BNE.N    ??LCD_DrawLine_7
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000080   0x8800             LDRH     R0,[R0, #+0]
   \   00000082   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawLine_7: (+1)
   \   00000086   0x1C76             ADDS     R6,R6,#+1
   \   00000088   0x0039             MOVS     R1,R7
   \   0000008A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008C   0x0030             MOVS     R0,R6
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x.... 0x....      BL       LCD_SetCursor
   \   00000094   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_DrawLine_5: (+1)
   \   00000096   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000098   0x42A5             CMP      R5,R4
   \   0000009A   0xD2E4             BCS.N    ??LCD_DrawLine_4
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0xF249 0x3120      MOVW     R1,#+37664
   \   000000A6   0x4288             CMP      R0,R1
   \   000000A8   0xD1E1             BNE.N    ??LCD_DrawLine_6
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000AE   0x8800             LDRH     R0,[R0, #+0]
   \   000000B0   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000000B4   0xE7E7             B.N      ??LCD_DrawLine_7
    692          
    693          /*******************************************************************************
    694          * Function Name  : LCD_DrawRect
    695          * Description    : Displays a rectangle.
    696          * Input          : - Xpos: specifies the X position.
    697          *                  - Ypos: specifies the Y position.
    698          *                  - Height: display rectangle height.
    699          *                  - Width: display rectangle width.
    700          * Output         : None
    701          * Return         : None
    702          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    703          void LCD_DrawRect(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    704          {
   \                     LCD_DrawRect: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    705            LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x003A             MOVS     R2,R7
   \   0000000E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_DrawLine
    706            LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x003A             MOVS     R2,R7
   \   00000020   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x1930             ADDS     R0,R6,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LCD_DrawLine
    707          
    708            LCD_DrawLine(Xpos, Ypos, Height, Vertical);
   \   0000002E   0x2301             MOVS     R3,#+1
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x0032             MOVS     R2,R6
   \   00000034   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000036   0x0029             MOVS     R1,R5
   \   00000038   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       LCD_DrawLine
    709            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, Vertical);
   \   00000042   0x2301             MOVS     R3,#+1
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x0032             MOVS     R2,R6
   \   00000048   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004A   0x1BE8             SUBS     R0,R5,R7
   \   0000004C   0x1C41             ADDS     R1,R0,#+1
   \   0000004E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       LCD_DrawLine
    710          }
   \   00000058   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    711          
    712          /*******************************************************************************
    713          * Function Name  : LCD_DrawCircle
    714          * Description    : Displays a circle.
    715          * Input          : - Xpos: specifies the X position.
    716          *                  - Ypos: specifies the Y position.
    717          *                  - Height: display rectangle height.
    718          *                  - Width: display rectangle width.
    719          * Output         : None
    720          * Return         : None
    721          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    722          void LCD_DrawCircle(u8 Xpos, u16 Ypos, u16 Radius)
    723          {
   \                     LCD_DrawCircle: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    724            s32  D;/* Decision Variable */
    725            u32  CurX;/* Current X Value */
    726            u32  CurY;/* Current Y Value */
    727          
    728            D = 3 - (Radius << 1);
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x0070             LSLS     R0,R6,#+1
   \   0000000E   0xF1D0 0x0803      RSBS     R8,R0,#+3
    729            CurX = 0;
   \   00000012   0x2700             MOVS     R7,#+0
    730            CurY = Radius;
   \   00000014   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000016   0xE006             B.N      ??LCD_DrawCircle_0
    731          
    732            while (CurX <= CurY)
    733            {
    734              LCD_SetCursor(Xpos + CurX, Ypos + CurY);
    735              if(LCDType == LCD_ILI9320)
    736              {
    737                LCD_WriteRAMWord(TextColor);
    738              }
    739              else if(LCDType == LCD_HX8312)
    740              {
    741                LCD_WriteRAM(TextColor);
    742              }
    743              LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    744              if(LCDType == LCD_ILI9320)
    745              {
    746                LCD_WriteRAMWord(TextColor);
    747              }
    748              else if(LCDType == LCD_HX8312)
    749              {
    750                LCD_WriteRAM(TextColor);
    751              }
    752              LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    753              if(LCDType == LCD_ILI9320)
    754              {
    755                LCD_WriteRAMWord(TextColor);
    756              }
    757              else if(LCDType == LCD_HX8312)
    758              {
    759                LCD_WriteRAM(TextColor);
    760              }
    761              LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    762              if(LCDType == LCD_ILI9320)
    763              {
    764                LCD_WriteRAMWord(TextColor);
    765              }
    766              else if(LCDType == LCD_HX8312)
    767              {
    768                LCD_WriteRAM(TextColor);
    769              }
    770              LCD_SetCursor(Xpos + CurY, Ypos + CurX);
    771              if(LCDType == LCD_ILI9320)
    772              {
    773                LCD_WriteRAMWord(TextColor);
    774              }
    775              else if(LCDType == LCD_HX8312)
    776              {
    777                LCD_WriteRAM(TextColor);
    778              }
    779              LCD_SetCursor(Xpos + CurY, Ypos - CurX);
    780              if(LCDType == LCD_ILI9320)
    781              {
    782                LCD_WriteRAMWord(TextColor);
    783              }
    784              else if(LCDType == LCD_HX8312)
    785              {
    786                LCD_WriteRAM(TextColor);
    787              }
    788              LCD_SetCursor(Xpos - CurY, Ypos + CurX);
    789              if(LCDType == LCD_ILI9320)
    790              {
    791                LCD_WriteRAMWord(TextColor);
    792              }
    793              else if(LCDType == LCD_HX8312)
    794              {
    795                LCD_WriteRAM(TextColor);
    796              }
    797              LCD_SetCursor(Xpos - CurY, Ypos - CurX);
    798              if(LCDType == LCD_ILI9320)
    799              {
    800                LCD_WriteRAMWord(TextColor);
    801              }
    802              else if(LCDType == LCD_HX8312)
    803              {
    804                LCD_WriteRAM(TextColor);
    805              }
    806          
    807              if (D < 0)
    808              {
    809                D += (CurX << 2) + 6;
    810              }
    811              else
    812              {
    813                D += ((CurX - CurY) << 2) + 10;
   \                     ??LCD_DrawCircle_1: (+1)
   \   00000018   0x1BB8             SUBS     R0,R7,R6
   \   0000001A   0xEB18 0x0080      ADDS     R0,R8,R0, LSL #+2
   \   0000001E   0xF110 0x080A      ADDS     R8,R0,#+10
    814                CurY--;
   \   00000022   0x1E76             SUBS     R6,R6,#+1
    815              }
    816              CurX++;
   \                     ??LCD_DrawCircle_2: (+1)
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawCircle_0: (+1)
   \   00000026   0x42BE             CMP      R6,R7
   \   00000028   0xF0C0 0x80F8      BCC.W    ??LCD_DrawCircle_3
   \   0000002C   0x1971             ADDS     R1,R6,R5
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x1938             ADDS     R0,R7,R4
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       LCD_SetCursor
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF249 0x3120      MOVW     R1,#+37664
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD105             BNE.N    ??LCD_DrawCircle_4
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000004A   0x8800             LDRH     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000050   0xE00B             B.N      ??LCD_DrawCircle_5
   \                     ??LCD_DrawCircle_4: (+1)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF248 0x3112      MOVW     R1,#+33554
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD104             BNE.N    ??LCD_DrawCircle_5
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000064   0x8800             LDRH     R0,[R0, #+0]
   \   00000066   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_5: (+1)
   \   0000006A   0x1BA9             SUBS     R1,R5,R6
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0x1938             ADDS     R0,R7,R4
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x.... 0x....      BL       LCD_SetCursor
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xF249 0x3120      MOVW     R1,#+37664
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xD105             BNE.N    ??LCD_DrawCircle_6
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       LCD_WriteRAMWord
   \   0000008E   0xE00B             B.N      ??LCD_DrawCircle_7
   \                     ??LCD_DrawCircle_6: (+1)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF248 0x3112      MOVW     R1,#+33554
   \   0000009A   0x4288             CMP      R0,R1
   \   0000009C   0xD104             BNE.N    ??LCD_DrawCircle_7
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_7: (+1)
   \   000000A8   0x1971             ADDS     R1,R6,R5
   \   000000AA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000AC   0x1BE0             SUBS     R0,R4,R7
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0x.... 0x....      BL       LCD_SetCursor
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xF249 0x3120      MOVW     R1,#+37664
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD105             BNE.N    ??LCD_DrawCircle_8
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000C6   0x8800             LDRH     R0,[R0, #+0]
   \   000000C8   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000000CC   0xE00B             B.N      ??LCD_DrawCircle_9
   \                     ??LCD_DrawCircle_8: (+1)
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF248 0x3112      MOVW     R1,#+33554
   \   000000D8   0x4288             CMP      R0,R1
   \   000000DA   0xD104             BNE.N    ??LCD_DrawCircle_9
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000E0   0x8800             LDRH     R0,[R0, #+0]
   \   000000E2   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_9: (+1)
   \   000000E6   0x1BA9             SUBS     R1,R5,R6
   \   000000E8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000EA   0x1BE0             SUBS     R0,R4,R7
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x.... 0x....      BL       LCD_SetCursor
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable19
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF249 0x3120      MOVW     R1,#+37664
   \   000000FC   0x4288             CMP      R0,R1
   \   000000FE   0xD105             BNE.N    ??LCD_DrawCircle_10
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000104   0x8800             LDRH     R0,[R0, #+0]
   \   00000106   0x.... 0x....      BL       LCD_WriteRAMWord
   \   0000010A   0xE00A             B.N      ??LCD_DrawCircle_11
   \                     ??LCD_DrawCircle_10: (+1)
   \   0000010C   0x....             LDR.N    R0,??DataTable19
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0xF248 0x3112      MOVW     R1,#+33554
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD104             BNE.N    ??LCD_DrawCircle_11
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000011C   0x8800             LDRH     R0,[R0, #+0]
   \   0000011E   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_11: (+1)
   \   00000122   0x1979             ADDS     R1,R7,R5
   \   00000124   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000126   0x1930             ADDS     R0,R6,R4
   \   00000128   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012A   0x.... 0x....      BL       LCD_SetCursor
   \   0000012E   0x....             LDR.N    R0,??DataTable19
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0xF249 0x3120      MOVW     R1,#+37664
   \   00000136   0x4288             CMP      R0,R1
   \   00000138   0xD105             BNE.N    ??LCD_DrawCircle_12
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000013E   0x8800             LDRH     R0,[R0, #+0]
   \   00000140   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000144   0xE00A             B.N      ??LCD_DrawCircle_13
   \                     ??LCD_DrawCircle_12: (+1)
   \   00000146   0x....             LDR.N    R0,??DataTable19
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0xF248 0x3112      MOVW     R1,#+33554
   \   0000014E   0x4288             CMP      R0,R1
   \   00000150   0xD104             BNE.N    ??LCD_DrawCircle_13
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000156   0x8800             LDRH     R0,[R0, #+0]
   \   00000158   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_13: (+1)
   \   0000015C   0x1BE9             SUBS     R1,R5,R7
   \   0000015E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000160   0x1930             ADDS     R0,R6,R4
   \   00000162   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000164   0x.... 0x....      BL       LCD_SetCursor
   \   00000168   0x....             LDR.N    R0,??DataTable19
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0xF249 0x3120      MOVW     R1,#+37664
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xD105             BNE.N    ??LCD_DrawCircle_14
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000178   0x8800             LDRH     R0,[R0, #+0]
   \   0000017A   0x.... 0x....      BL       LCD_WriteRAMWord
   \   0000017E   0xE00A             B.N      ??LCD_DrawCircle_15
   \                     ??LCD_DrawCircle_14: (+1)
   \   00000180   0x....             LDR.N    R0,??DataTable19
   \   00000182   0x6800             LDR      R0,[R0, #+0]
   \   00000184   0xF248 0x3112      MOVW     R1,#+33554
   \   00000188   0x4288             CMP      R0,R1
   \   0000018A   0xD104             BNE.N    ??LCD_DrawCircle_15
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000190   0x8800             LDRH     R0,[R0, #+0]
   \   00000192   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_15: (+1)
   \   00000196   0x1979             ADDS     R1,R7,R5
   \   00000198   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000019A   0x1BA0             SUBS     R0,R4,R6
   \   0000019C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019E   0x.... 0x....      BL       LCD_SetCursor
   \   000001A2   0x....             LDR.N    R0,??DataTable19
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0xF249 0x3120      MOVW     R1,#+37664
   \   000001AA   0x4288             CMP      R0,R1
   \   000001AC   0xD105             BNE.N    ??LCD_DrawCircle_16
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000001B2   0x8800             LDRH     R0,[R0, #+0]
   \   000001B4   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000001B8   0xE00A             B.N      ??LCD_DrawCircle_17
   \                     ??LCD_DrawCircle_16: (+1)
   \   000001BA   0x....             LDR.N    R0,??DataTable19
   \   000001BC   0x6800             LDR      R0,[R0, #+0]
   \   000001BE   0xF248 0x3112      MOVW     R1,#+33554
   \   000001C2   0x4288             CMP      R0,R1
   \   000001C4   0xD104             BNE.N    ??LCD_DrawCircle_17
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000001CA   0x8800             LDRH     R0,[R0, #+0]
   \   000001CC   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_17: (+1)
   \   000001D0   0x1BE9             SUBS     R1,R5,R7
   \   000001D2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001D4   0x1BA0             SUBS     R0,R4,R6
   \   000001D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D8   0x.... 0x....      BL       LCD_SetCursor
   \   000001DC   0x....             LDR.N    R0,??DataTable19
   \   000001DE   0x6800             LDR      R0,[R0, #+0]
   \   000001E0   0xF249 0x3120      MOVW     R1,#+37664
   \   000001E4   0x4288             CMP      R0,R1
   \   000001E6   0xD105             BNE.N    ??LCD_DrawCircle_18
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000001EC   0x8800             LDRH     R0,[R0, #+0]
   \   000001EE   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000001F2   0xE00A             B.N      ??LCD_DrawCircle_19
   \                     ??LCD_DrawCircle_18: (+1)
   \   000001F4   0x....             LDR.N    R0,??DataTable19
   \   000001F6   0x6800             LDR      R0,[R0, #+0]
   \   000001F8   0xF248 0x3112      MOVW     R1,#+33554
   \   000001FC   0x4288             CMP      R0,R1
   \   000001FE   0xD104             BNE.N    ??LCD_DrawCircle_19
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000204   0x8800             LDRH     R0,[R0, #+0]
   \   00000206   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawCircle_19: (+1)
   \   0000020A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000020E   0xF57F 0xAF03      BPL.W    ??LCD_DrawCircle_1
   \   00000212   0xEB18 0x0087      ADDS     R0,R8,R7, LSL #+2
   \   00000216   0xF110 0x0806      ADDS     R8,R0,#+6
   \   0000021A   0xE703             B.N      ??LCD_DrawCircle_2
    817            }
    818          }
   \                     ??LCD_DrawCircle_3: (+1)
   \   0000021C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    819          
    820          /*******************************************************************************
    821          * Function Name  : LCD_DrawMonoPict
    822          * Description    : Displays a monocolor picture.
    823          * Input          : - Pict: pointer to the picture array.
    824          * Output         : None
    825          * Return         : None
    826          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    827          void LCD_DrawMonoPict(uc32 *Pict)
    828          {
   \                     LCD_DrawMonoPict: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    829            u32 index = 0, i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
    830          
    831            LCD_SetCursor(0, 319);
   \   00000008   0xF240 0x113F      MOVW     R1,#+319
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCD_SetCursor
    832            if(LCDType == LCD_ILI9320)
   \   00000012   0x....             LDR.N    R0,??DataTable19
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF249 0x3120      MOVW     R1,#+37664
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD101             BNE.N    ??LCD_DrawMonoPict_0
    833            {
    834              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   0000001E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    835            }
    836            for(index = 0; index < 2400; index++)
   \                     ??LCD_DrawMonoPict_0: (+1)
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE000             B.N      ??LCD_DrawMonoPict_1
   \                     ??LCD_DrawMonoPict_2: (+1)
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_DrawMonoPict_1: (+1)
   \   00000028   0xF5B5 0x6F16      CMP      R5,#+2400
   \   0000002C   0xD215             BCS.N    ??LCD_DrawMonoPict_3
    837            {
    838              for(i = 0; i < 32; i++)
   \   0000002E   0x2600             MOVS     R6,#+0
   \   00000030   0xE005             B.N      ??LCD_DrawMonoPict_4
    839              {
    840                if((Pict[index] & (1 << i)) == 0x00)
    841                {
    842                  LCD_WriteRAM(BackColor);
    843                }
    844                else
    845                {
    846                  LCD_WriteRAM(TextColor);
   \                     ??LCD_DrawMonoPict_5: (+1)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       LCD_WriteRAM
    847                }
   \                     ??LCD_DrawMonoPict_6: (+1)
   \   0000003C   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_DrawMonoPict_4: (+1)
   \   0000003E   0x2E20             CMP      R6,#+32
   \   00000040   0xD2F1             BCS.N    ??LCD_DrawMonoPict_2
   \   00000042   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \   00000046   0x0001             MOVS     R1,R0
   \   00000048   0x40F1             LSRS     R1,R1,R6
   \   0000004A   0x07C8             LSLS     R0,R1,#+31
   \   0000004C   0xD4F1             BMI.N    ??LCD_DrawMonoPict_5
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable27_1
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       LCD_WriteRAM
   \   00000058   0xE7F0             B.N      ??LCD_DrawMonoPict_6
    848              }
    849            }
    850            if(LCDType == LCD_ILI9320)
   \                     ??LCD_DrawMonoPict_3: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable19
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0xF249 0x3120      MOVW     R1,#+37664
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD105             BNE.N    ??LCD_DrawMonoPict_7
    851            {
    852              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000066   0x2201             MOVS     R2,#+1
   \   00000068   0x2104             MOVS     R1,#+4
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   0000006E   0x.... 0x....      BL       LCD_CtrlLinesWrite
    853            }
    854          }
   \                     ??LCD_DrawMonoPict_7: (+1)
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
    855          
    856          /*******************************************************************************
    857          * Function Name  : LCD_nCS_StartByte
    858          * Description    : Reset LCD control line(/CS) and Send Start-Byte
    859          * Input          : - Start_Byte: the Start-Byte to be sent
    860          * Output         : None
    861          * Return         : None
    862          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    863          void LCD_nCS_StartByte(u8 Start_Byte)
    864          {
   \                     LCD_nCS_StartByte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    865            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   0000000C   0x.... 0x....      BL       LCD_CtrlLinesWrite
    866          
    867            SPI_I2S_SendData(SPI2, Start_Byte);
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000001A   0x.... 0x....      BL       SPI_I2S_SendData
    868            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_nCS_StartByte_0: (+1)
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000024   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD1F8             BNE.N    ??LCD_nCS_StartByte_0
    869            {
    870            }
    871          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    872          
    873          /*******************************************************************************
    874          * Function Name  : LCD_WriteRegIndex
    875          * Description    : Writes index to select the LCD register.
    876          * Input          : - LCD_Reg: address of the selected register.
    877          * Output         : None
    878          * Return         : None
    879          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    880          void LCD_WriteRegIndex(u8 LCD_Reg)
    881          {
   \                     LCD_WriteRegIndex: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    882            /* Reset LCD control line(/CS) and Send Start-Byte */
    883            LCD_nCS_StartByte(START_BYTE | SET_INDEX);
   \   00000004   0x2070             MOVS     R0,#+112
   \   00000006   0x.... 0x....      BL       LCD_nCS_StartByte
    884          
    885            /* Write 16-bit Reg Index (High Byte is 0) */
    886            SPI_I2S_SendData(SPI2, 0x00);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000010   0x.... 0x....      BL       SPI_I2S_SendData
    887            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegIndex_0: (+1)
   \   00000014   0x2180             MOVS     R1,#+128
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000001A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F8             BNE.N    ??LCD_WriteRegIndex_0
    888            {
    889            }
    890            SPI_I2S_SendData(SPI2, LCD_Reg);
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000002C   0x.... 0x....      BL       SPI_I2S_SendData
    891            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegIndex_1: (+1)
   \   00000030   0x2180             MOVS     R1,#+128
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000036   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD1F8             BNE.N    ??LCD_WriteRegIndex_1
    892            {
    893            }
    894          
    895            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2104             MOVS     R1,#+4
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   00000046   0x.... 0x....      BL       LCD_CtrlLinesWrite
    896          }
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
    897          
    898          /*******************************************************************************
    899          * Function Name  : LCD_WriteRegILI9320
    900          * Description    : Writes to the selected LCD ILI9320 register.
    901          * Input          : - LCD_Reg: address of the selected register.
    902          *                  - LCD_RegValue: value to write to the selected register.
    903          * Output         : None
    904          * Return         : None
    905          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    906          static void LCD_WriteRegILI9320(u8 LCD_Reg, u16 LCD_RegValue)
    907          {
   \                     LCD_WriteRegILI9320: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    908            /* Write 16-bit Index (then Write Reg) */
    909            LCD_WriteRegIndex(LCD_Reg);
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x.... 0x....      BL       LCD_WriteRegIndex
    910          
    911            /* Write 16-bit Reg */
    912            /* Reset LCD control line(/CS) and Send Start-Byte */
    913            LCD_nCS_StartByte(START_BYTE | WRITE_REG);
   \   0000000A   0x2072             MOVS     R0,#+114
   \   0000000C   0x.... 0x....      BL       LCD_nCS_StartByte
    914          
    915            SPI_I2S_SendData(SPI2, LCD_RegValue>>8);
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x0A21             LSRS     R1,R4,#+8
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000018   0x.... 0x....      BL       SPI_I2S_SendData
    916            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegILI9320_0: (+1)
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000022   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F8             BNE.N    ??LCD_WriteRegILI9320_0
    917            {
    918            }
    919            SPI_I2S_SendData(SPI2, (LCD_RegValue & 0xFF));
   \   0000002A   0xB2E1             UXTB     R1,R4            ;; ZeroExt  R1,R4,#+24,#+24
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000030   0x.... 0x....      BL       SPI_I2S_SendData
    920            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegILI9320_1: (+1)
   \   00000034   0x2180             MOVS     R1,#+128
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000003A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1F8             BNE.N    ??LCD_WriteRegILI9320_1
    921            {
    922            }
    923          
    924            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x2104             MOVS     R1,#+4
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   0000004A   0x.... 0x....      BL       LCD_CtrlLinesWrite
    925          }
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    926          
    927          /*******************************************************************************
    928          * Function Name  : LCD_ReadReg
    929          * Description    : Reads the selected LCD Register.
    930          * Input          : None
    931          * Output         : None
    932          * Return         : LCD Register Value.
    933          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    934          u16 LCD_ReadReg(u8 LCD_Reg)
    935          {
   \                     LCD_ReadReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    936            u16 tmp = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    937            u8 i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    938          
    939            /* SPI2 prescaler: 4 */
    940            SPI2->CR1 &= 0xFFC7;
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable27_6  ;; 0x40003800
   \   0000000A   0x8809             LDRH     R1,[R1, #+0]
   \   0000000C   0xF64F 0x72C7      MOVW     R2,#+65479
   \   00000010   0x4011             ANDS     R1,R2,R1
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable27_6  ;; 0x40003800
   \   00000016   0x8011             STRH     R1,[R2, #+0]
    941            SPI2->CR1 |= 0x0008;
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable27_6  ;; 0x40003800
   \   0000001C   0x8809             LDRH     R1,[R1, #+0]
   \   0000001E   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable27_6  ;; 0x40003800
   \   00000026   0x8011             STRH     R1,[R2, #+0]
    942          
    943            /* Write 16-bit Index (then Read Reg) */
    944            LCD_WriteRegIndex(LCD_Reg);
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LCD_WriteRegIndex
    945          
    946            /* Read 16-bit Reg */
    947            /* Reset LCD control line(/CS) and Send Start-Byte */
    948            LCD_nCS_StartByte(START_BYTE | READ_REG);
   \   0000002E   0x2073             MOVS     R0,#+115
   \   00000030   0x.... 0x....      BL       LCD_nCS_StartByte
    949          
    950            for(i = 0; i < 5; i++)
   \   00000034   0x2400             MOVS     R4,#+0
   \   00000036   0xE017             B.N      ??LCD_ReadReg_0
    951            {
    952              SPI_I2S_SendData(SPI2, 0xFF);
   \                     ??LCD_ReadReg_1: (+1)
   \   00000038   0x21FF             MOVS     R1,#+255
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000003E   0x.... 0x....      BL       SPI_I2S_SendData
    953              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_2: (+1)
   \   00000042   0x2180             MOVS     R1,#+128
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000048   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD1F8             BNE.N    ??LCD_ReadReg_2
    954              {
    955              }
    956              /* One byte of invalid dummy data read after the start byte */
    957              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_3: (+1)
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000056   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD0F8             BEQ.N    ??LCD_ReadReg_3
    958              {
    959              }
    960              SPI_I2S_ReceiveData(SPI2);
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000062   0x.... 0x....      BL       SPI_I2S_ReceiveData
    961            }
   \   00000066   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_ReadReg_0: (+1)
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x2C05             CMP      R4,#+5
   \   0000006C   0xDBE4             BLT.N    ??LCD_ReadReg_1
    962          
    963            SPI_I2S_SendData(SPI2, 0xFF);
   \   0000006E   0x21FF             MOVS     R1,#+255
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000074   0x.... 0x....      BL       SPI_I2S_SendData
    964            /* Read upper byte */
    965            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_4: (+1)
   \   00000078   0x2180             MOVS     R1,#+128
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000007E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD1F8             BNE.N    ??LCD_ReadReg_4
    966            {
    967            }
    968            /* Read lower byte */
    969            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_5: (+1)
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000008C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD0F8             BEQ.N    ??LCD_ReadReg_5
    970            {
    971            }
    972            tmp = SPI_I2S_ReceiveData(SPI2);
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   00000098   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000009C   0x0004             MOVS     R4,R0
    973          
    974          
    975            SPI_I2S_SendData(SPI2, 0xFF);
   \   0000009E   0x21FF             MOVS     R1,#+255
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   000000A4   0x.... 0x....      BL       SPI_I2S_SendData
    976            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_6: (+1)
   \   000000A8   0x2180             MOVS     R1,#+128
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   000000AE   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD1F8             BNE.N    ??LCD_ReadReg_6
    977            {
    978            }
    979            /* Read lower byte */
    980            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_7: (+1)
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   000000BC   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD0F8             BEQ.N    ??LCD_ReadReg_7
    981            {
    982            }
    983            tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(SPI2);
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   000000C8   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   000000CC   0xEA50 0x2404      ORRS     R4,R0,R4, LSL #+8
    984          
    985            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   000000D0   0x2201             MOVS     R2,#+1
   \   000000D2   0x2104             MOVS     R1,#+4
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   000000D8   0x.... 0x....      BL       LCD_CtrlLinesWrite
    986          
    987            /* SPI2 prescaler: 2 */
    988            SPI2->CR1 &= 0xFFC7;
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   000000E0   0x8800             LDRH     R0,[R0, #+0]
   \   000000E2   0xF64F 0x71C7      MOVW     R1,#+65479
   \   000000E6   0x4008             ANDS     R0,R1,R0
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable27_6  ;; 0x40003800
   \   000000EC   0x8008             STRH     R0,[R1, #+0]
    989          
    990            return tmp;
   \   000000EE   0x0020             MOVS     R0,R4
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F2   0xBD10             POP      {R4,PC}          ;; return
    991          }
    992          
    993          /*******************************************************************************
    994          * Function Name  : LCD_WriteRAM_Prepare
    995          * Description    : Prepare to write to the LCD RAM.
    996          * Input          : None
    997          * Output         : None
    998          * Return         : None
    999          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1000          void LCD_WriteRAM_Prepare(void)
   1001          {
   \                     LCD_WriteRAM_Prepare: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1002            LCD_WriteRegIndex(R34); /* Select GRAM Reg */
   \   00000002   0x2022             MOVS     R0,#+34
   \   00000004   0x.... 0x....      BL       LCD_WriteRegIndex
   1003          
   1004            /* Reset LCD control line(/CS) and Send Start-Byte */
   1005            LCD_nCS_StartByte(START_BYTE | WRITE_REG);
   \   00000008   0x2072             MOVS     R0,#+114
   \   0000000A   0x.... 0x....      BL       LCD_nCS_StartByte
   1006          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
   1007          
   1008          /*******************************************************************************
   1009          * Function Name  : LCD_WriteRAMWord
   1010          * Description    : Writes 1 word to the LCD RAM.
   1011          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
   1012          * Output         : None
   1013          * Return         : None
   1014          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1015          void LCD_WriteRAMWord(u16 RGB_Code)
   1016          {
   \                     LCD_WriteRAMWord: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1017            LCD_WriteRAM_Prepare();
   \   00000004   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   1018          
   1019            LCD_WriteRAM(RGB_Code);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x.... 0x....      BL       LCD_WriteRAM
   1020          
   1021            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   00000018   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1022          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
   1023          
   1024          /*******************************************************************************
   1025          * Function Name  : LCD_WriteRegHX8312
   1026          * Description    : Writes to the selected LCD HX8312 register.
   1027          * Input          : - LCD_Reg: address of the selected register.
   1028          *                  - LCD_RegValue: value to write to the selected register.
   1029          * Output         : None
   1030          * Return         : None
   1031          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1032          static void LCD_WriteRegHX8312(u8 LCD_Reg, u8 LCD_RegValue)
   1033          {
   \                     LCD_WriteRegHX8312: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1034            u16 tmp = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   1035          
   1036            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xF44F 0x4100      MOV      R1,#+32768
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable27_7  ;; 0x40011400
   \   00000012   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1037            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_RESET);
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2180             MOVS     R1,#+128
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable27_7  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1038            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2104             MOVS     R1,#+4
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable27_3  ;; 0x40010c00
   \   0000002A   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1039          
   1040            tmp = LCD_Reg << 8;
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x0221             LSLS     R1,R4,#+8
   1041            tmp |= LCD_RegValue;
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x4329             ORRS     R1,R5,R1
   1042          
   1043            SPI_I2S_SendData(SPI2, tmp);
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable27_6  ;; 0x40003800
   \   0000003C   0x.... 0x....      BL       SPI_I2S_SendData
   1044            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegHX8312_0: (+1)
   \   00000040   0x2180             MOVS     R1,#+128
   \   00000042   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   00000044   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1F9             BNE.N    ??LCD_WriteRegHX8312_0
   1045            {
   1046            }
   1047          
   1048            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x....             LDR.N    R0,??DataTable27_3  ;; 0x40010c00
   \   00000052   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1049          }
   \   00000056   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1050          
   1051          /*******************************************************************************
   1052          * Function Name  : LCD_WriteReg
   1053          * Description    : Writes to the selected LCD register.
   1054          * Input          : - LCD_Reg: address of the selected register.
   1055          *                  - LCD_RegValue: value to write to the selected register.
   1056          * Output         : None
   1057          * Return         : None
   1058          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1059          void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
   1060          {
   \                     LCD_WriteReg: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1061            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R2,??DataTable27_8
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xF249 0x3320      MOVW     R3,#+37664
   \   0000000A   0x429A             CMP      R2,R3
   \   0000000C   0xD104             BNE.N    ??LCD_WriteReg_0
   1062            {
   1063              LCD_WriteRegILI9320(LCD_Reg, LCD_RegValue);
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       LCD_WriteRegILI9320
   \   00000016   0xE009             B.N      ??LCD_WriteReg_1
   1064            }
   1065            else if(LCDType == LCD_HX8312)
   \                     ??LCD_WriteReg_0: (+1)
   \   00000018   0x....             LDR.N    R2,??DataTable27_8
   \   0000001A   0x6812             LDR      R2,[R2, #+0]
   \   0000001C   0xF248 0x3312      MOVW     R3,#+33554
   \   00000020   0x429A             CMP      R2,R3
   \   00000022   0xD103             BNE.N    ??LCD_WriteReg_1
   1066            {
   1067              LCD_WriteRegHX8312(LCD_Reg, ((u8)LCD_RegValue));
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x.... 0x....      BL       LCD_WriteRegHX8312
   1068            }
   1069          }
   \                     ??LCD_WriteReg_1: (+1)
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
   1070          
   1071          
   1072          /*******************************************************************************
   1073          * Function Name  : LCD_WriteRAM
   1074          * Description    : Writes to the LCD RAM.
   1075          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
   1076          * Output         : None
   1077          * Return         : None
   1078          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1079          void LCD_WriteRAM(u16 RGB_Code)
   1080          {
   \                     LCD_WriteRAM: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1081            if(LCDType == LCD_ILI9320)
   \   00000004   0x....             LDR.N    R0,??DataTable27_8
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD114             BNE.N    ??LCD_WriteRAM_0
   1082            {
   1083              SPI_I2S_SendData(SPI2, RGB_Code >> 8);
   \   00000010   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   0x0A21             LSRS     R1,R4,#+8
   \   00000014   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   00000016   0x.... 0x....      BL       SPI_I2S_SendData
   1084              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_1: (+1)
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   0000001E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??LCD_WriteRAM_1
   1085              {
   1086              }
   1087              SPI_I2S_SendData(SPI2, RGB_Code & 0xFF);
   \   00000026   0xB2E1             UXTB     R1,R4            ;; ZeroExt  R1,R4,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   0000002A   0x.... 0x....      BL       SPI_I2S_SendData
   1088              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_2: (+1)
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   00000032   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1F9             BNE.N    ??LCD_WriteRAM_2
   1089              {
   1090              }
   1091            }
   1092            if(LCDType == LCD_HX8312)
   \                     ??LCD_WriteRAM_0: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable27_8
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF248 0x3112      MOVW     R1,#+33554
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD11F             BNE.N    ??LCD_WriteRAM_3
   1093            {
   1094              LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0xF44F 0x4100      MOV      R1,#+32768
   \   0000004C   0x....             LDR.N    R0,??DataTable27_7  ;; 0x40011400
   \   0000004E   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1095              LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x2180             MOVS     R1,#+128
   \   00000056   0x....             LDR.N    R0,??DataTable27_7  ;; 0x40011400
   \   00000058   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1096              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x2104             MOVS     R1,#+4
   \   00000060   0x....             LDR.N    R0,??DataTable27_3  ;; 0x40010c00
   \   00000062   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1097          
   1098              SPI_I2S_SendData(SPI2, RGB_Code);
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006A   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   0000006C   0x.... 0x....      BL       SPI_I2S_SendData
   1099              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_4: (+1)
   \   00000070   0x2180             MOVS     R1,#+128
   \   00000072   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   00000074   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD1F9             BNE.N    ??LCD_WriteRAM_4
   1100              {
   1101              }
   1102          
   1103              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000007C   0x2201             MOVS     R2,#+1
   \   0000007E   0x2104             MOVS     R1,#+4
   \   00000080   0x....             LDR.N    R0,??DataTable27_3  ;; 0x40010c00
   \   00000082   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1104            }
   1105          }
   \                     ??LCD_WriteRAM_3: (+1)
   \   00000086   0xBD10             POP      {R4,PC}          ;; return
   1106          
   1107          /*******************************************************************************
   1108          * Function Name  : LCD_PowerOn
   1109          * Description    : Power on the LCD.
   1110          * Input          : None
   1111          * Output         : None
   1112          * Return         : None
   1113          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1114          void LCD_PowerOn(void)
   1115          {
   \                     LCD_PowerOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1116            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable27_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD139             BNE.N    ??LCD_PowerOn_0
   1117            {
   1118              /* Power On sequence ---------------------------------------------------------*/
   1119              LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0x.... 0x....      BL       LCD_WriteReg
   1120              LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2011             MOVS     R0,#+17
   \   0000001A   0x.... 0x....      BL       LCD_WriteReg
   1121              LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2012             MOVS     R0,#+18
   \   00000022   0x.... 0x....      BL       LCD_WriteReg
   1122              LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2013             MOVS     R0,#+19
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
   1123              Delay(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   0000002E   0x2014             MOVS     R0,#+20
   \   00000030   0x.... 0x....      BL       Delay
   1124              LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000034   0xF241 0x71B0      MOVW     R1,#+6064
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x.... 0x....      BL       LCD_WriteReg
   1125              LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000003E   0xF240 0x1137      MOVW     R1,#+311
   \   00000042   0x2011             MOVS     R0,#+17
   \   00000044   0x.... 0x....      BL       LCD_WriteReg
   1126              Delay(5);                  /* Delay 50 ms */
   \   00000048   0x2005             MOVS     R0,#+5
   \   0000004A   0x.... 0x....      BL       Delay
   1127              LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
   \   0000004E   0xF240 0x1139      MOVW     R1,#+313
   \   00000052   0x2012             MOVS     R0,#+18
   \   00000054   0x.... 0x....      BL       LCD_WriteReg
   1128              Delay(5);                  /* delay 50 ms */
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0x.... 0x....      BL       Delay
   1129              LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   0000005E   0xF44F 0x51E8      MOV      R1,#+7424
   \   00000062   0x2013             MOVS     R0,#+19
   \   00000064   0x.... 0x....      BL       LCD_WriteReg
   1130              LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
   \   00000068   0x2113             MOVS     R1,#+19
   \   0000006A   0x2029             MOVS     R0,#+41
   \   0000006C   0x.... 0x....      BL       LCD_WriteReg
   1131              Delay(5);                  /* delay 50 ms */
   \   00000070   0x2005             MOVS     R0,#+5
   \   00000072   0x.... 0x....      BL       Delay
   1132              LCD_WriteReg(R7, 0x0173);  /* 262K color and display ON */
   \   00000076   0xF240 0x1173      MOVW     R1,#+371
   \   0000007A   0x2007             MOVS     R0,#+7
   \   0000007C   0x.... 0x....      BL       LCD_WriteReg
   \   00000080   0xE040             B.N      ??LCD_PowerOn_1
   1133            }
   1134            else if(LCDType == LCD_HX8312)
   \                     ??LCD_PowerOn_0: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable27_8
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF248 0x3112      MOVW     R1,#+33554
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD13A             BNE.N    ??LCD_PowerOn_1
   1135            {
   1136              /* Power On Set */
   1137              LCD_WriteReg(R28, 0x73);
   \   0000008E   0x2173             MOVS     R1,#+115
   \   00000090   0x201C             MOVS     R0,#+28
   \   00000092   0x.... 0x....      BL       LCD_WriteReg
   1138              LCD_WriteReg(R36, 0x74);
   \   00000096   0x2174             MOVS     R1,#+116
   \   00000098   0x2024             MOVS     R0,#+36
   \   0000009A   0x.... 0x....      BL       LCD_WriteReg
   1139              LCD_WriteReg(R30, 0x01);
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x201E             MOVS     R0,#+30
   \   000000A2   0x.... 0x....      BL       LCD_WriteReg
   1140              LCD_WriteReg(R24, 0xC1);
   \   000000A6   0x21C1             MOVS     R1,#+193
   \   000000A8   0x2018             MOVS     R0,#+24
   \   000000AA   0x.... 0x....      BL       LCD_WriteReg
   1141              Delay(1); /* Delay 10 ms */
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x.... 0x....      BL       Delay
   1142              LCD_WriteReg(R24, 0xE1);
   \   000000B4   0x21E1             MOVS     R1,#+225
   \   000000B6   0x2018             MOVS     R0,#+24
   \   000000B8   0x.... 0x....      BL       LCD_WriteReg
   1143              LCD_WriteReg(R24, 0xF1);
   \   000000BC   0x21F1             MOVS     R1,#+241
   \   000000BE   0x2018             MOVS     R0,#+24
   \   000000C0   0x.... 0x....      BL       LCD_WriteReg
   1144              Delay(6); /* Delay 60 ms */
   \   000000C4   0x2006             MOVS     R0,#+6
   \   000000C6   0x.... 0x....      BL       Delay
   1145              LCD_WriteReg(R24, 0xF5);
   \   000000CA   0x21F5             MOVS     R1,#+245
   \   000000CC   0x2018             MOVS     R0,#+24
   \   000000CE   0x.... 0x....      BL       LCD_WriteReg
   1146              Delay(6); /* Delay 60 ms */
   \   000000D2   0x2006             MOVS     R0,#+6
   \   000000D4   0x.... 0x....      BL       Delay
   1147              LCD_WriteReg(R27, 0x09);
   \   000000D8   0x2109             MOVS     R1,#+9
   \   000000DA   0x201B             MOVS     R0,#+27
   \   000000DC   0x.... 0x....      BL       LCD_WriteReg
   1148              Delay(1); /* Delay 10 ms */
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0x.... 0x....      BL       Delay
   1149              LCD_WriteReg(R31, 0x11);
   \   000000E6   0x2111             MOVS     R1,#+17
   \   000000E8   0x201F             MOVS     R0,#+31
   \   000000EA   0x.... 0x....      BL       LCD_WriteReg
   1150              LCD_WriteReg(R32, 0x0E);
   \   000000EE   0x210E             MOVS     R1,#+14
   \   000000F0   0x2020             MOVS     R0,#+32
   \   000000F2   0x.... 0x....      BL       LCD_WriteReg
   1151              LCD_WriteReg(R30, 0x81);
   \   000000F6   0x2181             MOVS     R1,#+129
   \   000000F8   0x201E             MOVS     R0,#+30
   \   000000FA   0x.... 0x....      BL       LCD_WriteReg
   1152              Delay(1); /* Delay 10 ms */
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x.... 0x....      BL       Delay
   1153            }
   1154          }
   \                     ??LCD_PowerOn_1: (+1)
   \   00000104   0xBD01             POP      {R0,PC}          ;; return
   1155          
   1156          /*******************************************************************************
   1157          * Function Name  : LCD_DisplayOn
   1158          * Description    : Enables the Display.
   1159          * Input          : None
   1160          * Output         : None
   1161          * Return         : None
   1162          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1163          void LCD_DisplayOn(void)
   1164          {
   \                     LCD_DisplayOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1165            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable27_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD105             BNE.N    ??LCD_DisplayOn_0
   1166            {
   1167              /* Display On */
   1168              LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
   \   0000000E   0xF240 0x1173      MOVW     R1,#+371
   \   00000012   0x2007             MOVS     R0,#+7
   \   00000014   0x.... 0x....      BL       LCD_WriteReg
   \   00000018   0xE01C             B.N      ??LCD_DisplayOn_1
   1169            }
   1170            else if(LCDType == LCD_HX8312)
   \                     ??LCD_DisplayOn_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable27_8
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF248 0x3112      MOVW     R1,#+33554
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD116             BNE.N    ??LCD_DisplayOn_1
   1171            {
   1172              LCD_WriteReg(R1, 0x50);
   \   00000026   0x2150             MOVS     R1,#+80
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
   1173              LCD_WriteReg(R5, 0x04);
   \   0000002E   0x2104             MOVS     R1,#+4
   \   00000030   0x2005             MOVS     R0,#+5
   \   00000032   0x.... 0x....      BL       LCD_WriteReg
   1174          
   1175              /* Display On */
   1176              LCD_WriteReg(R0, 0x80);
   \   00000036   0x2180             MOVS     R1,#+128
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       LCD_WriteReg
   1177              LCD_WriteReg(R59, 0x01);
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x203B             MOVS     R0,#+59
   \   00000042   0x.... 0x....      BL       LCD_WriteReg
   1178              Delay(4);                 /* Delay 40 ms */
   \   00000046   0x2004             MOVS     R0,#+4
   \   00000048   0x.... 0x....      BL       Delay
   1179              LCD_WriteReg(R0, 0x20);
   \   0000004C   0x2120             MOVS     R1,#+32
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       LCD_WriteReg
   1180            }
   1181          }
   \                     ??LCD_DisplayOn_1: (+1)
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
   1182          
   1183          /*******************************************************************************
   1184          * Function Name  : LCD_DisplayOff
   1185          * Description    : Disables the Display.
   1186          * Input          : None
   1187          * Output         : None
   1188          * Return         : None
   1189          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1190          void LCD_DisplayOff(void)
   1191          {
   \                     LCD_DisplayOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1192            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable27_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD104             BNE.N    ??LCD_DisplayOff_0
   1193            {
   1194              /* Display Off */
   1195              LCD_WriteReg(R7, 0x0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2007             MOVS     R0,#+7
   \   00000012   0x.... 0x....      BL       LCD_WriteReg
   \   00000016   0xE010             B.N      ??LCD_DisplayOff_1
   1196            }
   1197            else if(LCDType == LCD_HX8312)
   \                     ??LCD_DisplayOff_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable27_8
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF248 0x3112      MOVW     R1,#+33554
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD10A             BNE.N    ??LCD_DisplayOff_1
   1198            {
   1199              /* Display Off */
   1200              LCD_WriteReg(R0, 0xA0);
   \   00000024   0x21A0             MOVS     R1,#+160
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       LCD_WriteReg
   1201              Delay(4);                 /* Delay 40 ms */
   \   0000002C   0x2004             MOVS     R0,#+4
   \   0000002E   0x.... 0x....      BL       Delay
   1202              LCD_WriteReg(R59, 0x00);
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x203B             MOVS     R0,#+59
   \   00000036   0x.... 0x....      BL       LCD_WriteReg
   1203            }
   1204          }
   \                     ??LCD_DisplayOff_1: (+1)
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
   1205          
   1206          /*******************************************************************************
   1207          * Function Name  : LCD_CtrlLinesConfig
   1208          * Description    : Configures LCD control lines in Output Push-Pull mode.
   1209          * Input          : None
   1210          * Output         : None
   1211          * Return         : None
   1212          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1213          void LCD_CtrlLinesConfig(void)
   1214          {
   \                     LCD_CtrlLinesConfig: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1215            GPIO_InitTypeDef GPIO_InitStructure;
   1216          
   1217            /* Configure NCS (PB.02) in Output Push-Pull mode */
   1218            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1219            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1220            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1221            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x....             LDR.N    R0,??DataTable27_3  ;; 0x40010c00
   \   00000018   0x.... 0x....      BL       GPIO_Init
   1222          
   1223            /* Configure NWR(RNW), RS (PD.15, PD.07) in Output Push-Pull mode */
   1224            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_15;
   \   0000001C   0xF248 0x0080      MOVW     R0,#+32896
   \   00000020   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1225            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x....             LDR.N    R0,??DataTable27_7  ;; 0x40011400
   \   00000028   0x.... 0x....      BL       GPIO_Init
   1226          
   1227            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_SET);
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0xF44F 0x4100      MOV      R1,#+32768
   \   00000032   0x....             LDR.N    R0,??DataTable27_7  ;; 0x40011400
   \   00000034   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1228            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x2180             MOVS     R1,#+128
   \   0000003C   0x....             LDR.N    R0,??DataTable27_7  ;; 0x40011400
   \   0000003E   0x.... 0x....      BL       LCD_CtrlLinesWrite
   1229          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
   1230          
   1231          /*******************************************************************************
   1232          * Function Name  : LCD_CtrlLinesWrite
   1233          * Description    : Sets or reset LCD control lines.
   1234          * Input          : - GPIOx: where x can be B or D to select the GPIO peripheral.
   1235          *                  - CtrlPins: the Control line. This parameter can be:
   1236          *                       - CtrlPin_NCS: Chip Select pin (PB.02)
   1237          *                       - CtrlPin_NWR: Read/Write Selection pin (PD.15)
   1238          *                       - CtrlPin_RS: Register/RAM Selection pin (PD.07)
   1239          *                  - BitVal: specifies the value to be written to the selected bit.
   1240          *                    This parameter can be:
   1241          *                       - Bit_RESET: to clear the port pin
   1242          *                       - Bit_SET: to set the port pin
   1243          * Output         : None
   1244          * Return         : None
   1245          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1246          void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, u16 CtrlPins, BitAction BitVal)
   1247          {
   \                     LCD_CtrlLinesWrite: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1248            /* Set or Reset the control line */
   1249            GPIO_WriteBit(GPIOx, CtrlPins, BitVal);
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x.... 0x....      BL       GPIO_WriteBit
   1250          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   1251          
   1252          /*******************************************************************************
   1253          * Function Name  : LCD_SPIConfig
   1254          * Description    : Configures the SPI2 interface.
   1255          * Input          : None
   1256          * Output         : None
   1257          * Return         : None
   1258          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1259          void LCD_SPIConfig(void)
   1260          {
   \                     LCD_SPIConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   1261            SPI_InitTypeDef    SPI_InitStructure;
   1262            GPIO_InitTypeDef   GPIO_InitStructure;
   1263          
   1264            /* Enable GPIOB clock */
   1265            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
   1266          
   1267            /* Enable SPI2 clock  */
   1268            RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   1269          
   1270            /* Configure SPI2 pins: NSS, SCK, MISO and MOSI */
   1271            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000016   0xF44F 0x4070      MOV      R0,#+61440
   \   0000001A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1272            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1273            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000024   0x2018             MOVS     R0,#+24
   \   00000026   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1274            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable27_3  ;; 0x40010c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
   1275          
   1276            SPI_I2S_DeInit(SPI2);
   \   00000032   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   00000034   0x.... 0x....      BL       SPI_I2S_DeInit
   1277          
   1278            /* SPI2 Config */
   1279            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1280            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   0000003E   0xF44F 0x7082      MOV      R0,#+260
   \   00000042   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1281            if(LCDType == LCD_ILI9320)
   \   00000046   0x....             LDR.N    R0,??DataTable27_8
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0xF249 0x3120      MOVW     R1,#+37664
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD109             BNE.N    ??LCD_SPIConfig_0
   1282            {
   1283              SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   1284              SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   1285              SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \   00000064   0xE00F             B.N      ??LCD_SPIConfig_1
   1286            }
   1287            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SPIConfig_0: (+1)
   \   00000066   0x....             LDR.N    R0,??DataTable27_8
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF248 0x3112      MOVW     R1,#+33554
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD109             BNE.N    ??LCD_SPIConfig_1
   1288            {
   1289              SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
   \   00000072   0xF44F 0x6000      MOV      R0,#+2048
   \   00000076   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   1290              SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   1291              SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1292            }
   1293            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \                     ??LCD_SPIConfig_1: (+1)
   \   00000086   0xF44F 0x7000      MOV      R0,#+512
   \   0000008A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1294            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   1295            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   1296            SPI_Init(SPI2, &SPI_InitStructure);
   \   0000009A   0xA901             ADD      R1,SP,#+4
   \   0000009C   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   0000009E   0x.... 0x....      BL       SPI_Init
   1297          
   1298            /* SPI2 enable */
   1299            SPI_Cmd(SPI2, ENABLE);
   \   000000A2   0x2101             MOVS     R1,#+1
   \   000000A4   0x....             LDR.N    R0,??DataTable27_6  ;; 0x40003800
   \   000000A6   0x.... 0x....      BL       SPI_Cmd
   1300          }
   \   000000AA   0xB007             ADD      SP,SP,#+28
   \   000000AC   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     LCDType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     TextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x........         DC32     BackColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   0x........         DC32     ASCII_Table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_6:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_7:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_8:
   \   00000000   0x........         DC32     LCDType

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "                    "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "   String too long  "
   \              0x20 0x53    
   \              0x74 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x6C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1301          
   1302          /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   Delay
      16   LCD_Clear
        16   -> LCD_CtrlLinesWrite
        16   -> LCD_SetCursor
        16   -> LCD_WriteRAM
        16   -> LCD_WriteRAM_Prepare
       8   LCD_ClearLine
         8   -> LCD_DisplayStringLine
       8   LCD_CtrlLinesConfig
         8   -> GPIO_Init
         8   -> LCD_CtrlLinesWrite
       8   LCD_CtrlLinesWrite
         8   -> GPIO_WriteBit
       8   LCD_DisplayChar
         8   -> LCD_DrawChar
       8   LCD_DisplayOff
         8   -> Delay
         8   -> LCD_WriteReg
       8   LCD_DisplayOn
         8   -> Delay
         8   -> LCD_WriteReg
      32   LCD_DisplayString
        32   -> LCD_ClearLine
        32   -> LCD_DisplayChar
        32   -> LCD_DisplayStringLine
        32   -> LCD_SetCursor
        32   -> StrLength
      24   LCD_DisplayStringLine
        24   -> LCD_DisplayChar
      24   LCD_DrawChar
        24   -> LCD_CtrlLinesWrite
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAM_Prepare
      24   LCD_DrawCircle
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAMWord
      24   LCD_DrawLine
        24   -> LCD_CtrlLinesWrite
        24   -> LCD_SetCursor
        24   -> LCD_WriteRAM
        24   -> LCD_WriteRAMWord
        24   -> LCD_WriteRAM_Prepare
      16   LCD_DrawMonoPict
        16   -> LCD_CtrlLinesWrite
        16   -> LCD_SetCursor
        16   -> LCD_WriteRAM
        16   -> LCD_WriteRAM_Prepare
      24   LCD_DrawRect
        24   -> LCD_DrawLine
       8   LCD_PowerOn
         8   -> Delay
         8   -> LCD_WriteReg
       8   LCD_ReadReg
         8   -> LCD_CtrlLinesWrite
         8   -> LCD_WriteRegIndex
         8   -> LCD_nCS_StartByte
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_ReceiveData
         8   -> SPI_I2S_SendData
      32   LCD_SPIConfig
        32   -> GPIO_Init
        32   -> RCC_APB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SPI_Cmd
        32   -> SPI_I2S_DeInit
        32   -> SPI_Init
       4   LCD_SetBackColor
       8   LCD_SetCursor
         8   -> LCD_WriteReg
      24   LCD_SetDisplayWindow
        24   -> LCD_SetCursor
        24   -> LCD_WriteReg
       4   LCD_SetTextColor
       8   LCD_Setup
         8   -> Delay
         8   -> LCD_CtrlLinesConfig
         8   -> LCD_SPIConfig
         8   -> LCD_WriteReg
       8   LCD_WindowModeDisable
         8   -> LCD_SetDisplayWindow
         8   -> LCD_WriteReg
       8   LCD_WriteRAM
         8   -> LCD_CtrlLinesWrite
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
       8   LCD_WriteRAMWord
         8   -> LCD_CtrlLinesWrite
         8   -> LCD_WriteRAM
         8   -> LCD_WriteRAM_Prepare
       8   LCD_WriteRAM_Prepare
         8   -> LCD_WriteRegIndex
         8   -> LCD_nCS_StartByte
       8   LCD_WriteReg
         8   -> LCD_WriteRegHX8312
         8   -> LCD_WriteRegILI9320
      16   LCD_WriteRegHX8312
        16   -> LCD_CtrlLinesWrite
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_SendData
       8   LCD_WriteRegILI9320
         8   -> LCD_CtrlLinesWrite
         8   -> LCD_WriteRegIndex
         8   -> LCD_nCS_StartByte
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
       8   LCD_WriteRegIndex
         8   -> LCD_CtrlLinesWrite
         8   -> LCD_nCS_StartByte
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
       8   LCD_nCS_StartByte
         8   -> LCD_CtrlLinesWrite
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_SendData
       8   STM3210B_LCD_Init
         8   -> LCD_ReadReg
         8   -> LCD_Setup
       0   StrLength


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable27_5
       4  ??DataTable27_6
       4  ??DataTable27_7
       4  ??DataTable27_8
      24  ?_0
      24  ?_1
    4560  ASCII_Table
       2  BackColor
      30  Delay
       4  LCDType
      82  LCD_Clear
      14  LCD_ClearLine
      68  LCD_CtrlLinesConfig
      12  LCD_CtrlLinesWrite
      26  LCD_DisplayChar
      60  LCD_DisplayOff
      86  LCD_DisplayOn
     210  LCD_DisplayString
      46  LCD_DisplayStringLine
     154  LCD_DrawChar
     544  LCD_DrawCircle
     182  LCD_DrawLine
     116  LCD_DrawMonoPict
      90  LCD_DrawRect
     262  LCD_PowerOn
     244  LCD_ReadReg
     174  LCD_SPIConfig
      16  LCD_SetBackColor
      90  LCD_SetCursor
     236  LCD_SetDisplayWindow
      16  LCD_SetTextColor
    1240  LCD_Setup
      76  LCD_WindowModeDisable
     136  LCD_WriteRAM
      30  LCD_WriteRAMWord
      16  LCD_WriteRAM_Prepare
      46  LCD_WriteReg
      88  LCD_WriteRegHX8312
      80  LCD_WriteRegILI9320
      76  LCD_WriteRegIndex
      46  LCD_nCS_StartByte
      48  STM3210B_LCD_Init
      20  StrLength
       2  TextColor

 
     2 bytes in section .bss
     6 bytes in section .data
 4 608 bytes in section .rodata
 4 700 bytes in section .text
 
 4 700 bytes of CODE  memory
 4 608 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: none

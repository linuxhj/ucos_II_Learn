###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        27/Feb/2018  22:18:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c
#    Command line =  
#        "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c"
#        -lCN "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\"
#        -o "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\CPU\ST\STM32\inc\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LCD\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LIB\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\"
#        -Ol --use_c++_inline
#    List file    =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\app.lst
#    Object file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\app.o
#
###############################################################################

F:\Study\uCOS\UCOS II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                            EXAMPLE CODE
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              with the
     21          *                                   STM3210B-EVAL Evaluation Board
     22          *
     23          * Filename      : app.c
     24          * Version       : V1.10
     25          * Programmer(s) : BAN
     26          *********************************************************************************************************
     27          */
     28          
     29          
     30          /*
     31          *********************************************************************************************************
     32          *                                             INCLUDE FILES
     33          *********************************************************************************************************
     34          */
     35          
     36          #include <includes.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          #define  APP_LINE_0                                        0
     46          #define  APP_LINE_1                                       24
     47          #define  APP_LINE_2                                       48
     48          #define  APP_LINE_3                                       72
     49          #define  APP_LINE_4                                       96
     50          #define  APP_LINE_5                                      120
     51          #define  APP_LINE_6                                      144
     52          #define  APP_LINE_7                                      168
     53          #define  APP_LINE_8                                      192
     54          #define  APP_LINE_9                                      216
     55          
     56          #define  APP_COLOR_WHITE                              0xFFFF
     57          #define  APP_COLOR_BLACK                              0x0000
     58          #define  APP_COLOR_BLUE                               0x001F
     59          #define  APP_COLOR_BLUE2                              0x051F
     60          #define  APP_COLOR_RED                                0xF800
     61          #define  APP_COLOR_MAGENTA                            0xF81F
     62          #define  APP_COLOR_GREEN                              0x07E0
     63          #define  APP_COLOR_CYAN                               0x7FFF
     64          #define  APP_COLOR_YELLOW                             0xFFE0
     65          
     66          /*
     67          *********************************************************************************************************
     68          *                                       LOCAL GLOBAL VARIABLES
     69          *********************************************************************************************************
     70          */
     71          

   \                                 In section .bss, align 4
     72          static  OS_STK         App_TaskStartStk[APP_TASK_START_STK_SIZE];
   \                     App_TaskStartStk:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
     73          static  OS_STK         App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE];
   \                     App_TaskUserIFStk:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
     74          static  OS_STK         App_TaskKbdStk[APP_TASK_KBD_STK_SIZE];
   \                     App_TaskKbdStk:
   \   00000000                      DS8 512
     75          

   \                                 In section .bss, align 4
     76          static  OS_EVENT      *App_UserIFMbox;
   \                     App_UserIFMbox:
   \   00000000                      DS8 4
     77          

   \                                 In section .bss, align 4
     78          static  CPU_CHAR       App_LCDLine0[21];
   \                     App_LCDLine0:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     79          static  CPU_CHAR       App_LCDLine1[21];
   \                     App_LCDLine1:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     80          static  CPU_CHAR       App_LCDLine2[21];
   \                     App_LCDLine2:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     81          static  CPU_CHAR       App_LCDLine3[21];
   \                     App_LCDLine3:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     82          static  CPU_CHAR       App_LCDLine4[21];
   \                     App_LCDLine4:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     83          static  CPU_CHAR       App_LCDLine5[21];
   \                     App_LCDLine5:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     84          static  CPU_CHAR       App_LCDLine6[21];
   \                     App_LCDLine6:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     85          static  CPU_CHAR       App_LCDLine7[21];
   \                     App_LCDLine7:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     86          static  CPU_CHAR       App_LCDLine8[21];
   \                     App_LCDLine8:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     87          static  CPU_CHAR       App_LCDLine9[21];
   \                     App_LCDLine9:
   \   00000000                      DS8 24
     88          
     89          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
     90               (APP_PROBE_COM_EN  == DEF_ENABLED) && \
     91               (PROBE_COM_STAT_EN == DEF_ENABLED))

   \                                 In section .bss, align 4
     92          static  CPU_FP32       App_ProbeComRxPktSpd;
   \                     App_ProbeComRxPktSpd:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     93          static  CPU_FP32       App_ProbeComTxPktSpd;
   \                     App_ProbeComTxPktSpd:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     94          static  CPU_FP32       App_ProbeComTxSymSpd;
   \                     App_ProbeComTxSymSpd:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95          static  CPU_FP32       App_ProbeComTxSymByteSpd;
   \                     App_ProbeComTxSymByteSpd:
   \   00000000                      DS8 4
     96          

   \                                 In section .bss, align 4
     97          static  CPU_INT32U     App_ProbeComRxPktLast;
   \                     App_ProbeComRxPktLast:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     98          static  CPU_INT32U     App_ProbeComTxPktLast;
   \                     App_ProbeComTxPktLast:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     99          static  CPU_INT32U     App_ProbeComTxSymLast;
   \                     App_ProbeComTxSymLast:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    100          static  CPU_INT32U     App_ProbeComTxSymByteLast;
   \                     App_ProbeComTxSymByteLast:
   \   00000000                      DS8 4
    101          

   \                                 In section .bss, align 4
    102          static  CPU_INT32U     App_ProbeComCtrLast;
   \                     App_ProbeComCtrLast:
   \   00000000                      DS8 4
    103          #endif
    104          
    105          #if (APP_OS_PROBE_EN == DEF_ENABLED)

   \                                 In section .bss, align 4
    106          static  CPU_INT32U     App_ProbeCounts;
   \                     App_ProbeCounts:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    107          static  CPU_BOOLEAN    App_ProbeB1;
   \                     App_ProbeB1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    108          static  CPU_BOOLEAN    App_ProbeJoystickLeft;
   \                     App_ProbeJoystickLeft:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    109          static  CPU_BOOLEAN    App_ProbeJoystickRight;
   \                     App_ProbeJoystickRight:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    110          static  CPU_BOOLEAN    App_ProbeJoystickUp;
   \                     App_ProbeJoystickUp:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    111          static  CPU_BOOLEAN    App_ProbeJoystickDown;
   \                     App_ProbeJoystickDown:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    112          static  CPU_BOOLEAN    App_ProbeJoystickCenter;
   \                     App_ProbeJoystickCenter:
   \   00000000                      DS8 1
    113          #endif
    114          
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                      LOCAL FUNCTION PROTOTYPES
    119          *********************************************************************************************************
    120          */
    121          
    122          static  void  App_TaskCreate       (void);
    123          static  void  App_EventCreate      (void);
    124          
    125          static  void  App_TaskStart        (void        *p_arg);
    126          static  void  App_TaskUserIF       (void        *p_arg);
    127          static  void  App_TaskKbd          (void        *p_arg);
    128          
    129          static  void  App_DispScr_SignOn   (void);
    130          static  void  App_DispScr_TaskNames(void);
    131          
    132          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    133               (APP_OS_PROBE_EN  == DEF_ENABLED))
    134          static  void  App_InitProbe        (void);
    135          #endif
    136          
    137          #if (APP_OS_PROBE_EN == DEF_ENABLED)
    138          static  void  App_ProbeCallback    (void);
    139          #endif
    140          
    141          
    142          static  void  App_FormatDec        (CPU_INT08U  *pstr,
    143                                              CPU_INT32U   value,
    144                                              CPU_INT08U   digits);
    145          
    146          
    147          /*
    148          *********************************************************************************************************
    149          *                                                main()
    150          *
    151          * Description : This is the standard entry point for C code.  It is assumed that your code will call
    152          *               main() once you have performed all necessary initialization.
    153          *
    154          * Argument(s) : none.
    155          *
    156          * Return(s)   : none.
    157          *********************************************************************************************************
    158          */
    159          

   \                                 In section .text, align 2, keep-with-next
    160          int  main (void)
    161          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    162              CPU_INT08U  os_err;
    163          
    164          
    165              BSP_IntDisAll();                                            /* Disable all ints until we are ready to accept them.  */
   \   00000004   0x.... 0x....      BL       BSP_IntDisAll
    166          
    167              OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel".         */
   \   00000008   0x.... 0x....      BL       OSInit
    168          
    169              os_err = OSTaskCreateExt((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
    170                                       (void          * ) 0,
    171                                       (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
    172                                       (INT8U           ) APP_TASK_START_PRIO,
    173                                       (INT16U          ) APP_TASK_START_PRIO,
    174                                       (OS_STK        * )&App_TaskStartStk[0],
    175                                       (INT32U          ) APP_TASK_START_STK_SIZE,
    176                                       (void          * )0,
    177                                       (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x9004             STR      R0,[SP, #+16]
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9003             STR      R0,[SP, #+12]
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0x9002             STR      R0,[SP, #+8]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x2303             MOVS     R3,#+3
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x.... 0x....      ADR.W    R0,App_TaskStart
   \   0000002E   0x.... 0x....      BL       OSTaskCreateExt
   \   00000032   0xF88D 0x0014      STRB     R0,[SP, #+20]
    178          
    179          #if (OS_TASK_NAME_SIZE >= 11)
    180              OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U *)"Start Task", &os_err);
   \   00000036   0xAA05             ADD      R2,SP,#+20
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x.... 0x....      BL       OSTaskNameSet
    181          #endif
    182          
    183              OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
   \   00000042   0x.... 0x....      BL       OSStart
    184          
    185              return (0);
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    186          }
    187          
    188          
    189          /*
    190          *********************************************************************************************************
    191          *                                          App_TaskStart()
    192          *
    193          * Description : The startup task.  The uC/OS-II ticker should only be initialize once multitasking starts.
    194          *
    195          * Argument(s) : p_arg       Argument passed to 'App_TaskStart()' by 'OSTaskCreate()'.
    196          *
    197          * Return(s)   : none.
    198          *
    199          * Caller(s)   : This is a task.
    200          *
    201          * Note(s)     : none.
    202          *********************************************************************************************************
    203          */
    204          

   \                                 In section .text, align 4, keep-with-next
    205          static  void  App_TaskStart (void *p_arg)
    206          {
   \                     App_TaskStart: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    207              CPU_INT32U  i;
    208              CPU_INT32U  j;
    209              CPU_INT32U  dly;
    210          
    211          
    212              (void)p_arg;
    213          
    214              BSP_Init();                                                 /* Initialize BSP functions.                            */
   \   00000002   0x.... 0x....      BL       BSP_Init
    215              OS_CPU_SysTickInit();                                       /* Initialize the SysTick.                              */
   \   00000006   0x.... 0x....      BL       OS_CPU_SysTickInit
    216          
    217          #if (OS_TASK_STAT_EN > 0)
    218              OSStatInit();                                               /* Determine CPU capacity.                              */
   \   0000000A   0x.... 0x....      BL       OSStatInit
    219          #endif
    220          
    221          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    222               (APP_OS_PROBE_EN  == DEF_ENABLED))
    223              App_InitProbe();
   \   0000000E   0x.... 0x....      BL       App_InitProbe
    224          #endif
    225          
    226              App_EventCreate();                                          /* Create application events.                           */
   \   00000012   0x.... 0x....      BL       App_EventCreate
    227              App_TaskCreate();                                           /* Create application tasks.                            */
   \   00000016   0x.... 0x....      BL       App_TaskCreate
    228          
    229              while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
    230                  for (j = 0; j < 4; j++) {
   \                     ??App_TaskStart_0: (+1)
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xE025             B.N      ??App_TaskStart_1
    231                      for (i = 1; i <= 4; i++) {
    232                          BSP_LED_On(i);
    233                          dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
    234                          OSTimeDlyHMSM(0, 0, 0, dly);
    235                          BSP_LED_Off(i);
    236                          dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
    237                          OSTimeDlyHMSM(0, 0, 0, dly);
    238                      }
    239          
    240                      for (i = 3; i >= 2; i--) {
    241                          BSP_LED_On(i);
   \                     ??App_TaskStart_2: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x.... 0x....      BL       BSP_LED_On
    242                          dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0x0900             LSRS     R0,R0,#+4
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x1C83             ADDS     R3,R0,#+2
    243                          OSTimeDlyHMSM(0, 0, 0, dly);
   \   00000034   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       OSTimeDlyHMSM
    244                          BSP_LED_Off(i);
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       BSP_LED_Off
    245                          dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0x0900             LSRS     R0,R0,#+4
   \   00000052   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000054   0x1C83             ADDS     R3,R0,#+2
    246                          OSTimeDlyHMSM(0, 0, 0, dly);
   \   00000056   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       OSTimeDlyHMSM
    247                      }
   \   00000062   0x1E64             SUBS     R4,R4,#+1
   \                     ??App_TaskStart_3: (+1)
   \   00000064   0x2C02             CMP      R4,#+2
   \   00000066   0xD2DA             BCS.N    ??App_TaskStart_2
   \   00000068   0x1C6D             ADDS     R5,R5,#+1
   \                     ??App_TaskStart_1: (+1)
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD228             BCS.N    ??App_TaskStart_4
   \   0000006E   0x2401             MOVS     R4,#+1
   \   00000070   0xE022             B.N      ??App_TaskStart_5
   \                     ??App_TaskStart_6: (+1)
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x.... 0x....      BL       BSP_LED_On
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0x0900             LSRS     R0,R0,#+4
   \   00000084   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000086   0x1C83             ADDS     R3,R0,#+2
   \   00000088   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x.... 0x....      BL       BSP_LED_Off
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   000000A2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A4   0x0900             LSRS     R0,R0,#+4
   \   000000A6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A8   0x1C83             ADDS     R3,R0,#+2
   \   000000AA   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x.... 0x....      BL       OSTimeDlyHMSM
   \   000000B6   0x1C64             ADDS     R4,R4,#+1
   \                     ??App_TaskStart_5: (+1)
   \   000000B8   0x2C05             CMP      R4,#+5
   \   000000BA   0xD3DA             BCC.N    ??App_TaskStart_6
   \   000000BC   0x2403             MOVS     R4,#+3
   \   000000BE   0xE7D1             B.N      ??App_TaskStart_3
    248                  }
    249          
    250                  for (i = 0; i < 4; i++) {
   \                     ??App_TaskStart_4: (+1)
   \   000000C0   0x2400             MOVS     R4,#+0
   \                     ??App_TaskStart_7: (+1)
   \   000000C2   0x2C04             CMP      R4,#+4
   \   000000C4   0xD2A9             BCS.N    ??App_TaskStart_0
    251                      BSP_LED_On(0);
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      BL       BSP_LED_On
    252                      dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   000000D2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D4   0x0900             LSRS     R0,R0,#+4
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0x1C83             ADDS     R3,R0,#+2
    253                      OSTimeDlyHMSM(0, 0, 0, dly * 3);
   \   000000DA   0x2003             MOVS     R0,#+3
   \   000000DC   0x4343             MULS     R3,R0,R3
   \   000000DE   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000E0   0x2200             MOVS     R2,#+0
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x.... 0x....      BL       OSTimeDlyHMSM
    254                      BSP_LED_Off(0);
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x.... 0x....      BL       BSP_LED_Off
    255                      dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       BSP_ADC_GetStatus
   \   000000F6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F8   0x0900             LSRS     R0,R0,#+4
   \   000000FA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000FC   0x1C83             ADDS     R3,R0,#+2
    256                      OSTimeDlyHMSM(0, 0, 0, dly * 3);
   \   000000FE   0x2003             MOVS     R0,#+3
   \   00000100   0x4343             MULS     R3,R0,R3
   \   00000102   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000104   0x2200             MOVS     R2,#+0
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      BL       OSTimeDlyHMSM
    257                  }
   \   0000010E   0x1C64             ADDS     R4,R4,#+1
   \   00000110   0xE7D7             B.N      ??App_TaskStart_7
    258              }
    259          }
    260          
    261          
    262          
    263          /*
    264          *********************************************************************************************************
    265          *                                             App_EventCreate()
    266          *
    267          * Description : Create the application events.
    268          *
    269          * Argument(s) : none.
    270          *
    271          * Return(s)   : none.
    272          *
    273          * Caller(s)   : App_TaskStart().
    274          *
    275          * Note(s)     : none.
    276          *********************************************************************************************************
    277          */
    278          

   \                                 In section .text, align 2, keep-with-next
    279          static  void  App_EventCreate (void)
    280          {
   \                     App_EventCreate: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    281          #if (OS_EVENT_NAME_SIZE > 12)
    282              CPU_INT08U  os_err;
    283          #endif
    284          
    285          
    286              App_UserIFMbox = OSMboxCreate((void *)0);                   /* Create MBOX for communication between Kbd and UserIF.*/
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       OSMboxCreate
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    287          #if (OS_EVENT_NAME_SIZE > 12)
    288              OSEventNameSet(App_UserIFMbox, "User IF Mbox", &os_err);
   \   0000000E   0xAA00             ADD      R2,SP,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       OSEventNameSet
    289          #endif
    290          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    291          
    292          
    293          /*
    294          *********************************************************************************************************
    295          *                                            App_TaskCreate()
    296          *
    297          * Description : Create the application tasks.
    298          *
    299          * Argument(s) : none.
    300          *
    301          * Return(s)   : none.
    302          *
    303          * Caller(s)   : App_TaskStart().
    304          *
    305          * Note(s)     : none.
    306          *********************************************************************************************************
    307          */
    308          

   \                                 In section .text, align 2, keep-with-next
    309          static  void  App_TaskCreate (void)
    310          {
   \                     App_TaskCreate: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    311              CPU_INT08U  os_err;
    312          
    313          
    314              os_err = OSTaskCreateExt((void (*)(void *)) App_TaskUserIF,
    315                                       (void          * ) 0,
    316                                       (OS_STK        * )&App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE - 1],
    317                                       (INT8U           ) APP_TASK_USER_IF_PRIO,
    318                                       (INT16U          ) APP_TASK_USER_IF_PRIO,
    319                                       (OS_STK        * )&App_TaskUserIFStk[0],
    320                                       (INT32U          ) APP_TASK_USER_IF_STK_SIZE,
    321                                       (void          * ) 0,
    322                                       (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
   \   00000004   0x2003             MOVS     R0,#+3
   \   00000006   0x9004             STR      R0,[SP, #+16]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0xF44F 0x7080      MOV      R0,#+256
   \   00000010   0x9002             STR      R0,[SP, #+8]
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0x200C             MOVS     R0,#+12
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x230C             MOVS     R3,#+12
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable7_6
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x.... 0x....      ADR.W    R0,App_TaskUserIF
   \   00000028   0x.... 0x....      BL       OSTaskCreateExt
   \   0000002C   0xF88D 0x0014      STRB     R0,[SP, #+20]
    323          
    324          #if (OS_TASK_NAME_SIZE >= 9)
    325              OSTaskNameSet(APP_TASK_USER_IF_PRIO, "User I/F", &os_err);
   \   00000030   0xAA05             ADD      R2,SP,#+20
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000036   0x200C             MOVS     R0,#+12
   \   00000038   0x.... 0x....      BL       OSTaskNameSet
    326          #endif
    327          
    328              os_err = OSTaskCreateExt((void (*)(void *)) App_TaskKbd,
    329                                       (void          * ) 0,
    330                                       (OS_STK        * )&App_TaskKbdStk[APP_TASK_KBD_STK_SIZE - 1],
    331                                       (INT8U           ) APP_TASK_KBD_PRIO,
    332                                       (INT16U          ) APP_TASK_KBD_PRIO,
    333                                       (OS_STK        * )&App_TaskKbdStk[0],
    334                                       (INT32U          ) APP_TASK_KBD_STK_SIZE,
    335                                       (void          * ) 0,
    336                                       (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x9004             STR      R0,[SP, #+16]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0x2080             MOVS     R0,#+128
   \   00000046   0x9002             STR      R0,[SP, #+8]
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x2304             MOVS     R3,#+4
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x.... 0x....      ADR.W    R0,App_TaskKbd
   \   0000005E   0x.... 0x....      BL       OSTaskCreateExt
   \   00000062   0xF88D 0x0014      STRB     R0,[SP, #+20]
    337          
    338          #if (OS_TASK_NAME_SIZE >= 9)
    339              OSTaskNameSet(APP_TASK_KBD_PRIO, "Keyboard", &os_err);
   \   00000066   0xAA05             ADD      R2,SP,#+20
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0x.... 0x....      BL       OSTaskNameSet
    340          #endif
    341          }
   \   00000072   0xB007             ADD      SP,SP,#+28
   \   00000074   0xBD00             POP      {PC}             ;; return
    342          
    343          
    344          /*
    345          *********************************************************************************************************
    346          *                                            App_TaskKbd()
    347          *
    348          * Description : Monitor the state of the push buttons and passes messages to AppTaskUserIF()
    349          *
    350          * Argument(s) : p_arg       Argument passed to 'App_TaskKbd()' by 'OSTaskCreate()'.
    351          *
    352          * Return(s)   : none.
    353          *
    354          * Caller(s)   : This is a task.
    355          *
    356          * Note(s)     : none.
    357          *********************************************************************************************************
    358          */
    359          

   \                                 In section .text, align 4, keep-with-next
    360          static  void  App_TaskKbd (void *p_arg)
    361          {
   \                     App_TaskKbd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    362              CPU_BOOLEAN  b1_prev;
    363              CPU_BOOLEAN  b1;
    364              CPU_INT08U   key;
    365          
    366          
    367              (void)p_arg;
    368          
    369              b1_prev = DEF_FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
    370              key     = 1;
   \   00000004   0x2601             MOVS     R6,#+1
   \   00000006   0xE00E             B.N      ??App_TaskKbd_0
    371          
    372              while (DEF_TRUE) {
    373                  b1 = BSP_PB_GetStatus(BSP_PB_ID_KEY);
    374          
    375                  if ((b1 == DEF_TRUE) && (b1_prev == DEF_FALSE)) {
    376                      if (key == 2) {
    377                          key = 1;
    378                      } else {
    379                          key++;
   \                     ??App_TaskKbd_1: (+1)
   \   00000008   0x1C76             ADDS     R6,R6,#+1
    380                      }
    381          
    382                      OSMboxPost(App_UserIFMbox, (void *)key);
   \                     ??App_TaskKbd_2: (+1)
   \   0000000A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000C   0x0031             MOVS     R1,R6
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       OSMboxPost
    383                  }
    384          
    385                  b1_prev = b1;
   \                     ??App_TaskKbd_3: (+1)
   \   00000018   0x002C             MOVS     R4,R5
    386          
    387                  OSTimeDlyHMSM(0, 0, 0, 20);
   \   0000001A   0x2314             MOVS     R3,#+20
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       OSTimeDlyHMSM
   \                     ??App_TaskKbd_0: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       BSP_PB_GetStatus
   \   0000002C   0x0005             MOVS     R5,R0
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D01             CMP      R5,#+1
   \   00000032   0xD1F1             BNE.N    ??App_TaskKbd_3
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C00             CMP      R4,#+0
   \   00000038   0xD1EE             BNE.N    ??App_TaskKbd_3
   \   0000003A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   0x2E02             CMP      R6,#+2
   \   0000003E   0xD1E3             BNE.N    ??App_TaskKbd_1
   \   00000040   0x2601             MOVS     R6,#+1
   \   00000042   0xE7E2             B.N      ??App_TaskKbd_2
    388              }
    389          }
    390          
    391          
    392          /*
    393          *********************************************************************************************************
    394          *                                            App_TaskUserIF()
    395          *
    396          * Description : Updates LCD.
    397          *
    398          * Argument(s) : p_arg       Argument passed to 'App_TaskUserIF()' by 'OSTaskCreate()'.
    399          *
    400          * Return(s)   : none.
    401          *
    402          * Caller(s)   : This is a task.
    403          *
    404          * Note(s)     : none.
    405          *********************************************************************************************************
    406          */
    407          

   \                                 In section .text, align 4, keep-with-next
    408          static  void  App_TaskUserIF (void *p_arg)
    409          {
   \                     App_TaskUserIF: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    410              CPU_INT08U  *msg;
    411              CPU_INT08U   err;
    412              CPU_INT32U   nstate;
    413              CPU_INT32U   pstate;
    414          
    415          
    416              (void)p_arg;
    417          
    418          
    419              App_DispScr_SignOn();
   \   00000002   0x.... 0x....      BL       App_DispScr_SignOn
    420              OSTimeDlyHMSM(0, 0, 1, 0);
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       OSTimeDlyHMSM
    421              nstate = 1;
   \   00000012   0x2401             MOVS     R4,#+1
    422              pstate = 1;
   \   00000014   0x2501             MOVS     R5,#+1
   \   00000016   0xE001             B.N      ??App_TaskUserIF_0
    423          
    424          
    425              while (DEF_TRUE) {
    426                  msg = (CPU_INT08U *)(OSMboxPend(App_UserIFMbox, OS_TICKS_PER_SEC / 10, &err));
    427                  if (err == OS_NO_ERR) {
    428                      nstate = (CPU_INT32U)msg;
    429                  }
    430          
    431                  if (nstate != pstate) {
    432                      LCD_Clear(APP_COLOR_WHITE);
    433                      pstate  = nstate;
    434                  }
    435          
    436                  switch (nstate) {
    437                      case 2:
    438                          App_DispScr_TaskNames();
   \                     ??App_TaskUserIF_1: (+1)
   \   00000018   0x.... 0x....      BL       App_DispScr_TaskNames
    439                          break;
   \                     ??App_TaskUserIF_0: (+1)
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2164             MOVS     R1,#+100
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       OSMboxPend
   \   0000002A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD100             BNE.N    ??App_TaskUserIF_2
   \   00000032   0x0004             MOVS     R4,R0
   \                     ??App_TaskUserIF_2: (+1)
   \   00000034   0x42AC             CMP      R4,R5
   \   00000036   0xD004             BEQ.N    ??App_TaskUserIF_3
   \   00000038   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000003C   0x.... 0x....      BL       LCD_Clear
   \   00000040   0x0025             MOVS     R5,R4
   \                     ??App_TaskUserIF_3: (+1)
   \   00000042   0x2C02             CMP      R4,#+2
   \   00000044   0xD0E8             BEQ.N    ??App_TaskUserIF_1
    440          
    441                      case 1:
    442                      default:
    443                          App_DispScr_SignOn();
   \   00000046   0x.... 0x....      BL       App_DispScr_SignOn
    444                          break;
   \   0000004A   0xE7E7             B.N      ??App_TaskUserIF_0
    445                  }
    446              }
    447          }
    448          
    449          
    450          /*
    451          *********************************************************************************************************
    452          *                                          App_DispScr_SignOn()
    453          *
    454          * Description : Display uC/OS-II system information on the LCD.
    455          *
    456          * Argument(s) : none.
    457          *
    458          * Return(s)   : none.
    459          *
    460          * Caller(s)   : App_TaskUserIF().
    461          *
    462          * Note(s)     : none.
    463          *********************************************************************************************************
    464          */
    465          

   \                                 In section .text, align 2, keep-with-next
    466          static  void  App_DispScr_SignOn (void)
    467          {
   \                     App_DispScr_SignOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    468              CPU_INT32U  value;
    469          
    470          
    471              Str_Copy(App_LCDLine0, "  Micrium uC/OS-II  ");
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable7_12
   \   0000000A   0x.... 0x....      BL       Str_Copy
    472              Str_Copy(App_LCDLine1, "ST STM32 (Cortex-M3)");
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable7_14
   \   00000016   0x.... 0x....      BL       Str_Copy
    473          
    474              Str_Copy(App_LCDLine2, "                    ");
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_15
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable7_16
   \   00000022   0x.... 0x....      BL       Str_Copy
    475          
    476              Str_Copy(App_LCDLine3, "  uC/OS-II:  Vx.yy  ");
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable7_18
   \   0000002E   0x.... 0x....      BL       Str_Copy
    477              value            = (CPU_INT32U)OSVersion();
   \   00000032   0x.... 0x....      BL       OSVersion
   \   00000036   0x0001             MOVS     R1,R0
    478              App_LCDLine3[14] =  value / 100 + '0';
   \   00000038   0x2064             MOVS     R0,#+100
   \   0000003A   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   0000003E   0x3030             ADDS     R0,R0,#+48
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable7_18
   \   00000044   0x7390             STRB     R0,[R2, #+14]
    479              App_LCDLine3[16] = (value % 100) / 10 + '0';
   \   00000046   0x2064             MOVS     R0,#+100
   \   00000048   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   0000004C   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000050   0x220A             MOVS     R2,#+10
   \   00000052   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000056   0x3030             ADDS     R0,R0,#+48
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable7_18
   \   0000005C   0x7410             STRB     R0,[R2, #+16]
    480              App_LCDLine3[17] = (value %  10) + '0';
   \   0000005E   0x200A             MOVS     R0,#+10
   \   00000060   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000064   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   00000068   0x3030             ADDS     R0,R0,#+48
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable7_18
   \   0000006E   0x7448             STRB     R0,[R1, #+17]
    481          
    482              Str_Copy(App_LCDLine4, "  TickRate:   xxxx  ");
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   00000078   0x.... 0x....      BL       Str_Copy
    483              value = (CPU_INT32U)OS_TICKS_PER_SEC;
   \   0000007C   0xF44F 0x717A      MOV      R1,#+1000
    484              App_FormatDec(&App_LCDLine4[14], value, 4);
   \   00000080   0x2204             MOVS     R2,#+4
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   00000086   0x.... 0x....      BL       App_FormatDec
    485          
    486              Str_Copy(App_LCDLine5, "  CPU Usage:xx %    ");
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable7_22
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable7_23
   \   00000092   0x.... 0x....      BL       Str_Copy
    487              value            = (CPU_INT32U)OSCPUUsage;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable7_24
   \   0000009A   0x7801             LDRB     R1,[R0, #+0]
    488              App_LCDLine5[12] = (value / 10) + '0';
   \   0000009C   0x200A             MOVS     R0,#+10
   \   0000009E   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000A2   0x3030             ADDS     R0,R0,#+48
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable7_23
   \   000000A8   0x7310             STRB     R0,[R2, #+12]
    489              App_LCDLine5[13] = (value % 10) + '0';
   \   000000AA   0x200A             MOVS     R0,#+10
   \   000000AC   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   000000B0   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000B4   0x3030             ADDS     R0,R0,#+48
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable7_23
   \   000000BA   0x7348             STRB     R0,[R1, #+13]
    490          
    491              Str_Copy(App_LCDLine6, "  CPU Speed:xx MHz  ");
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable7_25
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable7_26
   \   000000C4   0x.... 0x....      BL       Str_Copy
    492              value            = (CPU_INT32U)BSP_CPU_ClkFreq() / 1000000L;
   \   000000C8   0x.... 0x....      BL       BSP_CPU_ClkFreq
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable7_27  ;; 0xf4240
   \   000000D0   0xFBB0 0xF1F1      UDIV     R1,R0,R1
    493              App_LCDLine6[12] = (value / 10) + '0';
   \   000000D4   0x200A             MOVS     R0,#+10
   \   000000D6   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   000000DA   0x3030             ADDS     R0,R0,#+48
   \   000000DC   0x.... 0x....      LDR.W    R2,??DataTable7_26
   \   000000E0   0x7310             STRB     R0,[R2, #+12]
    494              App_LCDLine6[13] = (value % 10) + '0';
   \   000000E2   0x200A             MOVS     R0,#+10
   \   000000E4   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   000000E8   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000EC   0x3030             ADDS     R0,R0,#+48
   \   000000EE   0x.... 0x....      LDR.W    R1,??DataTable7_26
   \   000000F2   0x7348             STRB     R0,[R1, #+13]
    495          
    496              Str_Copy(App_LCDLine7, "  #Ticks: xxxxxxxx  ");
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable7_28
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable7_29
   \   000000FC   0x.... 0x....      BL       Str_Copy
    497              value = (CPU_INT32U)OSTime;
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable7_30
   \   00000104   0x6801             LDR      R1,[R0, #+0]
    498              App_FormatDec(&App_LCDLine7[10], value, 8);
   \   00000106   0x2208             MOVS     R2,#+8
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable7_31
   \   0000010C   0x.... 0x....      BL       App_FormatDec
    499          
    500              Str_Copy(App_LCDLine8, "  #CtxSw: xxxxxxxx  ");
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable7_32
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable7_33
   \   00000118   0x.... 0x....      BL       Str_Copy
    501              value = (CPU_INT32U)OSCtxSwCtr;
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable7_34
   \   00000120   0x6801             LDR      R1,[R0, #+0]
    502              App_FormatDec(&App_LCDLine8[10], value, 8);
   \   00000122   0x2208             MOVS     R2,#+8
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable7_35
   \   00000128   0x.... 0x....      BL       App_FormatDec
    503          
    504              Str_Copy(App_LCDLine9, "                    ");
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable7_15
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable7_36
   \   00000134   0x.... 0x....      BL       Str_Copy
    505          
    506              LCD_SetTextColor(APP_COLOR_BLUE);
   \   00000138   0x201F             MOVS     R0,#+31
   \   0000013A   0x.... 0x....      BL       LCD_SetTextColor
    507              LCD_DisplayString(APP_LINE_0, App_LCDLine0);
   \   0000013E   0x....             LDR.N    R1,??DataTable7_12
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x.... 0x....      BL       LCD_DisplayString
    508              LCD_DisplayString(APP_LINE_1, App_LCDLine1);
   \   00000146   0x....             LDR.N    R1,??DataTable7_14
   \   00000148   0x2018             MOVS     R0,#+24
   \   0000014A   0x.... 0x....      BL       LCD_DisplayString
    509              LCD_SetTextColor(APP_COLOR_BLACK);
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x.... 0x....      BL       LCD_SetTextColor
    510              LCD_DisplayString(APP_LINE_2, App_LCDLine2);
   \   00000154   0x....             LDR.N    R1,??DataTable7_16
   \   00000156   0x2030             MOVS     R0,#+48
   \   00000158   0x.... 0x....      BL       LCD_DisplayString
    511              LCD_DisplayString(APP_LINE_3, App_LCDLine3);
   \   0000015C   0x....             LDR.N    R1,??DataTable7_18
   \   0000015E   0x2048             MOVS     R0,#+72
   \   00000160   0x.... 0x....      BL       LCD_DisplayString
    512              LCD_DisplayString(APP_LINE_4, App_LCDLine4);
   \   00000164   0x....             LDR.N    R1,??DataTable7_20
   \   00000166   0x2060             MOVS     R0,#+96
   \   00000168   0x.... 0x....      BL       LCD_DisplayString
    513              LCD_DisplayString(APP_LINE_5, App_LCDLine5);
   \   0000016C   0x....             LDR.N    R1,??DataTable7_23
   \   0000016E   0x2078             MOVS     R0,#+120
   \   00000170   0x.... 0x....      BL       LCD_DisplayString
    514              LCD_DisplayString(APP_LINE_6, App_LCDLine6);
   \   00000174   0x....             LDR.N    R1,??DataTable7_26
   \   00000176   0x2090             MOVS     R0,#+144
   \   00000178   0x.... 0x....      BL       LCD_DisplayString
    515              LCD_DisplayString(APP_LINE_7, App_LCDLine7);
   \   0000017C   0x....             LDR.N    R1,??DataTable7_29
   \   0000017E   0x20A8             MOVS     R0,#+168
   \   00000180   0x.... 0x....      BL       LCD_DisplayString
    516              LCD_DisplayString(APP_LINE_8, App_LCDLine8);
   \   00000184   0x....             LDR.N    R1,??DataTable7_33
   \   00000186   0x20C0             MOVS     R0,#+192
   \   00000188   0x.... 0x....      BL       LCD_DisplayString
    517          }
   \   0000018C   0xBD01             POP      {R0,PC}          ;; return
    518          
    519          
    520          
    521          /*
    522          *********************************************************************************************************
    523          *                                          App_DispScr_SignOn()
    524          *
    525          * Description : Display uC/OS-II system information on the LCD.
    526          *
    527          * Argument(s) : none.
    528          *
    529          * Return(s)   : none.
    530          *
    531          * Caller(s)   : App_TaskUserIF().
    532          *
    533          * Note(s)     : none.
    534          *********************************************************************************************************
    535          */
    536          

   \                                 In section .text, align 2, keep-with-next
    537          static  void  App_DispScr_TaskNames (void)
    538          {
   \                     App_DispScr_TaskNames: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    539              CPU_INT08U   ix;
    540              OS_TCB      *ptcb;
    541              CPU_CHAR    *line;
    542              CPU_INT08U   value;
    543          
    544          
    545              ptcb = &OSTCBTbl[0];
   \   00000002   0x....             LDR.N    R4,??DataTable7_37
    546              ix   = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    547          
    548              Str_Copy(App_LCDLine0, "  Micrium uC/OS-II  ");
   \   00000006   0x....             LDR.N    R1,??DataTable7_11
   \   00000008   0x....             LDR.N    R0,??DataTable7_12
   \   0000000A   0x.... 0x....      BL       Str_Copy
    549              Str_Copy(App_LCDLine1, "ST STM32 (Cortex-M3)");
   \   0000000E   0x....             LDR.N    R1,??DataTable7_13
   \   00000010   0x....             LDR.N    R0,??DataTable7_14
   \   00000012   0x.... 0x....      BL       Str_Copy
    550          
    551              Str_Copy(App_LCDLine2, "  Prio   Taskname   ");
   \   00000016   0x....             LDR.N    R1,??DataTable7_38
   \   00000018   0x....             LDR.N    R0,??DataTable7_16
   \   0000001A   0x.... 0x....      BL       Str_Copy
   \   0000001E   0xE01D             B.N      ??App_DispScr_TaskNames_0
    552          
    553              while (ptcb != NULL) {
    554                  value = ptcb->OSTCBPrio;
    555          
    556                  switch (ix) {
    557                      case 0:
    558                           line = App_LCDLine3;
    559                           break;
    560          
    561                      case 1:
    562                           line = App_LCDLine4;
    563                           break;
    564          
    565                      case 2:
    566                           line = App_LCDLine5;
    567                           break;
    568          
    569                      case 3:
    570                           line = App_LCDLine6;
    571                           break;
    572          
    573                      case 4:
    574                           line = App_LCDLine7;
    575                           break;
    576          
    577                      case 5:
    578                           line = App_LCDLine8;
    579                           break;
    580          
    581                      case 6:
    582                           line = App_LCDLine9;
    583                           break;
    584          
    585                      default:
    586                           line = (CPU_CHAR *)0;
    587                           break;
    588                  }
    589          
    590                  if (line == (CPU_CHAR *)0) {
    591                      break;
    592                  }
    593          
    594                  line[0] = ' ';
   \                     ??App_DispScr_TaskNames_1: (+1)
   \   00000020   0x2220             MOVS     R2,#+32
   \   00000022   0x7002             STRB     R2,[R0, #+0]
    595                  line[1] = ' ';
   \   00000024   0x2220             MOVS     R2,#+32
   \   00000026   0x7042             STRB     R2,[R0, #+1]
    596                  line[2] = ' ';
   \   00000028   0x2220             MOVS     R2,#+32
   \   0000002A   0x7082             STRB     R2,[R0, #+2]
    597                  line[3] = value / 10 + '0';
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x220A             MOVS     R2,#+10
   \   00000030   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000034   0x3230             ADDS     R2,R2,#+48
   \   00000036   0x70C2             STRB     R2,[R0, #+3]
    598                  line[4] = value % 10 + '0';
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x220A             MOVS     R2,#+10
   \   0000003C   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \   00000040   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   00000044   0x3130             ADDS     R1,R1,#+48
   \   00000046   0x7101             STRB     R1,[R0, #+4]
    599                  line[5] = ' ';
   \   00000048   0x2120             MOVS     R1,#+32
   \   0000004A   0x7141             STRB     R1,[R0, #+5]
    600                  Str_Copy_N(line + 6, ptcb->OSTCBTaskName, 14);
   \   0000004C   0x220E             MOVS     R2,#+14
   \   0000004E   0xF114 0x014C      ADDS     R1,R4,#+76
   \   00000052   0x1D80             ADDS     R0,R0,#+6
   \   00000054   0x.... 0x....      BL       Str_Copy_N
    601          
    602                  ptcb    = ptcb->OSTCBPrev;
   \   00000058   0x69A4             LDR      R4,[R4, #+24]
    603                  ix++;
   \   0000005A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??App_DispScr_TaskNames_0: (+1)
   \   0000005C   0x2C00             CMP      R4,#+0
   \   0000005E   0xD01F             BEQ.N    ??App_DispScr_TaskNames_2
   \   00000060   0xF894 0x1032      LDRB     R1,[R4, #+50]
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD009             BEQ.N    ??App_DispScr_TaskNames_3
   \   0000006A   0x2D02             CMP      R5,#+2
   \   0000006C   0xD00B             BEQ.N    ??App_DispScr_TaskNames_4
   \   0000006E   0xD308             BCC.N    ??App_DispScr_TaskNames_5
   \   00000070   0x2D04             CMP      R5,#+4
   \   00000072   0xD00C             BEQ.N    ??App_DispScr_TaskNames_6
   \   00000074   0xD309             BCC.N    ??App_DispScr_TaskNames_7
   \   00000076   0x2D06             CMP      R5,#+6
   \   00000078   0xD00D             BEQ.N    ??App_DispScr_TaskNames_8
   \   0000007A   0xD30A             BCC.N    ??App_DispScr_TaskNames_9
   \   0000007C   0xE00D             B.N      ??App_DispScr_TaskNames_10
   \                     ??App_DispScr_TaskNames_3: (+1)
   \   0000007E   0x....             LDR.N    R0,??DataTable7_18
   \   00000080   0xE00C             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_5: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable7_20
   \   00000084   0xE00A             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_4: (+1)
   \   00000086   0x....             LDR.N    R0,??DataTable7_23
   \   00000088   0xE008             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_7: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable7_26
   \   0000008C   0xE006             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_6: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable7_29
   \   00000090   0xE004             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_9: (+1)
   \   00000092   0x....             LDR.N    R0,??DataTable7_33
   \   00000094   0xE002             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_8: (+1)
   \   00000096   0x....             LDR.N    R0,??DataTable7_36
   \   00000098   0xE000             B.N      ??App_DispScr_TaskNames_11
   \                     ??App_DispScr_TaskNames_10: (+1)
   \   0000009A   0x2000             MOVS     R0,#+0
   \                     ??App_DispScr_TaskNames_11: (+1)
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD1BF             BNE.N    ??App_DispScr_TaskNames_1
    604              }
    605          
    606              if (ix < 6) {
   \                     ??App_DispScr_TaskNames_2: (+1)
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x2D06             CMP      R5,#+6
   \   000000A4   0xDA03             BGE.N    ??App_DispScr_TaskNames_12
    607                  Str_Copy(App_LCDLine9, "                    ");
   \   000000A6   0x....             LDR.N    R1,??DataTable7_15
   \   000000A8   0x....             LDR.N    R0,??DataTable7_36
   \   000000AA   0x.... 0x....      BL       Str_Copy
    608              }
    609          
    610              if (ix < 5) {
   \                     ??App_DispScr_TaskNames_12: (+1)
   \   000000AE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B0   0x2D05             CMP      R5,#+5
   \   000000B2   0xDA03             BGE.N    ??App_DispScr_TaskNames_13
    611                  Str_Copy(App_LCDLine8, "                    ");
   \   000000B4   0x....             LDR.N    R1,??DataTable7_15
   \   000000B6   0x....             LDR.N    R0,??DataTable7_33
   \   000000B8   0x.... 0x....      BL       Str_Copy
    612              }
    613          
    614              if (ix < 4) {
   \                     ??App_DispScr_TaskNames_13: (+1)
   \   000000BC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BE   0x2D04             CMP      R5,#+4
   \   000000C0   0xDA03             BGE.N    ??App_DispScr_TaskNames_14
    615                  Str_Copy(App_LCDLine7, "                    ");
   \   000000C2   0x....             LDR.N    R1,??DataTable7_15
   \   000000C4   0x....             LDR.N    R0,??DataTable7_29
   \   000000C6   0x.... 0x....      BL       Str_Copy
    616              }
    617          
    618              if (ix < 3) {
   \                     ??App_DispScr_TaskNames_14: (+1)
   \   000000CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CC   0x2D03             CMP      R5,#+3
   \   000000CE   0xDA03             BGE.N    ??App_DispScr_TaskNames_15
    619                  Str_Copy(App_LCDLine6, "                    ");
   \   000000D0   0x....             LDR.N    R1,??DataTable7_15
   \   000000D2   0x....             LDR.N    R0,??DataTable7_26
   \   000000D4   0x.... 0x....      BL       Str_Copy
    620              }
    621          
    622              LCD_SetTextColor(APP_COLOR_BLUE);
   \                     ??App_DispScr_TaskNames_15: (+1)
   \   000000D8   0x201F             MOVS     R0,#+31
   \   000000DA   0x.... 0x....      BL       LCD_SetTextColor
    623              LCD_DisplayString(APP_LINE_0, App_LCDLine0);
   \   000000DE   0x....             LDR.N    R1,??DataTable7_12
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       LCD_DisplayString
    624              LCD_DisplayString(APP_LINE_1, App_LCDLine1);
   \   000000E6   0x....             LDR.N    R1,??DataTable7_14
   \   000000E8   0x2018             MOVS     R0,#+24
   \   000000EA   0x.... 0x....      BL       LCD_DisplayString
    625              LCD_SetTextColor(APP_COLOR_RED);
   \   000000EE   0xF44F 0x4078      MOV      R0,#+63488
   \   000000F2   0x.... 0x....      BL       LCD_SetTextColor
    626              LCD_DisplayString(APP_LINE_2, App_LCDLine2);
   \   000000F6   0x....             LDR.N    R1,??DataTable7_16
   \   000000F8   0x2030             MOVS     R0,#+48
   \   000000FA   0x.... 0x....      BL       LCD_DisplayString
    627              LCD_SetTextColor(APP_COLOR_BLACK);
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x.... 0x....      BL       LCD_SetTextColor
    628              LCD_DisplayString(APP_LINE_3, App_LCDLine3);
   \   00000104   0x....             LDR.N    R1,??DataTable7_18
   \   00000106   0x2048             MOVS     R0,#+72
   \   00000108   0x.... 0x....      BL       LCD_DisplayString
    629              LCD_DisplayString(APP_LINE_4, App_LCDLine4);
   \   0000010C   0x....             LDR.N    R1,??DataTable7_20
   \   0000010E   0x2060             MOVS     R0,#+96
   \   00000110   0x.... 0x....      BL       LCD_DisplayString
    630              LCD_DisplayString(APP_LINE_5, App_LCDLine5);
   \   00000114   0x....             LDR.N    R1,??DataTable7_23
   \   00000116   0x2078             MOVS     R0,#+120
   \   00000118   0x.... 0x....      BL       LCD_DisplayString
    631              LCD_DisplayString(APP_LINE_6, App_LCDLine6);
   \   0000011C   0x....             LDR.N    R1,??DataTable7_26
   \   0000011E   0x2090             MOVS     R0,#+144
   \   00000120   0x.... 0x....      BL       LCD_DisplayString
    632              LCD_DisplayString(APP_LINE_7, App_LCDLine7);
   \   00000124   0x....             LDR.N    R1,??DataTable7_29
   \   00000126   0x20A8             MOVS     R0,#+168
   \   00000128   0x.... 0x....      BL       LCD_DisplayString
    633              LCD_DisplayString(APP_LINE_8, App_LCDLine8);
   \   0000012C   0x....             LDR.N    R1,??DataTable7_33
   \   0000012E   0x20C0             MOVS     R0,#+192
   \   00000130   0x.... 0x....      BL       LCD_DisplayString
    634              LCD_DisplayString(APP_LINE_9, App_LCDLine9);
   \   00000134   0x....             LDR.N    R1,??DataTable7_36
   \   00000136   0x20D8             MOVS     R0,#+216
   \   00000138   0x.... 0x....      BL       LCD_DisplayString
    635          }
   \   0000013C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    636          
    637          
    638          /*
    639          *********************************************************************************************************
    640          *                                             App_InitProbe()
    641          *
    642          * Description : Initialize uC/Probe target code.
    643          *
    644          * Argument(s) : none.
    645          *
    646          * Return(s)   : none.
    647          *
    648          * Caller(s)   : App_TaskStart().
    649          *
    650          * Note(s)     : none.
    651          *********************************************************************************************************
    652          */
    653          
    654          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    655               (APP_OS_PROBE_EN  == DEF_ENABLED))

   \                                 In section .text, align 2, keep-with-next
    656          static  void  App_InitProbe (void)
    657          {
   \                     App_InitProbe: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    658          #if (APP_OS_PROBE_EN        == DEF_ENABLED)
    659              (void)App_ProbeCounts;
    660              (void)App_ProbeB1;
    661              (void)App_ProbeJoystickCenter;
    662              (void)App_ProbeJoystickDown;
    663              (void)App_ProbeJoystickLeft;
    664              (void)App_ProbeJoystickRight;
    665              (void)App_ProbeJoystickUp;
    666          
    667          #if ((APP_PROBE_COM_EN      == DEF_ENABLED) && \
    668               (PROBE_COM_STAT_EN     == DEF_ENABLED))
    669              (void)App_ProbeComRxPktSpd;
    670              (void)App_ProbeComTxPktSpd;
    671              (void)App_ProbeComTxSymSpd;
    672              (void)App_ProbeComTxSymByteSpd;
    673          #endif
    674          
    675              OSProbe_Init();
   \   00000002   0x.... 0x....      BL       OSProbe_Init
    676              OSProbe_SetCallback(App_ProbeCallback);
   \   00000006   0x.... 0x....      ADR.W    R0,App_ProbeCallback
   \   0000000A   0x.... 0x....      BL       OSProbe_SetCallback
    677              OSProbe_SetDelay(250);
   \   0000000E   0x20FA             MOVS     R0,#+250
   \   00000010   0x.... 0x....      BL       OSProbe_SetDelay
    678          #endif
    679          
    680          #if (APP_PROBE_COM_EN       == DEF_ENABLED)
    681              ProbeCom_Init();                                            /* Initialize the uC/Probe communications module.       */
   \   00000014   0x.... 0x....      BL       ProbeCom_Init
    682          #if (PROBE_COM_METHOD_RS232 == DEF_ENABLED)
    683              ProbeRS232_Init(115200);
   \   00000018   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000001C   0x.... 0x....      BL       ProbeRS232_Init
    684              ProbeRS232_RxIntEn();
   \   00000020   0x.... 0x....      BL       ProbeRS232_RxIntEn
    685          #endif
    686          #endif
    687          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    688          #endif
    689          
    690          
    691          /*
    692          *********************************************************************************************************
    693          *                                         AppProbeCallback()
    694          *
    695          * Description : uC/Probe OS plugin callback.
    696          *
    697          * Argument(s) : none.
    698          *
    699          * Return(s)   : none.
    700          *
    701          * Caller(s)   : uC/Probe OS plugin task.
    702          *
    703          * Note(s)     : none.
    704          *********************************************************************************************************
    705          */
    706          
    707          #if (APP_OS_PROBE_EN == DEF_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    708          static  void  App_ProbeCallback (void)
    709          {
   \                     App_ProbeCallback: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    710          
    711          #if ((APP_PROBE_COM_EN  == DEF_ENABLED) && \
    712               (PROBE_COM_STAT_EN == DEF_ENABLED))
    713              CPU_INT32U  ctr_curr;
    714              CPU_INT32U  rxpkt_curr;
    715              CPU_INT32U  txpkt_curr;
    716              CPU_INT32U  sym_curr;
    717              CPU_INT32U  symbyte_curr;
    718          #endif
    719              CPU_INT32U  joystick;
    720          
    721          
    722              App_ProbeCounts++;
   \   00000004   0x....             LDR.N    R0,??DataTable7_39
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x....             LDR.N    R1,??DataTable7_39
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    723          
    724              App_ProbeB1             = BSP_PB_GetStatus(1);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       BSP_PB_GetStatus
   \   00000014   0x....             LDR.N    R1,??DataTable7_40
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    725          
    726              joystick                = BSP_Joystick_GetStatus();
   \   00000018   0x.... 0x....      BL       BSP_Joystick_GetStatus
    727              App_ProbeJoystickCenter = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_CENTER);
   \   0000001C   0xF3C0 0x1100      UBFX     R1,R0,#+4,#+1
   \   00000020   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   00000024   0x....             LDR.N    R2,??DataTable7_41
   \   00000026   0x7011             STRB     R1,[R2, #+0]
    728              App_ProbeJoystickDown   = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_DOWN);
   \   00000028   0xF3C0 0x0140      UBFX     R1,R0,#+1,#+1
   \   0000002C   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   00000030   0x....             LDR.N    R2,??DataTable7_42
   \   00000032   0x7011             STRB     R1,[R2, #+0]
    729              App_ProbeJoystickLeft   = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_LEFT);
   \   00000034   0xF3C0 0x0180      UBFX     R1,R0,#+2,#+1
   \   00000038   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   0000003C   0x....             LDR.N    R2,??DataTable7_43
   \   0000003E   0x7011             STRB     R1,[R2, #+0]
    730              App_ProbeJoystickRight  = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_RIGHT);
   \   00000040   0xF3C0 0x01C0      UBFX     R1,R0,#+3,#+1
   \   00000044   0xF011 0x0101      ANDS     R1,R1,#0x1
   \   00000048   0x....             LDR.N    R2,??DataTable7_44
   \   0000004A   0x7011             STRB     R1,[R2, #+0]
    731              App_ProbeJoystickUp     = DEF_BIT_IS_SET(joystick, BSP_JOYSTICK_UP);
   \   0000004C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000050   0x....             LDR.N    R1,??DataTable7_45
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    732          
    733          
    734          #if ((APP_PROBE_COM_EN  == DEF_ENABLED) && \
    735               (PROBE_COM_STAT_EN == DEF_ENABLED))
    736              ctr_curr     = OSTime;
   \   00000054   0x....             LDR.N    R0,??DataTable7_30
   \   00000056   0x6804             LDR      R4,[R0, #+0]
    737              rxpkt_curr   = ProbeCom_RxPktCtr;
   \   00000058   0x....             LDR.N    R0,??DataTable7_46
   \   0000005A   0x6805             LDR      R5,[R0, #+0]
    738              txpkt_curr   = ProbeCom_TxPktCtr;
   \   0000005C   0x....             LDR.N    R0,??DataTable7_47
   \   0000005E   0x6806             LDR      R6,[R0, #+0]
    739              sym_curr     = ProbeCom_TxSymCtr;
   \   00000060   0x....             LDR.N    R0,??DataTable7_48
   \   00000062   0x6807             LDR      R7,[R0, #+0]
    740              symbyte_curr = ProbeCom_TxSymByteCtr;
   \   00000064   0x....             LDR.N    R0,??DataTable7_49
   \   00000066   0xF8D0 0x8000      LDR      R8,[R0, #+0]
    741          
    742              if ((ctr_curr - App_ProbeComCtrLast) >= OS_TICKS_PER_SEC) {
   \   0000006A   0x....             LDR.N    R0,??DataTable7_50
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x1A20             SUBS     R0,R4,R0
   \   00000070   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000074   0xD35B             BCC.N    ??App_ProbeCallback_0
    743                  App_ProbeComRxPktSpd      = ((CPU_FP32)(rxpkt_curr   - App_ProbeComRxPktLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
   \   00000076   0x....             LDR.N    R0,??DataTable7_51
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x1A28             SUBS     R0,R5,R0
   \   0000007C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000080   0x4681             MOV      R9,R0
   \   00000082   0x....             LDR.N    R0,??DataTable7_50
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x1A20             SUBS     R0,R4,R0
   \   00000088   0x.... 0x....      BL       __aeabi_ui2f
   \   0000008C   0x0001             MOVS     R1,R0
   \   0000008E   0x4648             MOV      R0,R9
   \   00000090   0x.... 0x....      BL       __aeabi_fdiv
   \   00000094   0x....             LDR.N    R1,??DataTable7_52  ;; 0x447a0000
   \   00000096   0x.... 0x....      BL       __aeabi_fmul
   \   0000009A   0x....             LDR.N    R1,??DataTable7_53
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    744                  App_ProbeComTxPktSpd      = ((CPU_FP32)(txpkt_curr   - App_ProbeComTxPktLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
   \   0000009E   0x....             LDR.N    R0,??DataTable7_54
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x1A30             SUBS     R0,R6,R0
   \   000000A4   0x.... 0x....      BL       __aeabi_ui2f
   \   000000A8   0x4681             MOV      R9,R0
   \   000000AA   0x....             LDR.N    R0,??DataTable7_50
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x1A20             SUBS     R0,R4,R0
   \   000000B0   0x.... 0x....      BL       __aeabi_ui2f
   \   000000B4   0x0001             MOVS     R1,R0
   \   000000B6   0x4648             MOV      R0,R9
   \   000000B8   0x.... 0x....      BL       __aeabi_fdiv
   \   000000BC   0x....             LDR.N    R1,??DataTable7_52  ;; 0x447a0000
   \   000000BE   0x.... 0x....      BL       __aeabi_fmul
   \   000000C2   0x....             LDR.N    R1,??DataTable7_55
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    745                  App_ProbeComTxSymSpd      = ((CPU_FP32)(sym_curr     - App_ProbeComTxSymLast)     / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
   \   000000C6   0x....             LDR.N    R0,??DataTable7_56
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x1A38             SUBS     R0,R7,R0
   \   000000CC   0x.... 0x....      BL       __aeabi_ui2f
   \   000000D0   0x4681             MOV      R9,R0
   \   000000D2   0x....             LDR.N    R0,??DataTable7_50
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x1A20             SUBS     R0,R4,R0
   \   000000D8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000DC   0x0001             MOVS     R1,R0
   \   000000DE   0x4648             MOV      R0,R9
   \   000000E0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000E4   0x....             LDR.N    R1,??DataTable7_52  ;; 0x447a0000
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x....             LDR.N    R1,??DataTable7_57
   \   000000EC   0x6008             STR      R0,[R1, #+0]
    746                  App_ProbeComTxSymByteSpd  = ((CPU_FP32)(symbyte_curr - App_ProbeComTxSymByteLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
   \   000000EE   0x....             LDR.N    R0,??DataTable7_58
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xEBB8 0x0000      SUBS     R0,R8,R0
   \   000000F6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FA   0x4681             MOV      R9,R0
   \   000000FC   0x....             LDR.N    R0,??DataTable7_50
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x1A20             SUBS     R0,R4,R0
   \   00000102   0x.... 0x....      BL       __aeabi_ui2f
   \   00000106   0x0001             MOVS     R1,R0
   \   00000108   0x4648             MOV      R0,R9
   \   0000010A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000010E   0x....             LDR.N    R1,??DataTable7_52  ;; 0x447a0000
   \   00000110   0x.... 0x....      BL       __aeabi_fmul
   \   00000114   0x....             LDR.N    R1,??DataTable7_59
   \   00000116   0x6008             STR      R0,[R1, #+0]
    747          
    748                  App_ProbeComCtrLast       = ctr_curr;
   \   00000118   0x....             LDR.N    R0,??DataTable7_50
   \   0000011A   0x6004             STR      R4,[R0, #+0]
    749                  App_ProbeComRxPktLast     = rxpkt_curr;
   \   0000011C   0x....             LDR.N    R0,??DataTable7_51
   \   0000011E   0x6005             STR      R5,[R0, #+0]
    750                  App_ProbeComTxPktLast     = txpkt_curr;
   \   00000120   0x....             LDR.N    R0,??DataTable7_54
   \   00000122   0x6006             STR      R6,[R0, #+0]
    751                  App_ProbeComTxSymLast     = sym_curr;
   \   00000124   0x....             LDR.N    R0,??DataTable7_56
   \   00000126   0x6007             STR      R7,[R0, #+0]
    752                  App_ProbeComTxSymByteLast = symbyte_curr;
   \   00000128   0x....             LDR.N    R0,??DataTable7_58
   \   0000012A   0xF8C0 0x8000      STR      R8,[R0, #+0]
    753              }
    754          #endif
    755          }
   \                     ??App_ProbeCallback_0: (+1)
   \   0000012E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    756          #endif
    757          
    758          
    759          /*
    760          *********************************************************************************************************
    761          *                                      App_FormatDec()
    762          *
    763          * Description : Convert a decimal value to ASCII (without leading zeros).
    764          *
    765          * Argument(s) : pstr            Pointer to the destination ASCII string.
    766          *
    767          *               value           Value to convert (assumes an unsigned value).
    768          *
    769          *               digits          The desired number of digits.
    770          *
    771          * Return(s)   : none.
    772          *
    773          * Caller(s)   : various.
    774          *
    775          * Note(s)     : none.
    776          *********************************************************************************************************
    777          */
    778          

   \                                 In section .text, align 2, keep-with-next
    779          static  void  App_FormatDec (CPU_INT08U *pstr, CPU_INT32U value, CPU_INT08U digits)
    780          {
   \                     App_FormatDec: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    781              CPU_INT08U   i;
    782              CPU_INT32U   mult;
    783              CPU_BOOLEAN  found;
    784              CPU_INT32U   nbr;
    785          
    786          
    787              found = DEF_NO;
   \   00000002   0x2300             MOVS     R3,#+0
    788              mult  = 1;
   \   00000004   0x2401             MOVS     R4,#+1
    789              for (i = 0; i < (digits - 1); i++) {
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE002             B.N      ??App_FormatDec_0
    790                  mult *= 10;
   \                     ??App_FormatDec_1: (+1)
   \   0000000A   0x260A             MOVS     R6,#+10
   \   0000000C   0x4374             MULS     R4,R6,R4
    791              }
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??App_FormatDec_0: (+1)
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x1E56             SUBS     R6,R2,#+1
   \   00000016   0x42B5             CMP      R5,R6
   \   00000018   0xDBF7             BLT.N    ??App_FormatDec_1
    792              while (mult > 0) {
   \                     ??App_FormatDec_2: (+1)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD01D             BEQ.N    ??App_FormatDec_3
    793                  nbr = value / mult;
   \   0000001E   0xFBB1 0xF2F4      UDIV     R2,R1,R4
    794                  if (found == DEF_NO) {
   \   00000022   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000024   0x2B00             CMP      R3,#+0
   \   00000026   0xD10D             BNE.N    ??App_FormatDec_4
    795                      if (nbr != 0) {
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD003             BEQ.N    ??App_FormatDec_5
    796                          found = DEF_YES;
   \   0000002C   0x2301             MOVS     R3,#+1
    797                          *pstr = nbr + '0';
   \   0000002E   0x3230             ADDS     R2,R2,#+48
   \   00000030   0x7002             STRB     R2,[R0, #+0]
   \   00000032   0xE009             B.N      ??App_FormatDec_6
    798                      } else{
    799                          if (mult == 1) {
   \                     ??App_FormatDec_5: (+1)
   \   00000034   0x2C01             CMP      R4,#+1
   \   00000036   0xD102             BNE.N    ??App_FormatDec_7
    800                              *pstr = '0';
   \   00000038   0x2230             MOVS     R2,#+48
   \   0000003A   0x7002             STRB     R2,[R0, #+0]
   \   0000003C   0xE004             B.N      ??App_FormatDec_6
    801                          } else {
    802                              *pstr = ' ';
   \                     ??App_FormatDec_7: (+1)
   \   0000003E   0x2220             MOVS     R2,#+32
   \   00000040   0x7002             STRB     R2,[R0, #+0]
   \   00000042   0xE001             B.N      ??App_FormatDec_6
    803                          }
    804                      }
    805                  } else {
    806                      *pstr = nbr + '0';
   \                     ??App_FormatDec_4: (+1)
   \   00000044   0x3230             ADDS     R2,R2,#+48
   \   00000046   0x7002             STRB     R2,[R0, #+0]
    807                  }
    808                  pstr++;
   \                     ??App_FormatDec_6: (+1)
   \   00000048   0x1C40             ADDS     R0,R0,#+1
    809                  value %= mult;
   \   0000004A   0xFBB1 0xF2F4      UDIV     R2,R1,R4
   \   0000004E   0xFB04 0x1112      MLS      R1,R4,R2,R1
    810                  mult  /= 10;
   \   00000052   0x220A             MOVS     R2,#+10
   \   00000054   0xFBB4 0xF4F2      UDIV     R4,R4,R2
   \   00000058   0xE7DF             B.N      ??App_FormatDec_2
    811              }
    812          }
   \                     ??App_FormatDec_3: (+1)
   \   0000005A   0xBC70             POP      {R4-R6}
   \   0000005C   0x4770             BX       LR               ;; return
    813          
    814          
    815          /*
    816          *********************************************************************************************************
    817          *********************************************************************************************************
    818          *                                          uC/OS-II APP HOOKS
    819          *********************************************************************************************************
    820          *********************************************************************************************************
    821          */
    822          
    823          #if (OS_APP_HOOKS_EN > 0)
    824          /*
    825          *********************************************************************************************************
    826          *                                      TASK CREATION HOOK (APPLICATION)
    827          *
    828          * Description : This function is called when a task is created.
    829          *
    830          * Argument(s) : ptcb   is a pointer to the task control block of the task being created.
    831          *
    832          * Note(s)     : (1) Interrupts are disabled during this call.
    833          *********************************************************************************************************
    834          */
    835          

   \                                 In section .text, align 2, keep-with-next
    836          void  App_TaskCreateHook (OS_TCB *ptcb)
    837          {
   \                     App_TaskCreateHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    838          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    839               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    840              OSProbe_TaskCreateHook(ptcb);
   \   00000002   0x.... 0x....      BL       OSProbe_TaskCreateHook
    841          #endif
    842          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    843          
    844          /*
    845          *********************************************************************************************************
    846          *                                    TASK DELETION HOOK (APPLICATION)
    847          *
    848          * Description : This function is called when a task is deleted.
    849          *
    850          * Argument(s) : ptcb   is a pointer to the task control block of the task being deleted.
    851          *
    852          * Note(s)     : (1) Interrupts are disabled during this call.
    853          *********************************************************************************************************
    854          */
    855          

   \                                 In section .text, align 2, keep-with-next
    856          void  App_TaskDelHook (OS_TCB *ptcb)
    857          {
    858              (void)ptcb;
    859          }
   \                     App_TaskDelHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    860          
    861          /*
    862          *********************************************************************************************************
    863          *                                      IDLE TASK HOOK (APPLICATION)
    864          *
    865          * Description : This function is called by OSTaskIdleHook(), which is called by the idle task.  This hook
    866          *               has been added to allow you to do such things as STOP the CPU to conserve power.
    867          *
    868          * Argument(s) : none.
    869          *
    870          * Note(s)     : (1) Interrupts are enabled during this call.
    871          *********************************************************************************************************
    872          */
    873          
    874          #if OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
    875          void  App_TaskIdleHook (void)
    876          {
    877          }
   \                     App_TaskIdleHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    878          #endif
    879          
    880          /*
    881          *********************************************************************************************************
    882          *                                        STATISTIC TASK HOOK (APPLICATION)
    883          *
    884          * Description : This function is called by OSTaskStatHook(), which is called every second by uC/OS-II's
    885          *               statistics task.  This allows your application to add functionality to the statistics task.
    886          *
    887          * Argument(s) : none.
    888          *********************************************************************************************************
    889          */
    890          

   \                                 In section .text, align 2, keep-with-next
    891          void  App_TaskStatHook (void)
    892          {
    893          }
   \                     App_TaskStatHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    894          
    895          /*
    896          *********************************************************************************************************
    897          *                                        TASK SWITCH HOOK (APPLICATION)
    898          *
    899          * Description : This function is called when a task switch is performed.  This allows you to perform other
    900          *               operations during a context switch.
    901          *
    902          * Argument(s) : none.
    903          *
    904          * Note(s)     : (1) Interrupts are disabled during this call.
    905          *
    906          *               (2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    907          *                   will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    908          *                  task being switched out (i.e. the preempted task).
    909          *********************************************************************************************************
    910          */
    911          
    912          #if OS_TASK_SW_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    913          void  App_TaskSwHook (void)
    914          {
   \                     App_TaskSwHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    915          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    916               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    917              OSProbe_TaskSwHook();
   \   00000002   0x.... 0x....      BL       OSProbe_TaskSwHook
    918          #endif
    919          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    920          #endif
    921          
    922          /*
    923          *********************************************************************************************************
    924          *                                     OS_TCBInit() HOOK (APPLICATION)
    925          *
    926          * Description : This function is called by OSTCBInitHook(), which is called by OS_TCBInit() after setting
    927          *               up most of the TCB.
    928          *
    929          * Argument(s) : ptcb    is a pointer to the TCB of the task being created.
    930          *
    931          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    932          *********************************************************************************************************
    933          */
    934          
    935          #if OS_VERSION >= 204

   \                                 In section .text, align 2, keep-with-next
    936          void  App_TCBInitHook (OS_TCB *ptcb)
    937          {
    938              (void)ptcb;
    939          }
   \                     App_TCBInitHook: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    940          #endif
    941          
    942          /*
    943          *********************************************************************************************************
    944          *                                        TICK HOOK (APPLICATION)
    945          *
    946          * Description : This function is called every tick.
    947          *
    948          * Argument(s) : none.
    949          *
    950          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    951          *********************************************************************************************************
    952          */
    953          
    954          #if OS_TIME_TICK_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    955          void  App_TimeTickHook (void)
    956          {
   \                     App_TimeTickHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    957          #if ((APP_OS_PROBE_EN   == DEF_ENABLED) && \
    958               (OS_PROBE_HOOKS_EN == DEF_ENABLED))
    959              OSProbe_TickHook();
   \   00000002   0x.... 0x....      BL       OSProbe_TickHook
    960          #endif
    961          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     App_TaskStartStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     App_TaskStartStk+0x1FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     App_UserIFMbox

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     App_TaskUserIFStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     App_TaskUserIFStk+0x3FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     App_TaskKbdStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     App_TaskKbdStk+0x1FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     App_LCDLine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     App_LCDLine1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     App_LCDLine2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     App_LCDLine3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     App_LCDLine4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     App_LCDLine4+0xE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     App_LCDLine5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x........         DC32     OSCPUUsage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     App_LCDLine6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x........         DC32     App_LCDLine7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     OSTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     App_LCDLine7+0xA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   0x........         DC32     App_LCDLine8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_34:
   \   00000000   0x........         DC32     OSCtxSwCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_35:
   \   00000000   0x........         DC32     App_LCDLine8+0xA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_36:
   \   00000000   0x........         DC32     App_LCDLine9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_37:
   \   00000000   0x........         DC32     OSTCBTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_38:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_39:
   \   00000000   0x........         DC32     App_ProbeCounts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_40:
   \   00000000   0x........         DC32     App_ProbeB1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_41:
   \   00000000   0x........         DC32     App_ProbeJoystickCenter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_42:
   \   00000000   0x........         DC32     App_ProbeJoystickDown

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_43:
   \   00000000   0x........         DC32     App_ProbeJoystickLeft

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_44:
   \   00000000   0x........         DC32     App_ProbeJoystickRight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_45:
   \   00000000   0x........         DC32     App_ProbeJoystickUp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_46:
   \   00000000   0x........         DC32     ProbeCom_RxPktCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_47:
   \   00000000   0x........         DC32     ProbeCom_TxPktCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_48:
   \   00000000   0x........         DC32     ProbeCom_TxSymCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_49:
   \   00000000   0x........         DC32     ProbeCom_TxSymByteCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_50:
   \   00000000   0x........         DC32     App_ProbeComCtrLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_51:
   \   00000000   0x........         DC32     App_ProbeComRxPktLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_52:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_53:
   \   00000000   0x........         DC32     App_ProbeComRxPktSpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_54:
   \   00000000   0x........         DC32     App_ProbeComTxPktLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_55:
   \   00000000   0x........         DC32     App_ProbeComTxPktSpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_56:
   \   00000000   0x........         DC32     App_ProbeComTxSymLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_57:
   \   00000000   0x........         DC32     App_ProbeComTxSymSpd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_58:
   \   00000000   0x........         DC32     App_ProbeComTxSymByteLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_59:
   \   00000000   0x........         DC32     App_ProbeComTxSymByteSpd

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x74          DC8 "Start Task"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x55 0x73          DC8 "User IF Mbox"
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x46 0x20    
   \              0x4D 0x62    
   \              0x6F 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x55 0x73          DC8 "User I/F"
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x2F 0x46    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x4B 0x65          DC8 "Keyboard"
   \              0x79 0x62    
   \              0x6F 0x61    
   \              0x72 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x20 0x20          DC8 "  Micrium uC/OS-II  "
   \              0x4D 0x69    
   \              0x63 0x72    
   \              0x69 0x75    
   \              0x6D 0x20    
   \              0x75 0x43    
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x53 0x54          DC8 "ST STM32 (Cortex-M3)"
   \              0x20 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x20 0x28    
   \              0x43 0x6F    
   \              0x72 0x74    
   \              0x65 0x78    
   \              0x2D 0x4D    
   \              0x33 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 "                    "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x20 0x20          DC8 "  uC/OS-II:  Vx.yy  "
   \              0x75 0x43    
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x3A 0x20    
   \              0x20 0x56    
   \              0x78 0x2E    
   \              0x79 0x79    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "  TickRate:   xxxx  "
   \              0x54 0x69    
   \              0x63 0x6B    
   \              0x52 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x20 0x20          DC8 "  CPU Usage:xx %    "
   \              0x43 0x50    
   \              0x55 0x20    
   \              0x55 0x73    
   \              0x61 0x67    
   \              0x65 0x3A    
   \              0x78 0x78    
   \              0x20 0x25    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x20 0x20          DC8 "  CPU Speed:xx MHz  "
   \              0x43 0x50    
   \              0x55 0x20    
   \              0x53 0x70    
   \              0x65 0x65    
   \              0x64 0x3A    
   \              0x78 0x78    
   \              0x20 0x4D    
   \              0x48 0x7A    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x20 0x20          DC8 "  #Ticks: xxxxxxxx  "
   \              0x23 0x54    
   \              0x69 0x63    
   \              0x6B 0x73    
   \              0x3A 0x20    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "  #CtxSw: xxxxxxxx  "
   \              0x23 0x43    
   \              0x74 0x78    
   \              0x53 0x77    
   \              0x3A 0x20    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x78 0x78    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x20 0x20          DC8 "  Prio   Taskname   "
   \              0x50 0x72    
   \              0x69 0x6F    
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x61 0x73    
   \              0x6B 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    962          #endif
    963          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   App_DispScr_SignOn
         8   -> App_FormatDec
         8   -> BSP_CPU_ClkFreq
         8   -> LCD_DisplayString
         8   -> LCD_SetTextColor
         8   -> OSVersion
         8   -> Str_Copy
      16   App_DispScr_TaskNames
        16   -> LCD_DisplayString
        16   -> LCD_SetTextColor
        16   -> Str_Copy
        16   -> Str_Copy_N
       8   App_EventCreate
         8   -> OSEventNameSet
         8   -> OSMboxCreate
      12   App_FormatDec
       8   App_InitProbe
         8   -> OSProbe_Init
         8   -> OSProbe_SetCallback
         8   -> OSProbe_SetDelay
         8   -> ProbeCom_Init
         8   -> ProbeRS232_Init
         8   -> ProbeRS232_RxIntEn
      32   App_ProbeCallback
        32   -> BSP_Joystick_GetStatus
        32   -> BSP_PB_GetStatus
        32   -> __aeabi_fdiv
        32   -> __aeabi_fmul
        32   -> __aeabi_ui2f
       0   App_TCBInitHook
      32   App_TaskCreate
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
       8   App_TaskCreateHook
         8   -> OSProbe_TaskCreateHook
       0   App_TaskDelHook
       0   App_TaskIdleHook
      16   App_TaskKbd
        16   -> BSP_PB_GetStatus
        16   -> OSMboxPost
        16   -> OSTimeDlyHMSM
      16   App_TaskStart
        16   -> App_EventCreate
        16   -> App_InitProbe
        16   -> App_TaskCreate
        16   -> BSP_ADC_GetStatus
        16   -> BSP_Init
        16   -> BSP_LED_Off
        16   -> BSP_LED_On
        16   -> OSStatInit
        16   -> OSTimeDlyHMSM
        16   -> OS_CPU_SysTickInit
       0   App_TaskStatHook
       8   App_TaskSwHook
         8   -> OSProbe_TaskSwHook
      16   App_TaskUserIF
        16   -> App_DispScr_SignOn
        16   -> App_DispScr_TaskNames
        16   -> LCD_Clear
        16   -> OSMboxPend
        16   -> OSTimeDlyHMSM
       8   App_TimeTickHook
         8   -> OSProbe_TickHook
      32   main
        32   -> BSP_IntDisAll
        32   -> OSInit
        32   -> OSStart
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_33
       4  ??DataTable7_34
       4  ??DataTable7_35
       4  ??DataTable7_36
       4  ??DataTable7_37
       4  ??DataTable7_38
       4  ??DataTable7_39
       4  ??DataTable7_4
       4  ??DataTable7_40
       4  ??DataTable7_41
       4  ??DataTable7_42
       4  ??DataTable7_43
       4  ??DataTable7_44
       4  ??DataTable7_45
       4  ??DataTable7_46
       4  ??DataTable7_47
       4  ??DataTable7_48
       4  ??DataTable7_49
       4  ??DataTable7_5
       4  ??DataTable7_50
       4  ??DataTable7_51
       4  ??DataTable7_52
       4  ??DataTable7_53
       4  ??DataTable7_54
       4  ??DataTable7_55
       4  ??DataTable7_56
       4  ??DataTable7_57
       4  ??DataTable7_58
       4  ??DataTable7_59
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      12  ?_0
      16  ?_1
      24  ?_10
      24  ?_11
      24  ?_12
      24  ?_13
      12  ?_2
      12  ?_3
      24  ?_4
      24  ?_5
      24  ?_6
      24  ?_7
      24  ?_8
      24  ?_9
     398  App_DispScr_SignOn
     318  App_DispScr_TaskNames
      32  App_EventCreate
      94  App_FormatDec
      38  App_InitProbe
      24  App_LCDLine0
      24  App_LCDLine1
      24  App_LCDLine2
      24  App_LCDLine3
      24  App_LCDLine4
      24  App_LCDLine5
      24  App_LCDLine6
      24  App_LCDLine7
      24  App_LCDLine8
      24  App_LCDLine9
       1  App_ProbeB1
     306  App_ProbeCallback
       4  App_ProbeComCtrLast
       4  App_ProbeComRxPktLast
       4  App_ProbeComRxPktSpd
       4  App_ProbeComTxPktLast
       4  App_ProbeComTxPktSpd
       4  App_ProbeComTxSymByteLast
       4  App_ProbeComTxSymByteSpd
       4  App_ProbeComTxSymLast
       4  App_ProbeComTxSymSpd
       4  App_ProbeCounts
       1  App_ProbeJoystickCenter
       1  App_ProbeJoystickDown
       1  App_ProbeJoystickLeft
       1  App_ProbeJoystickRight
       1  App_ProbeJoystickUp
       2  App_TCBInitHook
     118  App_TaskCreate
       8  App_TaskCreateHook
       2  App_TaskDelHook
       2  App_TaskIdleHook
      68  App_TaskKbd
     512  App_TaskKbdStk
     274  App_TaskStart
     512  App_TaskStartStk
       2  App_TaskStatHook
       8  App_TaskSwHook
      76  App_TaskUserIF
    1024  App_TaskUserIFStk
       8  App_TimeTickHook
       4  App_UserIFMbox
      76  main

 
 2 338 bytes in section .bss
   292 bytes in section .rodata
 2 070 bytes in section .text
 
 2 070 bytes of CODE  memory
   292 bytes of CONST memory
 2 338 bytes of DATA  memory

Errors: none
Warnings: none

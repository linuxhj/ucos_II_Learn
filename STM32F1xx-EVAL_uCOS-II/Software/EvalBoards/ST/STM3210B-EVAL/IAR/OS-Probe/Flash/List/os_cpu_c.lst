###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        27/Feb/2018  22:18:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c
#    Command line =  
#        "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c"
#        -lCN "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\"
#        -o "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\CPU\ST\STM32\inc\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LCD\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LIB\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\"
#        -Ol --use_c++_inline
#    List file    =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_cpu_c.lst
#    Object file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_cpu_c.o
#
###############################################################################

F:\Study\uCOS\UCOS II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_CPU_C.C
     13          * Version   : V2.86
     14          * By        : Jean J. Labrosse
     15          *
     16          * For       : ARMv7M Cortex-M3
     17          * Mode      : Thumb2
     18          * Toolchain : IAR EWARM
     19          *********************************************************************************************************
     20          */
     21          
     22          #define  OS_CPU_GLOBALS
     23          #include <ucos_ii.h>
     24          
     25          /*
     26          *********************************************************************************************************
     27          *                                          LOCAL VARIABLES
     28          *********************************************************************************************************
     29          */
     30          
     31          #if OS_TMR_EN > 0
     32          static  INT16U  OSTmrCtr;
     33          #endif
     34          
     35          /*
     36          *********************************************************************************************************
     37          *                                          SYS TICK DEFINES
     38          *********************************************************************************************************
     39          */
     40          
     41          #define  OS_CPU_CM3_NVIC_ST_CTRL    (*((volatile INT32U *)0xE000E010))   /* SysTick Ctrl & Status Reg. */
     42          #define  OS_CPU_CM3_NVIC_ST_RELOAD  (*((volatile INT32U *)0xE000E014))   /* SysTick Reload  Value Reg. */
     43          #define  OS_CPU_CM3_NVIC_ST_CURRENT (*((volatile INT32U *)0xE000E018))   /* SysTick Current Value Reg. */
     44          #define  OS_CPU_CM3_NVIC_ST_CAL     (*((volatile INT32U *)0xE000E01C))   /* SysTick Cal     Value Reg. */
     45          
     46          #define  OS_CPU_CM3_NVIC_ST_CTRL_COUNT                    0x00010000     /* Count flag.                */
     47          #define  OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC                  0x00000004     /* Clock Source.              */
     48          #define  OS_CPU_CM3_NVIC_ST_CTRL_INTEN                    0x00000002     /* Interrupt enable.          */
     49          #define  OS_CPU_CM3_NVIC_ST_CTRL_ENABLE                   0x00000001     /* Counter mode.              */
     50          
     51          /*
     52          *********************************************************************************************************
     53          *                                       OS INITIALIZATION HOOK
     54          *                                            (BEGINNING)
     55          *
     56          * Description: This function is called by OSInit() at the beginning of OSInit().
     57          *
     58          * Arguments  : none
     59          *
     60          * Note(s)    : 1) Interrupts should be disabled during this call.
     61          *********************************************************************************************************
     62          */
     63          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
     64          void  OSInitHookBegin (void)
     65          {
     66          #if OS_TMR_EN > 0
     67              OSTmrCtr = 0;
     68          #endif
     69          }
   \                     OSInitHookBegin: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     70          #endif
     71          
     72          /*
     73          *********************************************************************************************************
     74          *                                       OS INITIALIZATION HOOK
     75          *                                               (END)
     76          *
     77          * Description: This function is called by OSInit() at the end of OSInit().
     78          *
     79          * Arguments  : none
     80          *
     81          * Note(s)    : 1) Interrupts should be disabled during this call.
     82          *********************************************************************************************************
     83          */
     84          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
     85          void  OSInitHookEnd (void)
     86          {
     87          }
   \                     OSInitHookEnd: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     88          #endif
     89          
     90          /*
     91          *********************************************************************************************************
     92          *                                          TASK CREATION HOOK
     93          *
     94          * Description: This function is called when a task is created.
     95          *
     96          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
     97          *
     98          * Note(s)    : 1) Interrupts are disabled during this call.
     99          *********************************************************************************************************
    100          */
    101          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    102          void  OSTaskCreateHook (OS_TCB *ptcb)
    103          {
   \                     OSTaskCreateHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    104          #if OS_APP_HOOKS_EN > 0
    105              App_TaskCreateHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TaskCreateHook
    106          #else
    107              (void)ptcb;                                  /* Prevent compiler warning                           */
    108          #endif
    109          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    110          #endif
    111          
    112          
    113          /*
    114          *********************************************************************************************************
    115          *                                           TASK DELETION HOOK
    116          *
    117          * Description: This function is called when a task is deleted.
    118          *
    119          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
    120          *
    121          * Note(s)    : 1) Interrupts are disabled during this call.
    122          *********************************************************************************************************
    123          */
    124          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    125          void  OSTaskDelHook (OS_TCB *ptcb)
    126          {
   \                     OSTaskDelHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    127          #if OS_APP_HOOKS_EN > 0
    128              App_TaskDelHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TaskDelHook
    129          #else
    130              (void)ptcb;                                  /* Prevent compiler warning                           */
    131          #endif
    132          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    133          #endif
    134          
    135          /*
    136          *********************************************************************************************************
    137          *                                             IDLE TASK HOOK
    138          *
    139          * Description: This function is called by the idle task.  This hook has been added to allow you to do
    140          *              such things as STOP the CPU to conserve power.
    141          *
    142          * Arguments  : none
    143          *
    144          * Note(s)    : 1) Interrupts are enabled during this call.
    145          *********************************************************************************************************
    146          */
    147          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
    148          void  OSTaskIdleHook (void)
    149          {
   \                     OSTaskIdleHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    150          #if OS_APP_HOOKS_EN > 0
    151              App_TaskIdleHook();
   \   00000002   0x.... 0x....      BL       App_TaskIdleHook
    152          #endif
    153          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    154          #endif
    155          
    156          /*
    157          *********************************************************************************************************
    158          *                                           STATISTIC TASK HOOK
    159          *
    160          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your
    161          *              application to add functionality to the statistics task.
    162          *
    163          * Arguments  : none
    164          *********************************************************************************************************
    165          */
    166          
    167          #if OS_CPU_HOOKS_EN > 0

   \                                 In section .text, align 2, keep-with-next
    168          void  OSTaskStatHook (void)
    169          {
   \                     OSTaskStatHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    170          #if OS_APP_HOOKS_EN > 0
    171              App_TaskStatHook();
   \   00000002   0x.... 0x....      BL       App_TaskStatHook
    172          #endif
    173          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    174          #endif
    175          
    176          /*
    177          *********************************************************************************************************
    178          *                                        INITIALIZE A TASK'S STACK
    179          *
    180          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    181          *              stack frame of the task being created.  This function is highly processor specific.
    182          *
    183          * Arguments  : task          is a pointer to the task code
    184          *
    185          *              p_arg         is a pointer to a user supplied data area that will be passed to the task
    186          *                            when the task first executes.
    187          *
    188          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    189          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then
    190          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    191          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    192          *                            of the stack.
    193          *
    194          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    195          *                            (see uCOS_II.H for OS_TASK_OPT_xxx).
    196          *
    197          * Returns    : Always returns the location of the new top-of-stack once the processor registers have
    198          *              been placed on the stack in the proper order.
    199          *
    200          * Note(s)    : 1) Interrupts are enabled when your task starts executing.
    201          *              2) All tasks run in Thread mode, using process stack.
    202          *********************************************************************************************************
    203          */
    204          

   \                                 In section .text, align 2, keep-with-next
    205          OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
    206          {
   \                     OSTaskStkInit: (+1)
   \   00000000   0x0003             MOVS     R3,R0
   \   00000002   0x0010             MOVS     R0,R2
    207              OS_STK *stk;
    208          
    209          
    210              (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    211              stk       = ptos;                            /* Load stack pointer                                 */
    212          
    213                                                           /* Registers stacked as if auto-saved on exception    */
    214              *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
   \   00000004   0xF05F 0x7280      MOVS     R2,#+16777216
   \   00000008   0x6002             STR      R2,[R0, #+0]
    215              *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
   \   0000000A   0x1F00             SUBS     R0,R0,#+4
   \   0000000C   0x6003             STR      R3,[R0, #+0]
    216              *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
   \   0000000E   0x1F00             SUBS     R0,R0,#+4
   \   00000010   0xF07F 0x0201      MVNS     R2,#+1
   \   00000014   0x6002             STR      R2,[R0, #+0]
    217              *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
   \   00000016   0x1F00             SUBS     R0,R0,#+4
   \   00000018   0xF05F 0x3212      MOVS     R2,#+303174162
   \   0000001C   0x6002             STR      R2,[R0, #+0]
    218              *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
   \   0000001E   0x1F00             SUBS     R0,R0,#+4
   \   00000020   0xF05F 0x3203      MOVS     R2,#+50529027
   \   00000024   0x6002             STR      R2,[R0, #+0]
    219              *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
   \   00000026   0x1F00             SUBS     R0,R0,#+4
   \   00000028   0xF05F 0x3202      MOVS     R2,#+33686018
   \   0000002C   0x6002             STR      R2,[R0, #+0]
    220              *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
   \   0000002E   0x1F00             SUBS     R0,R0,#+4
   \   00000030   0xF05F 0x3201      MOVS     R2,#+16843009
   \   00000034   0x6002             STR      R2,[R0, #+0]
    221              *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
   \   00000036   0x1F00             SUBS     R0,R0,#+4
   \   00000038   0x6001             STR      R1,[R0, #+0]
    222          
    223                                                           /* Remaining registers saved on process stack         */
    224              *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
   \   0000003A   0x1F00             SUBS     R0,R0,#+4
   \   0000003C   0xF05F 0x3111      MOVS     R1,#+286331153
   \   00000040   0x6001             STR      R1,[R0, #+0]
    225              *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
   \   00000042   0x1F00             SUBS     R0,R0,#+4
   \   00000044   0xF05F 0x3110      MOVS     R1,#+269488144
   \   00000048   0x6001             STR      R1,[R0, #+0]
    226              *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
   \   0000004A   0x1F00             SUBS     R0,R0,#+4
   \   0000004C   0xF05F 0x3109      MOVS     R1,#+151587081
   \   00000050   0x6001             STR      R1,[R0, #+0]
    227              *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
   \   00000052   0x1F00             SUBS     R0,R0,#+4
   \   00000054   0xF05F 0x3108      MOVS     R1,#+134744072
   \   00000058   0x6001             STR      R1,[R0, #+0]
    228              *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
   \   0000005A   0x1F00             SUBS     R0,R0,#+4
   \   0000005C   0xF05F 0x3107      MOVS     R1,#+117901063
   \   00000060   0x6001             STR      R1,[R0, #+0]
    229              *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
   \   00000062   0x1F00             SUBS     R0,R0,#+4
   \   00000064   0xF05F 0x3106      MOVS     R1,#+101058054
   \   00000068   0x6001             STR      R1,[R0, #+0]
    230              *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
   \   0000006A   0x1F00             SUBS     R0,R0,#+4
   \   0000006C   0xF05F 0x3105      MOVS     R1,#+84215045
   \   00000070   0x6001             STR      R1,[R0, #+0]
    231              *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
   \   00000072   0x1F00             SUBS     R0,R0,#+4
   \   00000074   0xF05F 0x3104      MOVS     R1,#+67372036
   \   00000078   0x6001             STR      R1,[R0, #+0]
    232          
    233              return (stk);
   \   0000007A   0x4770             BX       LR               ;; return
    234          }
    235          
    236          /*
    237          *********************************************************************************************************
    238          *                                           TASK SWITCH HOOK
    239          *
    240          * Description: This function is called when a task switch is performed.  This allows you to perform other
    241          *              operations during a context switch.
    242          *
    243          * Arguments  : none
    244          *
    245          * Note(s)    : 1) Interrupts are disabled during this call.
    246          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    247          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    248          *                 task being switched out (i.e. the preempted task).
    249          *********************************************************************************************************
    250          */
    251          #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    252          void  OSTaskSwHook (void)
    253          {
   \                     OSTaskSwHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    254          #if OS_APP_HOOKS_EN > 0
    255              App_TaskSwHook();
   \   00000002   0x.... 0x....      BL       App_TaskSwHook
    256          #endif
    257          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    258          #endif
    259          
    260          /*
    261          *********************************************************************************************************
    262          *                                           OS_TCBInit() HOOK
    263          *
    264          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    265          *
    266          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    267          *
    268          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    269          *********************************************************************************************************
    270          */
    271          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In section .text, align 2, keep-with-next
    272          void  OSTCBInitHook (OS_TCB *ptcb)
    273          {
   \                     OSTCBInitHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    274          #if OS_APP_HOOKS_EN > 0
    275              App_TCBInitHook(ptcb);
   \   00000002   0x.... 0x....      BL       App_TCBInitHook
    276          #else
    277              (void)ptcb;                                  /* Prevent compiler warning                           */
    278          #endif
    279          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    280          #endif
    281          
    282          
    283          /*
    284          *********************************************************************************************************
    285          *                                               TICK HOOK
    286          *
    287          * Description: This function is called every tick.
    288          *
    289          * Arguments  : none
    290          *
    291          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    292          *********************************************************************************************************
    293          */
    294          #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)

   \                                 In section .text, align 2, keep-with-next
    295          void  OSTimeTickHook (void)
    296          {
   \                     OSTimeTickHook: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    297          #if OS_APP_HOOKS_EN > 0
    298              App_TimeTickHook();
   \   00000002   0x.... 0x....      BL       App_TimeTickHook
    299          #endif
    300          
    301          #if OS_TMR_EN > 0
    302              OSTmrCtr++;
    303              if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
    304                  OSTmrCtr = 0;
    305                  OSTmrSignal();
    306              }
    307          #endif
    308          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    309          #endif
    310          
    311          
    312          
    313          /*
    314          *********************************************************************************************************
    315          *                                         OS_CPU_SysTickHandler()
    316          *
    317          * Description: Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick
    318          *              interrupt.
    319          *
    320          * Arguments  : none.
    321          *
    322          * Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
    323          *********************************************************************************************************
    324          */
    325          

   \                                 In section .text, align 2, keep-with-next
    326          void  OS_CPU_SysTickHandler (void)
    327          {
   \                     OS_CPU_SysTickHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    328              OS_CPU_SR  cpu_sr;
    329          
    330          
    331              OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
    332              OSIntNesting++;
   \   00000006   0x....             LDR.N    R1,??DataTable1
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0x....             LDR.N    R2,??DataTable1
   \   0000000E   0x7011             STRB     R1,[R2, #+0]
    333              OS_EXIT_CRITICAL();
   \   00000010   0x.... 0x....      BL       OS_CPU_SR_Restore
    334          
    335              OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
   \   00000014   0x.... 0x....      BL       OSTimeTick
    336          
    337              OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
   \   00000018   0x.... 0x....      BL       OSIntExit
    338          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    339          
    340          
    341          /*
    342          *********************************************************************************************************
    343          *                                          OS_CPU_SysTickInit()
    344          *
    345          * Description: Initialize the SysTick.
    346          *
    347          * Arguments  : none.
    348          *
    349          * Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
    350          *********************************************************************************************************
    351          */
    352          

   \                                 In section .text, align 2, keep-with-next
    353          void  OS_CPU_SysTickInit (void)
    354          {
   \                     OS_CPU_SysTickInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    355              INT32U  cnts;
    356          
    357          
    358              cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
   \   00000002   0x.... 0x....      BL       OS_CPU_SysTickClkFreq
   \   00000006   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    359          
    360              OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable1_1  ;; 0xe000e014
   \   00000012   0x6008             STR      R0,[R1, #+0]
    361                                                           /* Enable timer.                                      */
    362              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
   \   00000014   0x....             LDR.N    R0,??DataTable1_2  ;; 0xe000e010
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF050 0x0005      ORRS     R0,R0,#0x5
   \   0000001C   0x....             LDR.N    R1,??DataTable1_2  ;; 0xe000e010
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    363                                                           /* Enable timer interrupt.                            */
    364              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
   \   00000020   0x....             LDR.N    R0,??DataTable1_2  ;; 0xe000e010
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000028   0x....             LDR.N    R1,??DataTable1_2  ;; 0xe000e010
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    365          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E010         DC32     0xe000e010

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSInitHookBegin
       0   OSInitHookEnd
       8   OSTCBInitHook
         8   -> App_TCBInitHook
       8   OSTaskCreateHook
         8   -> App_TaskCreateHook
       8   OSTaskDelHook
         8   -> App_TaskDelHook
       8   OSTaskIdleHook
         8   -> App_TaskIdleHook
       8   OSTaskStatHook
         8   -> App_TaskStatHook
       0   OSTaskStkInit
       8   OSTaskSwHook
         8   -> App_TaskSwHook
       8   OSTimeTickHook
         8   -> App_TimeTickHook
       8   OS_CPU_SysTickHandler
         8   -> OSIntExit
         8   -> OSTimeTick
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save
       8   OS_CPU_SysTickInit
         8   -> OS_CPU_SysTickClkFreq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       2  OSInitHookBegin
       2  OSInitHookEnd
       8  OSTCBInitHook
       8  OSTaskCreateHook
       8  OSTaskDelHook
       8  OSTaskIdleHook
       8  OSTaskStatHook
     124  OSTaskStkInit
       8  OSTaskSwHook
       8  OSTimeTickHook
      30  OS_CPU_SysTickHandler
      46  OS_CPU_SysTickInit

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none

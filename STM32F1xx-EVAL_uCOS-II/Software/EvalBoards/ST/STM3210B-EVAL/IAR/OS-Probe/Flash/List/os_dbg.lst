###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        27/Feb/2018  22:18:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_dbg.c
#    Command line =  
#        "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_dbg.c"
#        -lCN "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\"
#        -o "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\CPU\ST\STM32\inc\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LCD\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-LIB\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uCOS-II\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\"
#        -Ol --use_c++_inline
#    List file    =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\os_dbg.lst
#    Object file  =  
#        F:\Study\uCOS\UCOS
#        II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\os_dbg.o
#
###############################################################################

F:\Study\uCOS\UCOS II\Micrium_STM32F1xx-EVAL_uCOS-II\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_dbg.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *                                          DEBUGGER CONSTANTS
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_DBG.C
     13          * Version   : V2.86
     14          * By        : Jean J. Labrosse
     15          *
     16          * For       : ARMv7M Cortex-M3
     17          * Mode      : Thumb2
     18          * Toolchain : IAR EWARM
     19          *********************************************************************************************************
     20          */
     21          
     22          #include <ucos_ii.h>
     23          
     24          #define  OS_COMPILER_OPT  __root
     25          
     26          /*
     27          *********************************************************************************************************
     28          *                                             DEBUG DATA
     29          *********************************************************************************************************
     30          */
     31          

   \                                 In section .rodata, align 2, root
     32          OS_COMPILER_OPT  INT16U  const  OSDebugEn          = OS_DEBUG_EN;                /* Debug constants are defined below   */
   \                     OSDebugEn:
   \   00000000   0x0001             DC16 1
     33          
     34          #if OS_DEBUG_EN > 0
     35          

   \                                 In section .rodata, align 4, root
     36          OS_COMPILER_OPT  INT32U  const  OSEndiannessTest   = 0x12345678L;                /* Variable to test CPU endianness     */
   \                     OSEndiannessTest:
   \   00000000   0x12345678         DC32 305419896
     37          

   \                                 In section .rodata, align 2, root
     38          OS_COMPILER_OPT  INT16U  const  OSEventMax         = OS_MAX_EVENTS;              /* Number of event control blocks      */
   \                     OSEventMax:
   \   00000000   0x000A             DC16 10

   \                                 In section .rodata, align 2, root
     39          OS_COMPILER_OPT  INT16U  const  OSEventNameSize    = OS_EVENT_NAME_SIZE;         /* Size (in bytes) of event names      */
   \                     OSEventNameSize:
   \   00000000   0x0010             DC16 16

   \                                 In section .rodata, align 2, root
     40          OS_COMPILER_OPT  INT16U  const  OSEventEn          = OS_EVENT_EN;
   \                     OSEventEn:
   \   00000000   0x0001             DC16 1
     41          #if (OS_EVENT_EN > 0) && (OS_MAX_EVENTS > 0)

   \                                 In section .rodata, align 2, root
     42          OS_COMPILER_OPT  INT16U  const  OSEventSize        = sizeof(OS_EVENT);           /* Size in Bytes of OS_EVENT           */
   \                     OSEventSize:
   \   00000000   0x0020             DC16 32

   \                                 In section .rodata, align 2, root
     43          OS_COMPILER_OPT  INT16U  const  OSEventTblSize     = sizeof(OSEventTbl);         /* Size of OSEventTbl[] in bytes       */
   \                     OSEventTblSize:
   \   00000000   0x0140             DC16 320
     44          #else
     45          OS_COMPILER_OPT  INT16U  const  OSEventSize        = 0;
     46          OS_COMPILER_OPT  INT16U  const  OSEventTblSize     = 0;
     47          #endif
     48          

   \                                 In section .rodata, align 2, root
     49          OS_COMPILER_OPT  INT16U  const  OSFlagEn           = OS_FLAG_EN;
   \                     OSFlagEn:
   \   00000000   0x0001             DC16 1
     50          #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)

   \                                 In section .rodata, align 2, root
     51          OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize      = sizeof(OS_FLAG_GRP);        /* Size in Bytes of OS_FLAG_GRP        */
   \                     OSFlagGrpSize:
   \   00000000   0x001C             DC16 28

   \                                 In section .rodata, align 2, root
     52          OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize     = sizeof(OS_FLAG_NODE);       /* Size in Bytes of OS_FLAG_NODE       */
   \                     OSFlagNodeSize:
   \   00000000   0x0014             DC16 20

   \                                 In section .rodata, align 2, root
     53          OS_COMPILER_OPT  INT16U  const  OSFlagWidth        = sizeof(OS_FLAGS);           /* Width (in bytes) of OS_FLAGS        */
   \                     OSFlagWidth:
   \   00000000   0x0002             DC16 2
     54          #else
     55          OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize      = 0;
     56          OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize     = 0;
     57          OS_COMPILER_OPT  INT16U  const  OSFlagWidth        = 0;
     58          #endif

   \                                 In section .rodata, align 2, root
     59          OS_COMPILER_OPT  INT16U  const  OSFlagMax          = OS_MAX_FLAGS;
   \                     OSFlagMax:
   \   00000000   0x0005             DC16 5

   \                                 In section .rodata, align 2, root
     60          OS_COMPILER_OPT  INT16U  const  OSFlagNameSize     = OS_FLAG_NAME_SIZE;          /* Size (in bytes) of flag names       */
   \                     OSFlagNameSize:
   \   00000000   0x0010             DC16 16
     61          

   \                                 In section .rodata, align 2, root
     62          OS_COMPILER_OPT  INT16U  const  OSLowestPrio       = OS_LOWEST_PRIO;
   \                     OSLowestPrio:
   \   00000000   0x001F             DC16 31
     63          

   \                                 In section .rodata, align 2, root
     64          OS_COMPILER_OPT  INT16U  const  OSMboxEn           = OS_MBOX_EN;
   \                     OSMboxEn:
   \   00000000   0x0001             DC16 1
     65          

   \                                 In section .rodata, align 2, root
     66          OS_COMPILER_OPT  INT16U  const  OSMemEn            = OS_MEM_EN;
   \                     OSMemEn:
   \   00000000   0x0000             DC16 0

   \                                 In section .rodata, align 2, root
     67          OS_COMPILER_OPT  INT16U  const  OSMemMax           = OS_MAX_MEM_PART;            /* Number of memory partitions         */
   \                     OSMemMax:
   \   00000000   0x0005             DC16 5

   \                                 In section .rodata, align 2, root
     68          OS_COMPILER_OPT  INT16U  const  OSMemNameSize      = OS_MEM_NAME_SIZE;           /* Size (in bytes) of partition names  */
   \                     OSMemNameSize:
   \   00000000   0x0010             DC16 16
     69          #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
     70          OS_COMPILER_OPT  INT16U  const  OSMemSize          = sizeof(OS_MEM);             /* Mem. Partition header sine (bytes)  */
     71          OS_COMPILER_OPT  INT16U  const  OSMemTblSize       = sizeof(OSMemTbl);
     72          #else

   \                                 In section .rodata, align 2, root
     73          OS_COMPILER_OPT  INT16U  const  OSMemSize          = 0;
   \                     OSMemSize:
   \   00000000   0x0000             DC16 0

   \                                 In section .rodata, align 2, root
     74          OS_COMPILER_OPT  INT16U  const  OSMemTblSize       = 0;
   \                     OSMemTblSize:
   \   00000000   0x0000             DC16 0
     75          #endif

   \                                 In section .rodata, align 2, root
     76          OS_COMPILER_OPT  INT16U  const  OSMutexEn          = OS_MUTEX_EN;
   \                     OSMutexEn:
   \   00000000   0x0000             DC16 0
     77          

   \                                 In section .rodata, align 2, root
     78          OS_COMPILER_OPT  INT16U  const  OSPtrSize          = sizeof(void *);             /* Size in Bytes of a pointer          */
   \                     OSPtrSize:
   \   00000000   0x0004             DC16 4
     79          

   \                                 In section .rodata, align 2, root
     80          OS_COMPILER_OPT  INT16U  const  OSQEn              = OS_Q_EN;
   \                     OSQEn:
   \   00000000   0x0000             DC16 0

   \                                 In section .rodata, align 2, root
     81          OS_COMPILER_OPT  INT16U  const  OSQMax             = OS_MAX_QS;                  /* Number of queues                    */
   \                     OSQMax:
   \   00000000   0x0004             DC16 4
     82          #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
     83          OS_COMPILER_OPT  INT16U  const  OSQSize            = sizeof(OS_Q);               /* Size in bytes of OS_Q structure     */
     84          #else

   \                                 In section .rodata, align 2, root
     85          OS_COMPILER_OPT  INT16U  const  OSQSize            = 0;
   \                     OSQSize:
   \   00000000   0x0000             DC16 0
     86          #endif
     87          

   \                                 In section .rodata, align 2, root
     88          OS_COMPILER_OPT  INT16U  const  OSRdyTblSize       = OS_RDY_TBL_SIZE;            /* Number of bytes in the ready table  */
   \                     OSRdyTblSize:
   \   00000000   0x0004             DC16 4
     89          

   \                                 In section .rodata, align 2, root
     90          OS_COMPILER_OPT  INT16U  const  OSSemEn            = OS_SEM_EN;
   \                     OSSemEn:
   \   00000000   0x0001             DC16 1
     91          

   \                                 In section .rodata, align 2, root
     92          OS_COMPILER_OPT  INT16U  const  OSStkWidth         = sizeof(OS_STK);             /* Size in Bytes of a stack entry      */
   \                     OSStkWidth:
   \   00000000   0x0004             DC16 4
     93          

   \                                 In section .rodata, align 2, root
     94          OS_COMPILER_OPT  INT16U  const  OSTaskCreateEn     = OS_TASK_CREATE_EN;
   \                     OSTaskCreateEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     95          OS_COMPILER_OPT  INT16U  const  OSTaskCreateExtEn  = OS_TASK_CREATE_EXT_EN;
   \                     OSTaskCreateExtEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     96          OS_COMPILER_OPT  INT16U  const  OSTaskDelEn        = OS_TASK_DEL_EN;
   \                     OSTaskDelEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     97          OS_COMPILER_OPT  INT16U  const  OSTaskIdleStkSize  = OS_TASK_IDLE_STK_SIZE;
   \                     OSTaskIdleStkSize:
   \   00000000   0x0080             DC16 128

   \                                 In section .rodata, align 2, root
     98          OS_COMPILER_OPT  INT16U  const  OSTaskProfileEn    = OS_TASK_PROFILE_EN;
   \                     OSTaskProfileEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     99          OS_COMPILER_OPT  INT16U  const  OSTaskMax          = OS_MAX_TASKS + OS_N_SYS_TASKS;  /* Total max. number of tasks      */
   \                     OSTaskMax:
   \   00000000   0x0016             DC16 22

   \                                 In section .rodata, align 2, root
    100          OS_COMPILER_OPT  INT16U  const  OSTaskNameSize     = OS_TASK_NAME_SIZE;              /* Size (in bytes) of task names   */
   \                     OSTaskNameSize:
   \   00000000   0x0010             DC16 16

   \                                 In section .rodata, align 2, root
    101          OS_COMPILER_OPT  INT16U  const  OSTaskStatEn       = OS_TASK_STAT_EN;
   \                     OSTaskStatEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    102          OS_COMPILER_OPT  INT16U  const  OSTaskStatStkSize  = OS_TASK_STAT_STK_SIZE;
   \                     OSTaskStatStkSize:
   \   00000000   0x0080             DC16 128

   \                                 In section .rodata, align 2, root
    103          OS_COMPILER_OPT  INT16U  const  OSTaskStatStkChkEn = OS_TASK_STAT_STK_CHK_EN;
   \                     OSTaskStatStkChkEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    104          OS_COMPILER_OPT  INT16U  const  OSTaskSwHookEn     = OS_TASK_SW_HOOK_EN;
   \                     OSTaskSwHookEn:
   \   00000000   0x0001             DC16 1
    105          

   \                                 In section .rodata, align 2, root
    106          OS_COMPILER_OPT  INT16U  const  OSTCBPrioTblMax    = OS_LOWEST_PRIO + 1;         /* Number of entries in OSTCBPrioTbl[] */
   \                     OSTCBPrioTblMax:
   \   00000000   0x0020             DC16 32

   \                                 In section .rodata, align 2, root
    107          OS_COMPILER_OPT  INT16U  const  OSTCBSize          = sizeof(OS_TCB);             /* Size in Bytes of OS_TCB             */
   \                     OSTCBSize:
   \   00000000   0x005C             DC16 92

   \                                 In section .rodata, align 2, root
    108          OS_COMPILER_OPT  INT16U  const  OSTicksPerSec      = OS_TICKS_PER_SEC;
   \                     OSTicksPerSec:
   \   00000000   0x03E8             DC16 1000

   \                                 In section .rodata, align 2, root
    109          OS_COMPILER_OPT  INT16U  const  OSTimeTickHookEn   = OS_TIME_TICK_HOOK_EN;
   \                     OSTimeTickHookEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    110          OS_COMPILER_OPT  INT16U  const  OSVersionNbr       = OS_VERSION;
   \                     OSVersionNbr:
   \   00000000   0x011E             DC16 286
    111          
    112          #endif
    113          
    114          /*$PAGE*/
    115          /*
    116          *********************************************************************************************************
    117          *                                             DEBUG DATA
    118          *                            TOTAL DATA SPACE (i.e. RAM) USED BY uC/OS-II
    119          *********************************************************************************************************
    120          */
    121          #if OS_DEBUG_EN > 0
    122          

   \                                 In section .rodata, align 2, root
    123          OS_COMPILER_OPT  INT16U  const  OSDataSize = sizeof(OSCtxSwCtr)
   \                     OSDataSize:
   \   00000000   0x0E6E             DC16 3694
    124          #if (OS_EVENT_EN > 0) && (OS_MAX_EVENTS > 0)
    125                                                     + sizeof(OSEventFreeList)
    126                                                     + sizeof(OSEventTbl)
    127          #endif
    128          #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    129                                                     + sizeof(OSFlagTbl)
    130                                                     + sizeof(OSFlagFreeList)
    131          #endif
    132          #if OS_TASK_STAT_EN > 0
    133                                                     + sizeof(OSCPUUsage)
    134                                                     + sizeof(OSIdleCtrMax)
    135                                                     + sizeof(OSIdleCtrRun)
    136                                                     + sizeof(OSStatRdy)
    137                                                     + sizeof(OSTaskStatStk)
    138          #endif
    139          #if OS_TICK_STEP_EN > 0
    140                                                     + sizeof(OSTickStepState)
    141          #endif
    142          #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    143                                                     + sizeof(OSMemFreeList)
    144                                                     + sizeof(OSMemTbl)
    145          #endif
    146          #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    147                                                     + sizeof(OSQFreeList)
    148                                                     + sizeof(OSQTbl)
    149          #endif
    150          #if OS_TIME_GET_SET_EN > 0
    151                                                     + sizeof(OSTime)
    152          #endif
    153                                                     + sizeof(OSIntNesting)
    154                                                     + sizeof(OSLockNesting)
    155                                                     + sizeof(OSPrioCur)
    156                                                     + sizeof(OSPrioHighRdy)
    157                                                     + sizeof(OSRdyGrp)
    158                                                     + sizeof(OSRdyTbl)
    159                                                     + sizeof(OSRunning)
    160                                                     + sizeof(OSTaskCtr)
    161                                                     + sizeof(OSIdleCtr)
    162                                                     + sizeof(OSTaskIdleStk)
    163                                                     + sizeof(OSTCBCur)
    164                                                     + sizeof(OSTCBFreeList)
    165                                                     + sizeof(OSTCBHighRdy)
    166                                                     + sizeof(OSTCBList)
    167                                                     + sizeof(OSTCBPrioTbl)
    168                                                     + sizeof(OSTCBTbl);
    169          
    170          #endif
    171          
    172          /*$PAGE*/
    173          /*
    174          *********************************************************************************************************
    175          *                                       OS DEBUG INITIALIZAZTION
    176          *
    177          * Description: This function is used to make sure that debug variables that are unused in the application
    178          *              are not optimized away.  This function might not be necessary for all compilers.  In this
    179          *              case, you should simply DELETE the code in this function while still leaving the declaration
    180          *              of the function itself.
    181          *
    182          * Arguments  : none
    183          *
    184          * Returns    : none
    185          *
    186          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out
    187          *                  the 'const' variables which are declared in this file.
    188          *********************************************************************************************************
    189          */
    190          
    191          #if OS_VERSION >= 270 && OS_DEBUG_EN > 0

   \                                 In section .text, align 4, keep-with-next
    192          void  OSDebugInit (void)
    193          {
    194              void  *ptemp;
    195          
    196          
    197              ptemp = (void *)&OSDebugEn;
   \                     OSDebugInit: (+1)
   \   00000000   0x4816             LDR.N    R0,??OSDebugInit_0
    198          
    199              ptemp = (void *)&OSEndiannessTest;
   \   00000002   0x4817             LDR.N    R0,??OSDebugInit_0+0x4
    200          
    201              ptemp = (void *)&OSEventMax;
   \   00000004   0x4817             LDR.N    R0,??OSDebugInit_0+0x8
    202              ptemp = (void *)&OSEventNameSize;
   \   00000006   0x4818             LDR.N    R0,??OSDebugInit_0+0xC
    203              ptemp = (void *)&OSEventEn;
   \   00000008   0x4818             LDR.N    R0,??OSDebugInit_0+0x10
    204              ptemp = (void *)&OSEventSize;
   \   0000000A   0x4819             LDR.N    R0,??OSDebugInit_0+0x14
    205              ptemp = (void *)&OSEventTblSize;
   \   0000000C   0x4819             LDR.N    R0,??OSDebugInit_0+0x18
    206          
    207              ptemp = (void *)&OSFlagEn;
   \   0000000E   0x481A             LDR.N    R0,??OSDebugInit_0+0x1C
    208              ptemp = (void *)&OSFlagGrpSize;
   \   00000010   0x481A             LDR.N    R0,??OSDebugInit_0+0x20
    209              ptemp = (void *)&OSFlagNodeSize;
   \   00000012   0x481B             LDR.N    R0,??OSDebugInit_0+0x24
    210              ptemp = (void *)&OSFlagWidth;
   \   00000014   0x481B             LDR.N    R0,??OSDebugInit_0+0x28
    211              ptemp = (void *)&OSFlagMax;
   \   00000016   0x481C             LDR.N    R0,??OSDebugInit_0+0x2C
    212              ptemp = (void *)&OSFlagNameSize;
   \   00000018   0x481C             LDR.N    R0,??OSDebugInit_0+0x30
    213          
    214              ptemp = (void *)&OSLowestPrio;
   \   0000001A   0x481D             LDR.N    R0,??OSDebugInit_0+0x34
    215          
    216              ptemp = (void *)&OSMboxEn;
   \   0000001C   0x481D             LDR.N    R0,??OSDebugInit_0+0x38
    217          
    218              ptemp = (void *)&OSMemEn;
   \   0000001E   0x481E             LDR.N    R0,??OSDebugInit_0+0x3C
    219              ptemp = (void *)&OSMemMax;
   \   00000020   0x481E             LDR.N    R0,??OSDebugInit_0+0x40
    220              ptemp = (void *)&OSMemNameSize;
   \   00000022   0x481F             LDR.N    R0,??OSDebugInit_0+0x44
    221              ptemp = (void *)&OSMemSize;
   \   00000024   0x481F             LDR.N    R0,??OSDebugInit_0+0x48
    222              ptemp = (void *)&OSMemTblSize;
   \   00000026   0x4820             LDR.N    R0,??OSDebugInit_0+0x4C
    223          
    224              ptemp = (void *)&OSMutexEn;
   \   00000028   0x4820             LDR.N    R0,??OSDebugInit_0+0x50
    225          
    226              ptemp = (void *)&OSPtrSize;
   \   0000002A   0x4821             LDR.N    R0,??OSDebugInit_0+0x54
    227          
    228              ptemp = (void *)&OSQEn;
   \   0000002C   0x4821             LDR.N    R0,??OSDebugInit_0+0x58
    229              ptemp = (void *)&OSQMax;
   \   0000002E   0x4822             LDR.N    R0,??OSDebugInit_0+0x5C
    230              ptemp = (void *)&OSQSize;
   \   00000030   0x4822             LDR.N    R0,??OSDebugInit_0+0x60
    231          
    232              ptemp = (void *)&OSRdyTblSize;
   \   00000032   0x4823             LDR.N    R0,??OSDebugInit_0+0x64
    233          
    234              ptemp = (void *)&OSSemEn;
   \   00000034   0x4823             LDR.N    R0,??OSDebugInit_0+0x68
    235          
    236              ptemp = (void *)&OSStkWidth;
   \   00000036   0x4824             LDR.N    R0,??OSDebugInit_0+0x6C
    237          
    238              ptemp = (void *)&OSTaskCreateEn;
   \   00000038   0x4824             LDR.N    R0,??OSDebugInit_0+0x70
    239              ptemp = (void *)&OSTaskCreateExtEn;
   \   0000003A   0x4825             LDR.N    R0,??OSDebugInit_0+0x74
    240              ptemp = (void *)&OSTaskDelEn;
   \   0000003C   0x4825             LDR.N    R0,??OSDebugInit_0+0x78
    241              ptemp = (void *)&OSTaskIdleStkSize;
   \   0000003E   0x4826             LDR.N    R0,??OSDebugInit_0+0x7C
    242              ptemp = (void *)&OSTaskProfileEn;
   \   00000040   0x4826             LDR.N    R0,??OSDebugInit_0+0x80
    243              ptemp = (void *)&OSTaskMax;
   \   00000042   0x4827             LDR.N    R0,??OSDebugInit_0+0x84
    244              ptemp = (void *)&OSTaskNameSize;
   \   00000044   0x4827             LDR.N    R0,??OSDebugInit_0+0x88
    245              ptemp = (void *)&OSTaskStatEn;
   \   00000046   0x4828             LDR.N    R0,??OSDebugInit_0+0x8C
    246              ptemp = (void *)&OSTaskStatStkSize;
   \   00000048   0x4828             LDR.N    R0,??OSDebugInit_0+0x90
    247              ptemp = (void *)&OSTaskStatStkChkEn;
   \   0000004A   0x4829             LDR.N    R0,??OSDebugInit_0+0x94
    248              ptemp = (void *)&OSTaskSwHookEn;
   \   0000004C   0x4829             LDR.N    R0,??OSDebugInit_0+0x98
    249          
    250              ptemp = (void *)&OSTCBPrioTblMax;
   \   0000004E   0x482A             LDR.N    R0,??OSDebugInit_0+0x9C
    251              ptemp = (void *)&OSTCBSize;
   \   00000050   0x482A             LDR.N    R0,??OSDebugInit_0+0xA0
    252          
    253              ptemp = (void *)&OSTicksPerSec;
   \   00000052   0x482B             LDR.N    R0,??OSDebugInit_0+0xA4
    254              ptemp = (void *)&OSTimeTickHookEn;
   \   00000054   0x482B             LDR.N    R0,??OSDebugInit_0+0xA8
    255          
    256              ptemp = (void *)&OSVersionNbr;
   \   00000056   0x482C             LDR.N    R0,??OSDebugInit_0+0xAC
    257          
    258              ptemp = (void *)&OSDataSize;
   \   00000058   0x482C             LDR.N    R0,??OSDebugInit_0+0xB0
    259          
    260              ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
    261          }
   \   0000005A   0x4770             BX       LR               ;; return
   \                     ??OSDebugInit_0:
   \   0000005C   0x........         DC32     OSDebugEn
   \   00000060   0x........         DC32     OSEndiannessTest
   \   00000064   0x........         DC32     OSEventMax
   \   00000068   0x........         DC32     OSEventNameSize
   \   0000006C   0x........         DC32     OSEventEn
   \   00000070   0x........         DC32     OSEventSize
   \   00000074   0x........         DC32     OSEventTblSize
   \   00000078   0x........         DC32     OSFlagEn
   \   0000007C   0x........         DC32     OSFlagGrpSize
   \   00000080   0x........         DC32     OSFlagNodeSize
   \   00000084   0x........         DC32     OSFlagWidth
   \   00000088   0x........         DC32     OSFlagMax
   \   0000008C   0x........         DC32     OSFlagNameSize
   \   00000090   0x........         DC32     OSLowestPrio
   \   00000094   0x........         DC32     OSMboxEn
   \   00000098   0x........         DC32     OSMemEn
   \   0000009C   0x........         DC32     OSMemMax
   \   000000A0   0x........         DC32     OSMemNameSize
   \   000000A4   0x........         DC32     OSMemSize
   \   000000A8   0x........         DC32     OSMemTblSize
   \   000000AC   0x........         DC32     OSMutexEn
   \   000000B0   0x........         DC32     OSPtrSize
   \   000000B4   0x........         DC32     OSQEn
   \   000000B8   0x........         DC32     OSQMax
   \   000000BC   0x........         DC32     OSQSize
   \   000000C0   0x........         DC32     OSRdyTblSize
   \   000000C4   0x........         DC32     OSSemEn
   \   000000C8   0x........         DC32     OSStkWidth
   \   000000CC   0x........         DC32     OSTaskCreateEn
   \   000000D0   0x........         DC32     OSTaskCreateExtEn
   \   000000D4   0x........         DC32     OSTaskDelEn
   \   000000D8   0x........         DC32     OSTaskIdleStkSize
   \   000000DC   0x........         DC32     OSTaskProfileEn
   \   000000E0   0x........         DC32     OSTaskMax
   \   000000E4   0x........         DC32     OSTaskNameSize
   \   000000E8   0x........         DC32     OSTaskStatEn
   \   000000EC   0x........         DC32     OSTaskStatStkSize
   \   000000F0   0x........         DC32     OSTaskStatStkChkEn
   \   000000F4   0x........         DC32     OSTaskSwHookEn
   \   000000F8   0x........         DC32     OSTCBPrioTblMax
   \   000000FC   0x........         DC32     OSTCBSize
   \   00000100   0x........         DC32     OSTicksPerSec
   \   00000104   0x........         DC32     OSTimeTickHookEn
   \   00000108   0x........         DC32     OSVersionNbr
   \   0000010C   0x........         DC32     OSDataSize
    262          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSDebugInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  OSDataSize
       2  OSDebugEn
     272  OSDebugInit
       4  OSEndiannessTest
       2  OSEventEn
       2  OSEventMax
       2  OSEventNameSize
       2  OSEventSize
       2  OSEventTblSize
       2  OSFlagEn
       2  OSFlagGrpSize
       2  OSFlagMax
       2  OSFlagNameSize
       2  OSFlagNodeSize
       2  OSFlagWidth
       2  OSLowestPrio
       2  OSMboxEn
       2  OSMemEn
       2  OSMemMax
       2  OSMemNameSize
       2  OSMemSize
       2  OSMemTblSize
       2  OSMutexEn
       2  OSPtrSize
       2  OSQEn
       2  OSQMax
       2  OSQSize
       2  OSRdyTblSize
       2  OSSemEn
       2  OSStkWidth
       2  OSTCBPrioTblMax
       2  OSTCBSize
       2  OSTaskCreateEn
       2  OSTaskCreateExtEn
       2  OSTaskDelEn
       2  OSTaskIdleStkSize
       2  OSTaskMax
       2  OSTaskNameSize
       2  OSTaskProfileEn
       2  OSTaskStatEn
       2  OSTaskStatStkChkEn
       2  OSTaskStatStkSize
       2  OSTaskSwHookEn
       2  OSTicksPerSec
       2  OSTimeTickHookEn
       2  OSVersionNbr

 
  92 bytes in section .rodata
 272 bytes in section .text
 
 272 bytes of CODE  memory
  92 bytes of CONST memory

Errors: none
Warnings: none

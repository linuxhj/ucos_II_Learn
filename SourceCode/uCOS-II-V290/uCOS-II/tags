!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOLEAN	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned char  BOOLEAN;$/;"	t
FP32	Stm32f1xx_Ports/os_cpu.h	/^typedef float          FP32;                     \/* Single precision floating point                    *\/$/;"	t
FP64	Stm32f1xx_Ports/os_cpu.h	/^typedef double         FP64;                     \/* Double precision floating point                    *\/$/;"	t
INT16S	Stm32f1xx_Ports/os_cpu.h	/^typedef signed   short INT16S;                   \/* Signed   16 bit quantity                           *\/$/;"	t
INT16U	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned short INT16U;                   \/* Unsigned 16 bit quantity                           *\/$/;"	t
INT32S	Stm32f1xx_Ports/os_cpu.h	/^typedef signed   int   INT32S;                   \/* Signed   32 bit quantity                           *\/$/;"	t
INT32U	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned int   INT32U;                   \/* Unsigned 32 bit quantity                           *\/$/;"	t
INT8S	Stm32f1xx_Ports/os_cpu.h	/^typedef signed   char  INT8S;                    \/* Signed    8 bit quantity                           *\/$/;"	t
INT8U	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned char  INT8U;                    \/* Unsigned  8 bit quantity                           *\/$/;"	t
NVIC_INT_CTRL	Stm32f1xx_Ports/os_cpu_a.asm	/^NVIC_INT_CTRL   EQU     0xE000ED04                              ; Interrupt control state register.$/;"	d
NVIC_PENDSVSET	Stm32f1xx_Ports/os_cpu_a.asm	/^NVIC_PENDSVSET  EQU     0x10000000                              ; Value to trigger PendSV exception.$/;"	d
NVIC_PENDSV_PRI	Stm32f1xx_Ports/os_cpu_a.asm	/^NVIC_PENDSV_PRI EQU           0xFF                              ; PendSV priority value (lowest).$/;"	d
NVIC_SYSPRI14	Stm32f1xx_Ports/os_cpu_a.asm	/^NVIC_SYSPRI14   EQU     0xE000ED22                              ; System priority register (priority 14).$/;"	d
OSAddr	Source/ucos_ii.h	/^    void   *OSAddr;                    \/* Pointer to the beginning address of the memory partition     *\/$/;"	m	struct:os_mem_data
OSBlkSize	Source/ucos_ii.h	/^    INT32U  OSBlkSize;                 \/* Size (in bytes) of each memory block                         *\/$/;"	m	struct:os_mem_data
OSCPUUsage	Source/ucos_ii.h	/^OS_EXT  INT8U             OSCPUUsage;               \/* Percentage of CPU used                          *\/$/;"	v
OSCnt	Source/ucos_ii.h	/^    INT16U  OSCnt;                          \/* Semaphore count                                         *\/$/;"	m	struct:os_sem_data
OSCtxSw	Stm32f1xx_Ports/os_cpu_a.asm	/^OSCtxSw$/;"	l
OSCtxSwCtr	Source/ucos_ii.h	/^OS_EXT  INT32U            OSCtxSwCtr;               \/* Counter of number of context switches           *\/$/;"	v
OSDataSize	Source/os_dbg_r.c	/^INT16U  const  OSDataSize = sizeof(OSCtxSwCtr)$/;"	v
OSDataSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSDataSize = sizeof(OSCtxSwCtr)$/;"	v
OSDebugEn	Source/os_dbg_r.c	/^INT16U  const  OSDebugEn           = OS_DEBUG_EN;               \/* Debug constants are defined below   *\/$/;"	v
OSDebugEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSDebugEn          = OS_DEBUG_EN;                \/* Debug constants are defined below   *\/$/;"	v
OSDebugInit	Source/os_dbg_r.c	/^void  OSDebugInit (void)$/;"	f
OSDebugInit	Stm32f1xx_Ports/os_dbg.c	/^void  OSDebugInit (void)$/;"	f
OSEndiannessTest	Source/os_dbg_r.c	/^INT32U  const  OSEndiannessTest    = 0x12345678uL;              \/* Variable to test CPU endianness     *\/$/;"	v
OSEndiannessTest	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT32U  const  OSEndiannessTest   = 0x12345678L;                \/* Variable to test CPU endianness     *\/$/;"	v
OSEventCnt	Source/ucos_ii.h	/^    INT16U   OSEventCnt;                     \/* Semaphore Count (not used if other EVENT type)          *\/$/;"	m	struct:os_event
OSEventEn	Source/os_dbg_r.c	/^INT16U  const  OSEventEn           = OS_EVENT_EN;$/;"	v
OSEventEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventEn          = OS_EVENT_EN;$/;"	v
OSEventFreeList	Source/ucos_ii.h	/^OS_EXT  OS_EVENT         *OSEventFreeList;          \/* Pointer to list of free EVENT control blocks    *\/$/;"	v
OSEventGrp	Source/ucos_ii.h	/^    OS_PRIO        OSEventGrp;          \/* Group corresponding to tasks waiting for event to occur     *\/$/;"	m	struct:os_q_data
OSEventGrp	Source/ucos_ii.h	/^    OS_PRIO  OSEventGrp;                     \/* Group corresponding to tasks waiting for event to occur *\/$/;"	m	struct:os_event
OSEventGrp	Source/ucos_ii.h	/^    OS_PRIO OSEventGrp;                     \/* Group corresponding to tasks waiting for event to occur *\/$/;"	m	struct:os_mutex_data
OSEventGrp	Source/ucos_ii.h	/^    OS_PRIO OSEventGrp;                     \/* Group corresponding to tasks waiting for event to occur *\/$/;"	m	struct:os_sem_data
OSEventGrp	Source/ucos_ii.h	/^    OS_PRIO OSEventGrp;                    \/* Group corresponding to tasks waiting for event to occur  *\/$/;"	m	struct:os_mbox_data
OSEventMax	Source/os_dbg_r.c	/^INT16U  const  OSEventMax          = OS_MAX_EVENTS;             \/* Number of event control blocks      *\/$/;"	v
OSEventMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventMax         = OS_MAX_EVENTS;              \/* Number of event control blocks      *\/$/;"	v
OSEventMultiEn	Source/os_dbg_r.c	/^INT16U  const  OSEventMultiEn      = OS_EVENT_MULTI_EN;$/;"	v
OSEventName	Source/ucos_ii.h	/^    INT8U   *OSEventName;$/;"	m	struct:os_event
OSEventNameEn	Source/os_dbg_r.c	/^INT16U  const  OSEventNameEn       = OS_EVENT_NAME_EN;$/;"	v
OSEventNameGet	Source/os_core.c	/^INT8U  OSEventNameGet (OS_EVENT   *pevent,$/;"	f
OSEventNameSet	Source/os_core.c	/^void  OSEventNameSet (OS_EVENT  *pevent,$/;"	f
OSEventNameSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventNameSize    = OS_EVENT_NAME_SIZE;         \/* Size (in bytes) of event names      *\/$/;"	v
OSEventPendMulti	Source/os_core.c	/^INT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,$/;"	f
OSEventPtr	Source/ucos_ii.h	/^    void    *OSEventPtr;                     \/* Pointer to message or queue structure                   *\/$/;"	m	struct:os_event
OSEventSize	Source/os_dbg_r.c	/^INT16U  const  OSEventSize         = 0u;$/;"	v
OSEventSize	Source/os_dbg_r.c	/^INT16U  const  OSEventSize         = sizeof(OS_EVENT);          \/* Size in Bytes of OS_EVENT           *\/$/;"	v
OSEventSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventSize        = 0;$/;"	v
OSEventSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventSize        = sizeof(OS_EVENT);           \/* Size in Bytes of OS_EVENT           *\/$/;"	v
OSEventTbl	Source/ucos_ii.h	/^    OS_PRIO        OSEventTbl[OS_EVENT_TBL_SIZE];  \/* List of tasks waiting for event to occur         *\/$/;"	m	struct:os_q_data
OSEventTbl	Source/ucos_ii.h	/^    OS_PRIO  OSEventTbl[OS_EVENT_TBL_SIZE];  \/* List of tasks waiting for event to occur                *\/$/;"	m	struct:os_event
OSEventTbl	Source/ucos_ii.h	/^    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  \/* List of tasks waiting for event to occur                *\/$/;"	m	struct:os_mutex_data
OSEventTbl	Source/ucos_ii.h	/^    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  \/* List of tasks waiting for event to occur                *\/$/;"	m	struct:os_sem_data
OSEventTbl	Source/ucos_ii.h	/^    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE]; \/* List of tasks waiting for event to occur                 *\/$/;"	m	struct:os_mbox_data
OSEventTbl	Source/ucos_ii.h	/^OS_EXT  OS_EVENT          OSEventTbl[OS_MAX_EVENTS];\/* Table of EVENT control blocks                   *\/$/;"	v
OSEventTblSize	Source/os_dbg_r.c	/^INT16U  const  OSEventTblSize      = 0u;$/;"	v
OSEventTblSize	Source/os_dbg_r.c	/^INT16U  const  OSEventTblSize      = sizeof(OSEventTbl);        \/* Size of OSEventTbl[] in bytes       *\/$/;"	v
OSEventTblSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventTblSize     = 0;$/;"	v
OSEventTblSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSEventTblSize     = sizeof(OSEventTbl);         \/* Size of OSEventTbl[] in bytes       *\/$/;"	v
OSEventType	Source/ucos_ii.h	/^    INT8U    OSEventType;                    \/* Type of event control block (see OS_EVENT_TYPE_xxxx)    *\/$/;"	m	struct:os_event
OSFlagAccept	Source/os_flag.c	/^OS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagCreate	Source/os_flag.c	/^OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,$/;"	f
OSFlagDel	Source/os_flag.c	/^OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagEn	Source/os_dbg_r.c	/^INT16U  const  OSFlagEn            = OS_FLAG_EN;$/;"	v
OSFlagEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagEn           = OS_FLAG_EN;$/;"	v
OSFlagFlags	Source/ucos_ii.h	/^    OS_FLAGS      OSFlagFlags;              \/* 8, 16 or 32 bit flags                                   *\/$/;"	m	struct:os_flag_grp
OSFlagFreeList	Source/ucos_ii.h	/^OS_EXT  OS_FLAG_GRP      *OSFlagFreeList;           \/* Pointer to free list of event flag groups       *\/$/;"	v
OSFlagGrpSize	Source/os_dbg_r.c	/^INT16U  const  OSFlagGrpSize       = 0u;$/;"	v
OSFlagGrpSize	Source/os_dbg_r.c	/^INT16U  const  OSFlagGrpSize       = sizeof(OS_FLAG_GRP);       \/* Size in Bytes of OS_FLAG_GRP        *\/$/;"	v
OSFlagGrpSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize      = 0;$/;"	v
OSFlagGrpSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize      = sizeof(OS_FLAG_GRP);        \/* Size in Bytes of OS_FLAG_GRP        *\/$/;"	v
OSFlagMax	Source/os_dbg_r.c	/^INT16U  const  OSFlagMax           = OS_MAX_FLAGS;$/;"	v
OSFlagMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagMax          = OS_MAX_FLAGS;$/;"	v
OSFlagName	Source/ucos_ii.h	/^    INT8U        *OSFlagName;$/;"	m	struct:os_flag_grp
OSFlagNameEn	Source/os_dbg_r.c	/^INT16U  const  OSFlagNameEn        = OS_FLAG_NAME_EN;$/;"	v
OSFlagNameGet	Source/os_flag.c	/^INT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,$/;"	f
OSFlagNameSet	Source/os_flag.c	/^void  OSFlagNameSet (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagNameSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagNameSize     = OS_FLAG_NAME_SIZE;          \/* Size (in bytes) of flag names       *\/$/;"	v
OSFlagNodeFlagGrp	Source/ucos_ii.h	/^    void         *OSFlagNodeFlagGrp;        \/* Pointer to Event Flag Group                             *\/$/;"	m	struct:os_flag_node
OSFlagNodeFlags	Source/ucos_ii.h	/^    OS_FLAGS      OSFlagNodeFlags;          \/* Event flag to wait on                                   *\/$/;"	m	struct:os_flag_node
OSFlagNodeNext	Source/ucos_ii.h	/^    void         *OSFlagNodeNext;           \/* Pointer to next     NODE in wait list                   *\/$/;"	m	struct:os_flag_node
OSFlagNodePrev	Source/ucos_ii.h	/^    void         *OSFlagNodePrev;           \/* Pointer to previous NODE in wait list                   *\/$/;"	m	struct:os_flag_node
OSFlagNodeSize	Source/os_dbg_r.c	/^INT16U  const  OSFlagNodeSize      = 0u;$/;"	v
OSFlagNodeSize	Source/os_dbg_r.c	/^INT16U  const  OSFlagNodeSize      = sizeof(OS_FLAG_NODE);      \/* Size in Bytes of OS_FLAG_NODE       *\/$/;"	v
OSFlagNodeSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize     = 0;$/;"	v
OSFlagNodeSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize     = sizeof(OS_FLAG_NODE);       \/* Size in Bytes of OS_FLAG_NODE       *\/$/;"	v
OSFlagNodeTCB	Source/ucos_ii.h	/^    void         *OSFlagNodeTCB;            \/* Pointer to TCB of waiting task                          *\/$/;"	m	struct:os_flag_node
OSFlagNodeWaitType	Source/ucos_ii.h	/^    INT8U         OSFlagNodeWaitType;       \/* Type of wait:                                           *\/$/;"	m	struct:os_flag_node
OSFlagPend	Source/os_flag.c	/^OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagPendGetFlagsRdy	Source/os_flag.c	/^OS_FLAGS  OSFlagPendGetFlagsRdy (void)$/;"	f
OSFlagPost	Source/os_flag.c	/^OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagQuery	Source/os_flag.c	/^OS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,$/;"	f
OSFlagTbl	Source/ucos_ii.h	/^OS_EXT  OS_FLAG_GRP       OSFlagTbl[OS_MAX_FLAGS];  \/* Table containing event flag groups              *\/$/;"	v
OSFlagType	Source/ucos_ii.h	/^    INT8U         OSFlagType;               \/* Should be set to OS_EVENT_TYPE_FLAG                     *\/$/;"	m	struct:os_flag_grp
OSFlagWaitList	Source/ucos_ii.h	/^    void         *OSFlagWaitList;           \/* Pointer to first NODE of task waiting on event flag     *\/$/;"	m	struct:os_flag_grp
OSFlagWidth	Source/os_dbg_r.c	/^INT16U  const  OSFlagWidth         = 0u;$/;"	v
OSFlagWidth	Source/os_dbg_r.c	/^INT16U  const  OSFlagWidth         = sizeof(OS_FLAGS);          \/* Width (in bytes) of OS_FLAGS        *\/$/;"	v
OSFlagWidth	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagWidth        = 0;$/;"	v
OSFlagWidth	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSFlagWidth        = sizeof(OS_FLAGS);           \/* Width (in bytes) of OS_FLAGS        *\/$/;"	v
OSFree	Source/ucos_ii.h	/^    INT32U  OSFree;                    \/* Number of free bytes on the stack                            *\/$/;"	m	struct:os_stk_data
OSFreeList	Source/ucos_ii.h	/^    void   *OSFreeList;                \/* Pointer to the beginning of the free list of memory blocks   *\/$/;"	m	struct:os_mem_data
OSIdleCtr	Source/ucos_ii.h	/^OS_EXT  volatile  INT32U  OSIdleCtr;                                 \/* Idle counter                   *\/$/;"	v
OSIdleCtrMax	Source/ucos_ii.h	/^OS_EXT  INT32U            OSIdleCtrMax;             \/* Max. value that idle ctr can take in 1 sec.     *\/$/;"	v
OSIdleCtrRun	Source/ucos_ii.h	/^OS_EXT  INT32U            OSIdleCtrRun;             \/* Val. reached by idle ctr at run time in 1 sec.  *\/$/;"	v
OSInit	Source/os_core.c	/^void  OSInit (void)$/;"	f
OSInitHookBegin	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSInitHookBegin (void)$/;"	f
OSInitHookEnd	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSInitHookEnd (void)$/;"	f
OSIntCtxSw	Stm32f1xx_Ports/os_cpu_a.asm	/^OSIntCtxSw$/;"	l
OSIntEnter	Source/os_core.c	/^void  OSIntEnter (void)$/;"	f
OSIntExit	Source/os_core.c	/^void  OSIntExit (void)$/;"	f
OSIntNesting	Source/ucos_ii.h	/^OS_EXT  INT8U             OSIntNesting;             \/* Interrupt nesting level                         *\/$/;"	v
OSLockNesting	Source/ucos_ii.h	/^OS_EXT  INT8U             OSLockNesting;            \/* Multitasking lock nesting level                 *\/$/;"	v
OSLowestPrio	Source/os_dbg_r.c	/^INT16U  const  OSLowestPrio        = OS_LOWEST_PRIO;$/;"	v
OSLowestPrio	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSLowestPrio       = OS_LOWEST_PRIO;$/;"	v
OSMboxAccept	Source/os_mbox.c	/^void  *OSMboxAccept (OS_EVENT *pevent)$/;"	f
OSMboxCreate	Source/os_mbox.c	/^OS_EVENT  *OSMboxCreate (void *pmsg)$/;"	f
OSMboxDel	Source/os_mbox.c	/^OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,$/;"	f
OSMboxEn	Source/os_dbg_r.c	/^INT16U  const  OSMboxEn            = OS_MBOX_EN;$/;"	v
OSMboxEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMboxEn           = OS_MBOX_EN;$/;"	v
OSMboxPend	Source/os_mbox.c	/^void  *OSMboxPend (OS_EVENT  *pevent,$/;"	f
OSMboxPendAbort	Source/os_mbox.c	/^INT8U  OSMboxPendAbort (OS_EVENT  *pevent,$/;"	f
OSMboxPost	Source/os_mbox.c	/^INT8U  OSMboxPost (OS_EVENT  *pevent,$/;"	f
OSMboxPostOpt	Source/os_mbox.c	/^INT8U  OSMboxPostOpt (OS_EVENT  *pevent,$/;"	f
OSMboxQuery	Source/os_mbox.c	/^INT8U  OSMboxQuery (OS_EVENT      *pevent,$/;"	f
OSMemAddr	Source/ucos_ii.h	/^    void   *OSMemAddr;                    \/* Pointer to beginning of memory partition                  *\/$/;"	m	struct:os_mem
OSMemBlkSize	Source/ucos_ii.h	/^    INT32U  OSMemBlkSize;                 \/* Size (in bytes) of each block of memory                   *\/$/;"	m	struct:os_mem
OSMemCreate	Source/os_mem.c	/^OS_MEM  *OSMemCreate (void   *addr,$/;"	f
OSMemEn	Source/os_dbg_r.c	/^INT16U  const  OSMemEn             = OS_MEM_EN;$/;"	v
OSMemEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemEn            = OS_MEM_EN;$/;"	v
OSMemFreeList	Source/ucos_ii.h	/^    void   *OSMemFreeList;                \/* Pointer to list of free memory blocks                     *\/$/;"	m	struct:os_mem
OSMemFreeList	Source/ucos_ii.h	/^OS_EXT  OS_MEM           *OSMemFreeList;            \/* Pointer to free list of memory partitions       *\/$/;"	v
OSMemGet	Source/os_mem.c	/^void  *OSMemGet (OS_MEM  *pmem,$/;"	f
OSMemMax	Source/os_dbg_r.c	/^INT16U  const  OSMemMax            = OS_MAX_MEM_PART;           \/* Number of memory partitions         *\/$/;"	v
OSMemMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemMax           = OS_MAX_MEM_PART;            \/* Number of memory partitions         *\/$/;"	v
OSMemNBlks	Source/ucos_ii.h	/^    INT32U  OSMemNBlks;                   \/* Total number of blocks in this partition                  *\/$/;"	m	struct:os_mem
OSMemNFree	Source/ucos_ii.h	/^    INT32U  OSMemNFree;                   \/* Number of memory blocks remaining in this partition       *\/$/;"	m	struct:os_mem
OSMemName	Source/ucos_ii.h	/^    INT8U  *OSMemName;                    \/* Memory partition name                                     *\/$/;"	m	struct:os_mem
OSMemNameEn	Source/os_dbg_r.c	/^INT16U  const  OSMemNameEn         = OS_MEM_NAME_EN;$/;"	v
OSMemNameGet	Source/os_mem.c	/^INT8U  OSMemNameGet (OS_MEM   *pmem,$/;"	f
OSMemNameSet	Source/os_mem.c	/^void  OSMemNameSet (OS_MEM  *pmem,$/;"	f
OSMemNameSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemNameSize      = OS_MEM_NAME_SIZE;           \/* Size (in bytes) of partition names  *\/$/;"	v
OSMemPut	Source/os_mem.c	/^INT8U  OSMemPut (OS_MEM  *pmem,$/;"	f
OSMemQuery	Source/os_mem.c	/^INT8U  OSMemQuery (OS_MEM       *pmem,$/;"	f
OSMemSize	Source/os_dbg_r.c	/^INT16U  const  OSMemSize           = 0u;$/;"	v
OSMemSize	Source/os_dbg_r.c	/^INT16U  const  OSMemSize           = sizeof(OS_MEM);            \/* Mem. Partition header sine (bytes)  *\/$/;"	v
OSMemSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemSize          = 0;$/;"	v
OSMemSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemSize          = sizeof(OS_MEM);             \/* Mem. Partition header sine (bytes)  *\/$/;"	v
OSMemTbl	Source/ucos_ii.h	/^OS_EXT  OS_MEM            OSMemTbl[OS_MAX_MEM_PART];\/* Storage for memory partition manager            *\/$/;"	v
OSMemTblSize	Source/os_dbg_r.c	/^INT16U  const  OSMemTblSize        = 0u;$/;"	v
OSMemTblSize	Source/os_dbg_r.c	/^INT16U  const  OSMemTblSize        = sizeof(OSMemTbl);$/;"	v
OSMemTblSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemTblSize       = 0;$/;"	v
OSMemTblSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMemTblSize       = sizeof(OSMemTbl);$/;"	v
OSMsg	Source/ucos_ii.h	/^    void          *OSMsg;               \/* Pointer to next message to be extracted from queue          *\/$/;"	m	struct:os_q_data
OSMsg	Source/ucos_ii.h	/^    void   *OSMsg;                         \/* Pointer to message in mailbox                            *\/$/;"	m	struct:os_mbox_data
OSMutexAccept	Source/os_mutex.c	/^BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,$/;"	f
OSMutexCreate	Source/os_mutex.c	/^OS_EVENT  *OSMutexCreate (INT8U   prio,$/;"	f
OSMutexDel	Source/os_mutex.c	/^OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,$/;"	f
OSMutexEn	Source/os_dbg_r.c	/^INT16U  const  OSMutexEn           = OS_MUTEX_EN;$/;"	v
OSMutexEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSMutexEn          = OS_MUTEX_EN;$/;"	v
OSMutexPIP	Source/ucos_ii.h	/^    INT8U   OSMutexPIP;                     \/* Priority Inheritance Priority or 0xFF if no owner       *\/$/;"	m	struct:os_mutex_data
OSMutexPend	Source/os_mutex.c	/^void  OSMutexPend (OS_EVENT  *pevent,$/;"	f
OSMutexPost	Source/os_mutex.c	/^INT8U  OSMutexPost (OS_EVENT *pevent)$/;"	f
OSMutexQuery	Source/os_mutex.c	/^INT8U  OSMutexQuery (OS_EVENT       *pevent,$/;"	f
OSMutex_RdyAtPrio	Source/os_mutex.c	/^static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,$/;"	f	file:
OSNBlks	Source/ucos_ii.h	/^    INT32U  OSNBlks;                   \/* Total number of blocks in the partition                      *\/$/;"	m	struct:os_mem_data
OSNFree	Source/ucos_ii.h	/^    INT32U  OSNFree;                   \/* Number of memory blocks free                                 *\/$/;"	m	struct:os_mem_data
OSNMsgs	Source/ucos_ii.h	/^    INT16U         OSNMsgs;             \/* Number of messages in message queue                         *\/$/;"	m	struct:os_q_data
OSNUsed	Source/ucos_ii.h	/^    INT32U  OSNUsed;                   \/* Number of memory blocks used                                 *\/$/;"	m	struct:os_mem_data
OSOwnerPrio	Source/ucos_ii.h	/^    INT8U   OSOwnerPrio;                    \/* Mutex owner's task priority or 0xFF if no owner         *\/$/;"	m	struct:os_mutex_data
OSPrioCur	Source/ucos_ii.h	/^OS_EXT  INT8U             OSPrioCur;                \/* Priority of current task                        *\/$/;"	v
OSPrioHighRdy	Source/ucos_ii.h	/^OS_EXT  INT8U             OSPrioHighRdy;            \/* Priority of highest priority task               *\/$/;"	v
OSPtrSize	Source/os_dbg_r.c	/^INT16U  const  OSPtrSize           = sizeof(void *);            \/* Size in Bytes of a pointer          *\/$/;"	v
OSPtrSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSPtrSize          = sizeof(void *);             \/* Size in Bytes of a pointer          *\/$/;"	v
OSQAccept	Source/os_q.c	/^void  *OSQAccept (OS_EVENT  *pevent,$/;"	f
OSQCreate	Source/os_q.c	/^OS_EVENT  *OSQCreate (void    **start,$/;"	f
OSQDel	Source/os_q.c	/^OS_EVENT  *OSQDel (OS_EVENT  *pevent,$/;"	f
OSQEn	Source/os_dbg_r.c	/^INT16U  const  OSQEn               = OS_Q_EN;$/;"	v
OSQEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSQEn              = OS_Q_EN;$/;"	v
OSQEnd	Source/ucos_ii.h	/^    void         **OSQEnd;              \/* Pointer to end   of queue data                              *\/$/;"	m	struct:os_q
OSQEntries	Source/ucos_ii.h	/^    INT16U         OSQEntries;          \/* Current number of entries in the queue                      *\/$/;"	m	struct:os_q
OSQFlush	Source/os_q.c	/^INT8U  OSQFlush (OS_EVENT *pevent)$/;"	f
OSQFreeList	Source/ucos_ii.h	/^OS_EXT  OS_Q             *OSQFreeList;              \/* Pointer to list of free QUEUE control blocks    *\/$/;"	v
OSQIn	Source/ucos_ii.h	/^    void         **OSQIn;               \/* Pointer to where next message will be inserted  in   the Q  *\/$/;"	m	struct:os_q
OSQMax	Source/os_dbg_r.c	/^INT16U  const  OSQMax              = OS_MAX_QS;                 \/* Number of queues                    *\/$/;"	v
OSQMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSQMax             = OS_MAX_QS;                  \/* Number of queues                    *\/$/;"	v
OSQOut	Source/ucos_ii.h	/^    void         **OSQOut;              \/* Pointer to where next message will be extracted from the Q  *\/$/;"	m	struct:os_q
OSQPend	Source/os_q.c	/^void  *OSQPend (OS_EVENT  *pevent,$/;"	f
OSQPendAbort	Source/os_q.c	/^INT8U  OSQPendAbort (OS_EVENT  *pevent,$/;"	f
OSQPost	Source/os_q.c	/^INT8U  OSQPost (OS_EVENT  *pevent,$/;"	f
OSQPostFront	Source/os_q.c	/^INT8U  OSQPostFront (OS_EVENT  *pevent,$/;"	f
OSQPostOpt	Source/os_q.c	/^INT8U  OSQPostOpt (OS_EVENT  *pevent,$/;"	f
OSQPtr	Source/ucos_ii.h	/^    struct os_q   *OSQPtr;              \/* Link to next queue control block in list of free blocks     *\/$/;"	m	struct:os_q	typeref:struct:os_q::os_q
OSQQuery	Source/os_q.c	/^INT8U  OSQQuery (OS_EVENT  *pevent,$/;"	f
OSQSize	Source/os_dbg_r.c	/^INT16U  const  OSQSize             = 0u;$/;"	v
OSQSize	Source/os_dbg_r.c	/^INT16U  const  OSQSize             = sizeof(OS_Q);              \/* Size in bytes of OS_Q structure     *\/$/;"	v
OSQSize	Source/ucos_ii.h	/^    INT16U         OSQSize;             \/* Size of message queue                                       *\/$/;"	m	struct:os_q_data
OSQSize	Source/ucos_ii.h	/^    INT16U         OSQSize;             \/* Size of queue (maximum number of entries)                   *\/$/;"	m	struct:os_q
OSQSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSQSize            = 0;$/;"	v
OSQSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSQSize            = sizeof(OS_Q);               \/* Size in bytes of OS_Q structure     *\/$/;"	v
OSQStart	Source/ucos_ii.h	/^    void         **OSQStart;            \/* Pointer to start of queue data                              *\/$/;"	m	struct:os_q
OSQTbl	Source/ucos_ii.h	/^OS_EXT  OS_Q              OSQTbl[OS_MAX_QS];        \/* Table of QUEUE control blocks                   *\/$/;"	v
OSRdyGrp	Source/ucos_ii.h	/^OS_EXT  OS_PRIO           OSRdyGrp;                        \/* Ready list group                         *\/$/;"	v
OSRdyTbl	Source/ucos_ii.h	/^OS_EXT  OS_PRIO           OSRdyTbl[OS_RDY_TBL_SIZE];       \/* Table of tasks which are ready to run    *\/$/;"	v
OSRdyTblSize	Source/os_dbg_r.c	/^INT16U  const  OSRdyTblSize        = OS_RDY_TBL_SIZE;           \/* Number of bytes in the ready table  *\/$/;"	v
OSRdyTblSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSRdyTblSize       = OS_RDY_TBL_SIZE;            \/* Number of bytes in the ready table  *\/$/;"	v
OSRunning	Source/ucos_ii.h	/^OS_EXT  BOOLEAN           OSRunning;                       \/* Flag indicating that kernel is running   *\/$/;"	v
OSSafetyCriticalStart	Source/os_core.c	/^void  OSSafetyCriticalStart (void)$/;"	f
OSSafetyCriticalStartFlag	Source/ucos_ii.h	/^OS_EXT  BOOLEAN           OSSafetyCriticalStartFlag;$/;"	v
OSSchedLock	Source/os_core.c	/^void  OSSchedLock (void)$/;"	f
OSSchedUnlock	Source/os_core.c	/^void  OSSchedUnlock (void)$/;"	f
OSSemAccept	Source/os_sem.c	/^INT16U  OSSemAccept (OS_EVENT *pevent)$/;"	f
OSSemCreate	Source/os_sem.c	/^OS_EVENT  *OSSemCreate (INT16U cnt)$/;"	f
OSSemDel	Source/os_sem.c	/^OS_EVENT  *OSSemDel (OS_EVENT  *pevent,$/;"	f
OSSemEn	Source/os_dbg_r.c	/^INT16U  const  OSSemEn             = OS_SEM_EN;$/;"	v
OSSemEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSSemEn            = OS_SEM_EN;$/;"	v
OSSemPend	Source/os_sem.c	/^void  OSSemPend (OS_EVENT  *pevent,$/;"	f
OSSemPendAbort	Source/os_sem.c	/^INT8U  OSSemPendAbort (OS_EVENT  *pevent,$/;"	f
OSSemPost	Source/os_sem.c	/^INT8U  OSSemPost (OS_EVENT *pevent)$/;"	f
OSSemQuery	Source/os_sem.c	/^INT8U  OSSemQuery (OS_EVENT     *pevent,$/;"	f
OSSemSet	Source/os_sem.c	/^void  OSSemSet (OS_EVENT  *pevent,$/;"	f
OSStart	Source/os_core.c	/^void  OSStart (void)$/;"	f
OSStartHang	Stm32f1xx_Ports/os_cpu_a.asm	/^OSStartHang$/;"	l
OSStartHighRdy	Stm32f1xx_Ports/os_cpu_a.asm	/^OSStartHighRdy$/;"	l
OSStatInit	Source/os_core.c	/^void  OSStatInit (void)$/;"	f
OSStatRdy	Source/ucos_ii.h	/^OS_EXT  BOOLEAN           OSStatRdy;                \/* Flag indicating that the statistic task is rdy  *\/$/;"	v
OSStkWidth	Source/os_dbg_r.c	/^INT16U  const  OSStkWidth          = sizeof(OS_STK);            \/* Size in Bytes of a stack entry      *\/$/;"	v
OSStkWidth	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSStkWidth         = sizeof(OS_STK);             \/* Size in Bytes of a stack entry      *\/$/;"	v
OSTCBBitX	Source/ucos_ii.h	/^    OS_PRIO          OSTCBBitX;             \/* Bit mask to access bit position in ready table          *\/$/;"	m	struct:os_tcb
OSTCBBitY	Source/ucos_ii.h	/^    OS_PRIO          OSTCBBitY;             \/* Bit mask to access bit position in ready group          *\/$/;"	m	struct:os_tcb
OSTCBCtxSwCtr	Source/ucos_ii.h	/^    INT32U           OSTCBCtxSwCtr;         \/* Number of time the task was switched in                 *\/$/;"	m	struct:os_tcb
OSTCBCur	Source/ucos_ii.h	/^OS_EXT  OS_TCB           *OSTCBCur;                        \/* Pointer to currently running TCB         *\/$/;"	v
OSTCBCyclesStart	Source/ucos_ii.h	/^    INT32U           OSTCBCyclesStart;      \/* Snapshot of cycle counter at start of task resumption   *\/$/;"	m	struct:os_tcb
OSTCBCyclesTot	Source/ucos_ii.h	/^    INT32U           OSTCBCyclesTot;        \/* Total number of clock cycles the task has been running  *\/$/;"	m	struct:os_tcb
OSTCBDelReq	Source/ucos_ii.h	/^    INT8U            OSTCBDelReq;           \/* Indicates whether a task needs to delete itself         *\/$/;"	m	struct:os_tcb
OSTCBDly	Source/ucos_ii.h	/^    INT32U           OSTCBDly;              \/* Nbr ticks to delay task or, timeout waiting for event   *\/$/;"	m	struct:os_tcb
OSTCBEventMultiPtr	Source/ucos_ii.h	/^    OS_EVENT       **OSTCBEventMultiPtr;    \/* Pointer to multiple event control blocks                *\/$/;"	m	struct:os_tcb
OSTCBEventPtr	Source/ucos_ii.h	/^    OS_EVENT        *OSTCBEventPtr;         \/* Pointer to          event control block                 *\/$/;"	m	struct:os_tcb
OSTCBExtPtr	Source/ucos_ii.h	/^    void            *OSTCBExtPtr;           \/* Pointer to user definable data for TCB extension        *\/$/;"	m	struct:os_tcb
OSTCBFlagNode	Source/ucos_ii.h	/^    OS_FLAG_NODE    *OSTCBFlagNode;         \/* Pointer to event flag node                              *\/$/;"	m	struct:os_tcb
OSTCBFlagsRdy	Source/ucos_ii.h	/^    OS_FLAGS         OSTCBFlagsRdy;         \/* Event flags that made task ready to run                 *\/$/;"	m	struct:os_tcb
OSTCBFreeList	Source/ucos_ii.h	/^OS_EXT  OS_TCB           *OSTCBFreeList;                   \/* Pointer to list of free TCBs             *\/$/;"	v
OSTCBHighRdy	Source/ucos_ii.h	/^OS_EXT  OS_TCB           *OSTCBHighRdy;                    \/* Pointer to highest priority TCB R-to-R   *\/$/;"	v
OSTCBId	Source/ucos_ii.h	/^    INT16U           OSTCBId;               \/* Task ID (0..65535)                                      *\/$/;"	m	struct:os_tcb
OSTCBInitHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTCBInitHook (OS_TCB *ptcb)$/;"	f
OSTCBList	Source/ucos_ii.h	/^OS_EXT  OS_TCB           *OSTCBList;                       \/* Pointer to doubly linked list of TCBs    *\/$/;"	v
OSTCBMsg	Source/ucos_ii.h	/^    void            *OSTCBMsg;              \/* Message received from OSMboxPost() or OSQPost()         *\/$/;"	m	struct:os_tcb
OSTCBNext	Source/ucos_ii.h	/^    struct os_tcb   *OSTCBNext;             \/* Pointer to next     TCB in the TCB list                 *\/$/;"	m	struct:os_tcb	typeref:struct:os_tcb::os_tcb
OSTCBOpt	Source/ucos_ii.h	/^    INT16U           OSTCBOpt;              \/* Task options as passed by OSTaskCreateExt()             *\/$/;"	m	struct:os_tcb
OSTCBPrev	Source/ucos_ii.h	/^    struct os_tcb   *OSTCBPrev;             \/* Pointer to previous TCB in the TCB list                 *\/$/;"	m	struct:os_tcb	typeref:struct:os_tcb::os_tcb
OSTCBPrio	Source/ucos_ii.h	/^    INT8U            OSTCBPrio;             \/* Task priority (0 == highest)                            *\/$/;"	m	struct:os_tcb
OSTCBPrioTbl	Source/ucos_ii.h	/^OS_EXT  OS_TCB           *OSTCBPrioTbl[OS_LOWEST_PRIO + 1u];    \/* Table of pointers to created TCBs   *\/$/;"	v
OSTCBPrioTblMax	Source/os_dbg_r.c	/^INT16U  const  OSTCBPrioTblMax     = OS_LOWEST_PRIO + 1u;       \/* Number of entries in OSTCBPrioTbl[] *\/$/;"	v
OSTCBPrioTblMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTCBPrioTblMax    = OS_LOWEST_PRIO + 1;         \/* Number of entries in OSTCBPrioTbl[] *\/$/;"	v
OSTCBRegTbl	Source/ucos_ii.h	/^    INT32U           OSTCBRegTbl[OS_TASK_REG_TBL_SIZE];$/;"	m	struct:os_tcb
OSTCBSize	Source/os_dbg_r.c	/^INT16U  const  OSTCBSize           = sizeof(OS_TCB);            \/* Size in Bytes of OS_TCB             *\/$/;"	v
OSTCBSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTCBSize          = sizeof(OS_TCB);             \/* Size in Bytes of OS_TCB             *\/$/;"	v
OSTCBStat	Source/ucos_ii.h	/^    INT8U            OSTCBStat;             \/* Task      status                                        *\/$/;"	m	struct:os_tcb
OSTCBStatPend	Source/ucos_ii.h	/^    INT8U            OSTCBStatPend;         \/* Task PEND status                                        *\/$/;"	m	struct:os_tcb
OSTCBStkBase	Source/ucos_ii.h	/^    OS_STK          *OSTCBStkBase;          \/* Pointer to the beginning of the task stack              *\/$/;"	m	struct:os_tcb
OSTCBStkBottom	Source/ucos_ii.h	/^    OS_STK          *OSTCBStkBottom;        \/* Pointer to bottom of stack                              *\/$/;"	m	struct:os_tcb
OSTCBStkPtr	Source/ucos_ii.h	/^    OS_STK          *OSTCBStkPtr;           \/* Pointer to current top of stack                         *\/$/;"	m	struct:os_tcb
OSTCBStkSize	Source/ucos_ii.h	/^    INT32U           OSTCBStkSize;          \/* Size of task stack (in number of stack elements)        *\/$/;"	m	struct:os_tcb
OSTCBStkUsed	Source/ucos_ii.h	/^    INT32U           OSTCBStkUsed;          \/* Number of bytes used from the stack                     *\/$/;"	m	struct:os_tcb
OSTCBTaskName	Source/ucos_ii.h	/^    INT8U           *OSTCBTaskName;$/;"	m	struct:os_tcb
OSTCBTbl	Source/ucos_ii.h	/^OS_EXT  OS_TCB            OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS];   \/* Table of TCBs                  *\/$/;"	v
OSTCBX	Source/ucos_ii.h	/^    INT8U            OSTCBX;                \/* Bit position in group  corresponding to task priority   *\/$/;"	m	struct:os_tcb
OSTCBY	Source/ucos_ii.h	/^    INT8U            OSTCBY;                \/* Index into ready table corresponding to task priority   *\/$/;"	m	struct:os_tcb
OSTaskChangePrio	Source/os_task.c	/^INT8U  OSTaskChangePrio (INT8U  oldprio,$/;"	f
OSTaskCreate	Source/os_task.c	/^INT8U  OSTaskCreate (void   (*task)(void *p_arg),$/;"	f
OSTaskCreateEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskCreateEn      = OS_TASK_CREATE_EN;$/;"	v
OSTaskCreateEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskCreateEn     = OS_TASK_CREATE_EN;$/;"	v
OSTaskCreateExt	Source/os_task.c	/^INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),$/;"	f
OSTaskCreateExtEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskCreateExtEn   = OS_TASK_CREATE_EXT_EN;$/;"	v
OSTaskCreateExtEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskCreateExtEn  = OS_TASK_CREATE_EXT_EN;$/;"	v
OSTaskCreateHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTaskCreateHook (OS_TCB *ptcb)$/;"	f
OSTaskCtr	Source/ucos_ii.h	/^OS_EXT  INT8U             OSTaskCtr;                       \/* Number of tasks created                  *\/$/;"	v
OSTaskDel	Source/os_task.c	/^INT8U  OSTaskDel (INT8U prio)$/;"	f
OSTaskDelEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskDelEn         = OS_TASK_DEL_EN;$/;"	v
OSTaskDelEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskDelEn        = OS_TASK_DEL_EN;$/;"	v
OSTaskDelHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTaskDelHook (OS_TCB *ptcb)$/;"	f
OSTaskDelReq	Source/os_task.c	/^INT8U  OSTaskDelReq (INT8U prio)$/;"	f
OSTaskIdleHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTaskIdleHook (void)$/;"	f
OSTaskIdleStk	Source/ucos_ii.h	/^OS_EXT  OS_STK            OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE];      \/* Idle task stack                *\/$/;"	v
OSTaskIdleStkSize	Source/os_dbg_r.c	/^INT16U  const  OSTaskIdleStkSize   = OS_TASK_IDLE_STK_SIZE;$/;"	v
OSTaskIdleStkSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskIdleStkSize  = OS_TASK_IDLE_STK_SIZE;$/;"	v
OSTaskMax	Source/os_dbg_r.c	/^INT16U  const  OSTaskMax           = OS_MAX_TASKS + OS_N_SYS_TASKS; \/* Total max. number of tasks      *\/$/;"	v
OSTaskMax	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskMax          = OS_MAX_TASKS + OS_N_SYS_TASKS;  \/* Total max. number of tasks      *\/$/;"	v
OSTaskNameEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskNameEn        = OS_TASK_NAME_EN;  $/;"	v
OSTaskNameGet	Source/os_task.c	/^INT8U  OSTaskNameGet (INT8U    prio,$/;"	f
OSTaskNameSet	Source/os_task.c	/^void  OSTaskNameSet (INT8U   prio,$/;"	f
OSTaskNameSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskNameSize     = OS_TASK_NAME_SIZE;              \/* Size (in bytes) of task names   *\/$/;"	v
OSTaskProfileEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskProfileEn     = OS_TASK_PROFILE_EN;$/;"	v
OSTaskProfileEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskProfileEn    = OS_TASK_PROFILE_EN;$/;"	v
OSTaskQuery	Source/os_task.c	/^INT8U  OSTaskQuery (INT8U    prio,$/;"	f
OSTaskRegGet	Source/os_task.c	/^INT32U  OSTaskRegGet (INT8U   prio,$/;"	f
OSTaskRegSet	Source/os_task.c	/^void  OSTaskRegSet (INT8U    prio,$/;"	f
OSTaskRegTblSize	Source/os_dbg_r.c	/^INT16U  const  OSTaskRegTblSize    = OS_TASK_REG_TBL_SIZE;$/;"	v
OSTaskResume	Source/os_task.c	/^INT8U  OSTaskResume (INT8U prio)$/;"	f
OSTaskStatEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskStatEn        = OS_TASK_STAT_EN;$/;"	v
OSTaskStatEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskStatEn       = OS_TASK_STAT_EN;$/;"	v
OSTaskStatHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTaskStatHook (void)$/;"	f
OSTaskStatStk	Source/ucos_ii.h	/^OS_EXT  OS_STK            OSTaskStatStk[OS_TASK_STAT_STK_SIZE];      \/* Statistics task stack          *\/$/;"	v
OSTaskStatStkChkEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskStatStkChkEn  = OS_TASK_STAT_STK_CHK_EN;$/;"	v
OSTaskStatStkChkEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskStatStkChkEn = OS_TASK_STAT_STK_CHK_EN;$/;"	v
OSTaskStatStkSize	Source/os_dbg_r.c	/^INT16U  const  OSTaskStatStkSize   = OS_TASK_STAT_STK_SIZE;$/;"	v
OSTaskStatStkSize	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskStatStkSize  = OS_TASK_STAT_STK_SIZE;$/;"	v
OSTaskStkChk	Source/os_task.c	/^INT8U  OSTaskStkChk (INT8U         prio,$/;"	f
OSTaskStkInit	Stm32f1xx_Ports/os_cpu_c.c	/^OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)$/;"	f
OSTaskSuspend	Source/os_task.c	/^INT8U  OSTaskSuspend (INT8U prio)$/;"	f
OSTaskSwHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTaskSwHook (void)$/;"	f
OSTaskSwHookEn	Source/os_dbg_r.c	/^INT16U  const  OSTaskSwHookEn      = OS_TASK_SW_HOOK_EN;$/;"	v
OSTaskSwHookEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTaskSwHookEn     = OS_TASK_SW_HOOK_EN;$/;"	v
OSTickStepState	Source/ucos_ii.h	/^OS_EXT  INT8U             OSTickStepState;          \/* Indicates the state of the tick step feature    *\/$/;"	v
OSTicksPerSec	Source/os_dbg_r.c	/^INT16U  const  OSTicksPerSec       = OS_TICKS_PER_SEC;$/;"	v
OSTicksPerSec	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTicksPerSec      = OS_TICKS_PER_SEC;$/;"	v
OSTime	Source/ucos_ii.h	/^OS_EXT  volatile  INT32U  OSTime;                   \/* Current value of system time (in ticks)         *\/$/;"	v
OSTimeDly	Source/os_time.c	/^void  OSTimeDly (INT32U ticks)$/;"	f
OSTimeDlyHMSM	Source/os_time.c	/^INT8U  OSTimeDlyHMSM (INT8U   hours,$/;"	f
OSTimeDlyResume	Source/os_time.c	/^INT8U  OSTimeDlyResume (INT8U prio)$/;"	f
OSTimeGet	Source/os_time.c	/^INT32U  OSTimeGet (void)$/;"	f
OSTimeSet	Source/os_time.c	/^void  OSTimeSet (INT32U ticks)$/;"	f
OSTimeTick	Source/os_core.c	/^void  OSTimeTick (void)$/;"	f
OSTimeTickHook	Stm32f1xx_Ports/os_cpu_c.c	/^void  OSTimeTickHook (void)$/;"	f
OSTimeTickHookEn	Source/os_dbg_r.c	/^INT16U  const  OSTimeTickHookEn    = OS_TIME_TICK_HOOK_EN;$/;"	v
OSTimeTickHookEn	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSTimeTickHookEn   = OS_TIME_TICK_HOOK_EN;$/;"	v
OSTmrCallback	Source/ucos_ii.h	/^    OS_TMR_CALLBACK  OSTmrCallback;                   \/* Function to call when timer expires                           *\/$/;"	m	struct:os_tmr
OSTmrCallbackArg	Source/ucos_ii.h	/^    void            *OSTmrCallbackArg;                \/* Argument to pass to function when timer expires               *\/$/;"	m	struct:os_tmr
OSTmrCfgMax	Source/os_dbg_r.c	/^INT16U  const  OSTmrCfgMax         = OS_TMR_CFG_MAX;$/;"	v
OSTmrCfgNameEn	Source/os_dbg_r.c	/^INT16U  const  OSTmrCfgNameEn      = OS_TMR_CFG_NAME_EN;$/;"	v
OSTmrCfgTicksPerSec	Source/os_dbg_r.c	/^INT16U  const  OSTmrCfgTicksPerSec = OS_TMR_CFG_TICKS_PER_SEC;$/;"	v
OSTmrCfgWheelSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrCfgWheelSize   = OS_TMR_CFG_WHEEL_SIZE;$/;"	v
OSTmrCreate	Source/os_tmr.c	/^OS_TMR  *OSTmrCreate (INT32U           dly,$/;"	f
OSTmrCtr	Stm32f1xx_Ports/os_cpu_c.c	/^static  INT16U  OSTmrCtr;$/;"	v	file:
OSTmrDel	Source/os_tmr.c	/^BOOLEAN  OSTmrDel (OS_TMR  *ptmr,$/;"	f
OSTmrDly	Source/ucos_ii.h	/^    INT32U           OSTmrDly;                        \/* Delay time before periodic update starts                      *\/$/;"	m	struct:os_tmr
OSTmrEn	Source/os_dbg_r.c	/^INT16U  const  OSTmrEn             = OS_TMR_EN;$/;"	v
OSTmrEntries	Source/ucos_ii.h	/^    INT16U           OSTmrEntries;$/;"	m	struct:os_tmr_wheel
OSTmrFirst	Source/ucos_ii.h	/^    OS_TMR          *OSTmrFirst;                      \/* Pointer to first timer in linked list                         *\/$/;"	m	struct:os_tmr_wheel
OSTmrFree	Source/ucos_ii.h	/^OS_EXT  INT16U            OSTmrFree;                \/* Number of free entries in the timer pool        *\/$/;"	v
OSTmrFreeList	Source/ucos_ii.h	/^OS_EXT  OS_TMR           *OSTmrFreeList;            \/* Pointer to free list of timers                  *\/$/;"	v
OSTmrMatch	Source/ucos_ii.h	/^    INT32U           OSTmrMatch;                      \/* Timer expires when OSTmrTime == OSTmrMatch                    *\/$/;"	m	struct:os_tmr
OSTmrName	Source/ucos_ii.h	/^    INT8U           *OSTmrName;                       \/* Name to give the timer                                        *\/$/;"	m	struct:os_tmr
OSTmrNameGet	Source/os_tmr.c	/^INT8U  OSTmrNameGet (OS_TMR   *ptmr,$/;"	f
OSTmrNext	Source/ucos_ii.h	/^    void            *OSTmrNext;                       \/* Double link list pointers                                     *\/$/;"	m	struct:os_tmr
OSTmrOpt	Source/ucos_ii.h	/^    INT8U            OSTmrOpt;                        \/* Options (see OS_TMR_OPT_xxx)                                  *\/$/;"	m	struct:os_tmr
OSTmrPeriod	Source/ucos_ii.h	/^    INT32U           OSTmrPeriod;                     \/* Period to repeat timer                                        *\/$/;"	m	struct:os_tmr
OSTmrPrev	Source/ucos_ii.h	/^    void            *OSTmrPrev;$/;"	m	struct:os_tmr
OSTmrRemainGet	Source/os_tmr.c	/^INT32U  OSTmrRemainGet (OS_TMR  *ptmr,$/;"	f
OSTmrSem	Source/ucos_ii.h	/^OS_EXT  OS_EVENT         *OSTmrSem;                 \/* Sem. used to gain exclusive access to timers    *\/$/;"	v
OSTmrSemSignal	Source/ucos_ii.h	/^OS_EXT  OS_EVENT         *OSTmrSemSignal;           \/* Sem. used to signal the update of timers        *\/$/;"	v
OSTmrSignal	Source/os_tmr.c	/^INT8U  OSTmrSignal (void)$/;"	f
OSTmrSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrSize           = 0u;$/;"	v
OSTmrSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrSize           = sizeof(OS_TMR);$/;"	v
OSTmrStart	Source/os_tmr.c	/^BOOLEAN  OSTmrStart (OS_TMR   *ptmr,$/;"	f
OSTmrState	Source/ucos_ii.h	/^    INT8U            OSTmrState;                      \/* Indicates the state of the timer:                             *\/$/;"	m	struct:os_tmr
OSTmrStateGet	Source/os_tmr.c	/^INT8U  OSTmrStateGet (OS_TMR  *ptmr,$/;"	f
OSTmrStop	Source/os_tmr.c	/^BOOLEAN  OSTmrStop (OS_TMR  *ptmr,$/;"	f
OSTmrTaskStk	Source/ucos_ii.h	/^OS_EXT  OS_STK            OSTmrTaskStk[OS_TASK_TMR_STK_SIZE];$/;"	v
OSTmrTbl	Source/ucos_ii.h	/^OS_EXT  OS_TMR            OSTmrTbl[OS_TMR_CFG_MAX]; \/* Table containing pool of timers                 *\/$/;"	v
OSTmrTblSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrTblSize        = 0u;$/;"	v
OSTmrTblSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrTblSize        = sizeof(OSTmrTbl);$/;"	v
OSTmrTime	Source/ucos_ii.h	/^OS_EXT  INT32U            OSTmrTime;                \/* Current timer time                              *\/$/;"	v
OSTmrType	Source/ucos_ii.h	/^    INT8U            OSTmrType;                       \/* Should be set to OS_TMR_TYPE                                  *\/$/;"	m	struct:os_tmr
OSTmrUsed	Source/ucos_ii.h	/^OS_EXT  INT16U            OSTmrUsed;                \/* Number of timers used                           *\/$/;"	v
OSTmrWheelSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrWheelSize      = 0u;$/;"	v
OSTmrWheelSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrWheelSize      = sizeof(OS_TMR_WHEEL);$/;"	v
OSTmrWheelTbl	Source/ucos_ii.h	/^OS_EXT  OS_TMR_WHEEL      OSTmrWheelTbl[OS_TMR_CFG_WHEEL_SIZE];$/;"	v
OSTmrWheelTblSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrWheelTblSize   = 0u;$/;"	v
OSTmrWheelTblSize	Source/os_dbg_r.c	/^INT16U  const  OSTmrWheelTblSize   = sizeof(OSTmrWheelTbl);$/;"	v
OSTmr_Alloc	Source/os_tmr.c	/^static  OS_TMR  *OSTmr_Alloc (void)$/;"	f	file:
OSTmr_Free	Source/os_tmr.c	/^static  void  OSTmr_Free (OS_TMR *ptmr)$/;"	f	file:
OSTmr_Init	Source/os_tmr.c	/^void  OSTmr_Init (void)$/;"	f
OSTmr_InitTask	Source/os_tmr.c	/^static  void  OSTmr_InitTask (void)$/;"	f	file:
OSTmr_Link	Source/os_tmr.c	/^static  void  OSTmr_Link (OS_TMR  *ptmr,$/;"	f	file:
OSTmr_Task	Source/os_tmr.c	/^static  void  OSTmr_Task (void *p_arg)$/;"	f	file:
OSTmr_Unlink	Source/os_tmr.c	/^static  void  OSTmr_Unlink (OS_TMR *ptmr)$/;"	f	file:
OSUnMapTbl	Source/os_core.c	/^INT8U  const  OSUnMapTbl[256] = {$/;"	v
OSUsed	Source/ucos_ii.h	/^    INT32U  OSUsed;                    \/* Number of bytes used on the stack                            *\/$/;"	m	struct:os_stk_data
OSValue	Source/ucos_ii.h	/^    BOOLEAN OSValue;                        \/* Mutex value (OS_FALSE = used, OS_TRUE = available)      *\/$/;"	m	struct:os_mutex_data
OSVersion	Source/os_core.c	/^INT16U  OSVersion (void)$/;"	f
OSVersionNbr	Source/os_dbg_r.c	/^INT16U  const  OSVersionNbr        = OS_VERSION;$/;"	v
OSVersionNbr	Stm32f1xx_Ports/os_dbg.c	/^OS_COMPILER_OPT  INT16U  const  OSVersionNbr       = OS_VERSION;$/;"	v
OS_APP_HOOKS_EN	Source/os_cfg_r.h	30;"	d
OS_APP_HOOKS_EN	Stm32f1xx_Ports/os_cfg.h	30;"	d
OS_ARG_CHK_EN	Source/os_cfg_r.h	31;"	d
OS_ARG_CHK_EN	Stm32f1xx_Ports/os_cfg.h	31;"	d
OS_ASCII_NUL	Source/ucos_ii.h	68;"	d
OS_CFG_H	Source/os_cfg_r.h	26;"	d
OS_CFG_H	Stm32f1xx_Ports/os_cfg.h	26;"	d
OS_COMPILER_OPT	Stm32f1xx_Ports/os_dbg.c	27;"	d	file:
OS_CPU_CM3_NVIC_ST_CAL	Stm32f1xx_Ports/os_cpu_c.c	47;"	d	file:
OS_CPU_CM3_NVIC_ST_CTRL	Stm32f1xx_Ports/os_cpu_c.c	44;"	d	file:
OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC	Stm32f1xx_Ports/os_cpu_c.c	50;"	d	file:
OS_CPU_CM3_NVIC_ST_CTRL_COUNT	Stm32f1xx_Ports/os_cpu_c.c	49;"	d	file:
OS_CPU_CM3_NVIC_ST_CTRL_ENABLE	Stm32f1xx_Ports/os_cpu_c.c	52;"	d	file:
OS_CPU_CM3_NVIC_ST_CTRL_INTEN	Stm32f1xx_Ports/os_cpu_c.c	51;"	d	file:
OS_CPU_CM3_NVIC_ST_CURRENT	Stm32f1xx_Ports/os_cpu_c.c	46;"	d	file:
OS_CPU_CM3_NVIC_ST_RELOAD	Stm32f1xx_Ports/os_cpu_c.c	45;"	d	file:
OS_CPU_EXT	Stm32f1xx_Ports/os_cpu.h	30;"	d
OS_CPU_EXT	Stm32f1xx_Ports/os_cpu.h	32;"	d
OS_CPU_GLOBALS	Stm32f1xx_Ports/os_cpu_c.c	25;"	d	file:
OS_CPU_H	Stm32f1xx_Ports/os_cpu.h	26;"	d
OS_CPU_HOOKS_EN	Source/os_cfg_r.h	32;"	d
OS_CPU_HOOKS_EN	Stm32f1xx_Ports/os_cfg.h	32;"	d
OS_CPU_PendSVHandler	Stm32f1xx_Ports/os_cpu_a.asm	/^OS_CPU_PendSVHandler$/;"	l
OS_CPU_PendSVHandler_nosave	Stm32f1xx_Ports/os_cpu_a.asm	/^OS_CPU_PendSVHandler_nosave$/;"	l
OS_CPU_SR	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned int   OS_CPU_SR;                \/* Define size of CPU status register (PSR = 32 bits) *\/$/;"	t
OS_CPU_SR_Restore	Stm32f1xx_Ports/os_cpu_a.asm	/^OS_CPU_SR_Restore$/;"	l
OS_CPU_SR_Save	Stm32f1xx_Ports/os_cpu_a.asm	/^OS_CPU_SR_Save$/;"	l
OS_CPU_SysTickHandler	Stm32f1xx_Ports/os_cpu_c.c	/^void  OS_CPU_SysTickHandler (void)$/;"	f
OS_CPU_SysTickInit	Stm32f1xx_Ports/os_cpu_c.c	/^void  OS_CPU_SysTickInit (void)$/;"	f
OS_CRITICAL_METHOD	Stm32f1xx_Ports/os_cpu.h	77;"	d
OS_DEBUG_EN	Source/os_cfg_r.h	34;"	d
OS_DEBUG_EN	Stm32f1xx_Ports/os_cfg.h	34;"	d
OS_DEL_ALWAYS	Source/ucos_ii.h	182;"	d
OS_DEL_NO_PEND	Source/ucos_ii.h	181;"	d
OS_Dummy	Source/os_core.c	/^void  OS_Dummy (void)$/;"	f
OS_ENTER_CRITICAL	Stm32f1xx_Ports/os_cpu.h	80;"	d
OS_ERR_CREATE_ISR	Source/ucos_ii.h	262;"	d
OS_ERR_DEL_ISR	Source/ucos_ii.h	261;"	d
OS_ERR_EVENT_NAME_TOO_LONG	Source/ucos_ii.h	257;"	d
OS_ERR_EVENT_TYPE	Source/ucos_ii.h	246;"	d
OS_ERR_FLAG_GRP_DEPLETED	Source/ucos_ii.h	318;"	d
OS_ERR_FLAG_INVALID_OPT	Source/ucos_ii.h	317;"	d
OS_ERR_FLAG_INVALID_PGRP	Source/ucos_ii.h	314;"	d
OS_ERR_FLAG_NAME_TOO_LONG	Source/ucos_ii.h	319;"	d
OS_ERR_FLAG_NOT_RDY	Source/ucos_ii.h	316;"	d
OS_ERR_FLAG_WAIT_TYPE	Source/ucos_ii.h	315;"	d
OS_ERR_ID_INVALID	Source/ucos_ii.h	253;"	d
OS_ERR_ILLEGAL_CREATE_RUN_TIME	Source/ucos_ii.h	265;"	d
OS_ERR_INVALID_OPT	Source/ucos_ii.h	252;"	d
OS_ERR_MBOX_FULL	Source/ucos_ii.h	267;"	d
OS_ERR_MEM_FULL	Source/ucos_ii.h	305;"	d
OS_ERR_MEM_INVALID_ADDR	Source/ucos_ii.h	309;"	d
OS_ERR_MEM_INVALID_BLKS	Source/ucos_ii.h	302;"	d
OS_ERR_MEM_INVALID_PART	Source/ucos_ii.h	301;"	d
OS_ERR_MEM_INVALID_PBLK	Source/ucos_ii.h	306;"	d
OS_ERR_MEM_INVALID_PDATA	Source/ucos_ii.h	308;"	d
OS_ERR_MEM_INVALID_PMEM	Source/ucos_ii.h	307;"	d
OS_ERR_MEM_INVALID_SIZE	Source/ucos_ii.h	303;"	d
OS_ERR_MEM_NAME_TOO_LONG	Source/ucos_ii.h	310;"	d
OS_ERR_MEM_NO_FREE_BLKS	Source/ucos_ii.h	304;"	d
OS_ERR_NAME_GET_ISR	Source/ucos_ii.h	263;"	d
OS_ERR_NAME_SET_ISR	Source/ucos_ii.h	264;"	d
OS_ERR_NONE	Source/ucos_ii.h	244;"	d
OS_ERR_NOT_MUTEX_OWNER	Source/ucos_ii.h	312;"	d
OS_ERR_PDATA_NULL	Source/ucos_ii.h	254;"	d
OS_ERR_PEND_ABORT	Source/ucos_ii.h	260;"	d
OS_ERR_PEND_ISR	Source/ucos_ii.h	247;"	d
OS_ERR_PEND_LOCKED	Source/ucos_ii.h	259;"	d
OS_ERR_PEVENT_NULL	Source/ucos_ii.h	249;"	d
OS_ERR_PIP_LOWER	Source/ucos_ii.h	321;"	d
OS_ERR_PNAME_NULL	Source/ucos_ii.h	258;"	d
OS_ERR_POST_ISR	Source/ucos_ii.h	250;"	d
OS_ERR_POST_NULL_PTR	Source/ucos_ii.h	248;"	d
OS_ERR_PRIO	Source/ucos_ii.h	273;"	d
OS_ERR_PRIO_EXIST	Source/ucos_ii.h	272;"	d
OS_ERR_PRIO_INVALID	Source/ucos_ii.h	274;"	d
OS_ERR_QUERY_ISR	Source/ucos_ii.h	251;"	d
OS_ERR_Q_EMPTY	Source/ucos_ii.h	270;"	d
OS_ERR_Q_FULL	Source/ucos_ii.h	269;"	d
OS_ERR_SCHED_LOCKED	Source/ucos_ii.h	276;"	d
OS_ERR_SEM_OVF	Source/ucos_ii.h	277;"	d
OS_ERR_TASK_CREATE_ISR	Source/ucos_ii.h	279;"	d
OS_ERR_TASK_DEL	Source/ucos_ii.h	280;"	d
OS_ERR_TASK_DEL_IDLE	Source/ucos_ii.h	281;"	d
OS_ERR_TASK_DEL_ISR	Source/ucos_ii.h	283;"	d
OS_ERR_TASK_DEL_REQ	Source/ucos_ii.h	282;"	d
OS_ERR_TASK_NAME_TOO_LONG	Source/ucos_ii.h	284;"	d
OS_ERR_TASK_NOT_EXIST	Source/ucos_ii.h	286;"	d
OS_ERR_TASK_NOT_SUSPENDED	Source/ucos_ii.h	287;"	d
OS_ERR_TASK_NO_MORE_TCB	Source/ucos_ii.h	285;"	d
OS_ERR_TASK_OPT	Source/ucos_ii.h	288;"	d
OS_ERR_TASK_RESUME_PRIO	Source/ucos_ii.h	289;"	d
OS_ERR_TASK_SUSPEND_IDLE	Source/ucos_ii.h	290;"	d
OS_ERR_TASK_SUSPEND_PRIO	Source/ucos_ii.h	291;"	d
OS_ERR_TASK_WAITING	Source/ucos_ii.h	292;"	d
OS_ERR_TIMEOUT	Source/ucos_ii.h	256;"	d
OS_ERR_TIME_DLY_ISR	Source/ucos_ii.h	299;"	d
OS_ERR_TIME_INVALID_MINUTES	Source/ucos_ii.h	295;"	d
OS_ERR_TIME_INVALID_MS	Source/ucos_ii.h	297;"	d
OS_ERR_TIME_INVALID_SECONDS	Source/ucos_ii.h	296;"	d
OS_ERR_TIME_NOT_DLY	Source/ucos_ii.h	294;"	d
OS_ERR_TIME_ZERO_DLY	Source/ucos_ii.h	298;"	d
OS_ERR_TMR_INACTIVE	Source/ucos_ii.h	328;"	d
OS_ERR_TMR_INVALID	Source/ucos_ii.h	331;"	d
OS_ERR_TMR_INVALID_DEST	Source/ucos_ii.h	329;"	d
OS_ERR_TMR_INVALID_DLY	Source/ucos_ii.h	323;"	d
OS_ERR_TMR_INVALID_NAME	Source/ucos_ii.h	326;"	d
OS_ERR_TMR_INVALID_OPT	Source/ucos_ii.h	325;"	d
OS_ERR_TMR_INVALID_PERIOD	Source/ucos_ii.h	324;"	d
OS_ERR_TMR_INVALID_STATE	Source/ucos_ii.h	334;"	d
OS_ERR_TMR_INVALID_TYPE	Source/ucos_ii.h	330;"	d
OS_ERR_TMR_ISR	Source/ucos_ii.h	332;"	d
OS_ERR_TMR_NAME_TOO_LONG	Source/ucos_ii.h	333;"	d
OS_ERR_TMR_NON_AVAIL	Source/ucos_ii.h	327;"	d
OS_ERR_TMR_NO_CALLBACK	Source/ucos_ii.h	336;"	d
OS_ERR_TMR_STOPPED	Source/ucos_ii.h	335;"	d
OS_EVENT	Source/ucos_ii.h	/^} OS_EVENT;$/;"	t	typeref:struct:os_event
OS_EVENT_EN	Source/ucos_ii.h	93;"	d
OS_EVENT_MULTI_EN	Source/os_cfg_r.h	36;"	d
OS_EVENT_MULTI_EN	Stm32f1xx_Ports/os_cfg.h	36;"	d
OS_EVENT_NAME_EN	Source/os_cfg_r.h	37;"	d
OS_EVENT_NAME_SIZE	Stm32f1xx_Ports/os_cfg.h	37;"	d
OS_EVENT_TBL_SIZE	Source/ucos_ii.h	82;"	d
OS_EVENT_TBL_SIZE	Source/ucos_ii.h	85;"	d
OS_EVENT_TYPE_FLAG	Source/ucos_ii.h	133;"	d
OS_EVENT_TYPE_MBOX	Source/ucos_ii.h	129;"	d
OS_EVENT_TYPE_MUTEX	Source/ucos_ii.h	132;"	d
OS_EVENT_TYPE_Q	Source/ucos_ii.h	130;"	d
OS_EVENT_TYPE_SEM	Source/ucos_ii.h	131;"	d
OS_EVENT_TYPE_UNUSED	Source/ucos_ii.h	128;"	d
OS_EXIT_CRITICAL	Stm32f1xx_Ports/os_cpu.h	81;"	d
OS_EXT	Source/ucos_ii.h	55;"	d
OS_EXT	Source/ucos_ii.h	57;"	d
OS_EventTaskRdy	Source/os_core.c	/^INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,$/;"	f
OS_EventTaskRemove	Source/os_core.c	/^void  OS_EventTaskRemove (OS_TCB   *ptcb,$/;"	f
OS_EventTaskRemoveMulti	Source/os_core.c	/^void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,$/;"	f
OS_EventTaskWait	Source/os_core.c	/^void  OS_EventTaskWait (OS_EVENT *pevent)$/;"	f
OS_EventTaskWaitMulti	Source/os_core.c	/^void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)$/;"	f
OS_EventWaitListInit	Source/os_core.c	/^void  OS_EventWaitListInit (OS_EVENT *pevent)$/;"	f
OS_FALSE	Source/ucos_ii.h	61;"	d
OS_FLAGS	Source/ucos_ii.h	/^typedef  INT16U   OS_FLAGS;$/;"	t
OS_FLAGS	Source/ucos_ii.h	/^typedef  INT32U   OS_FLAGS;$/;"	t
OS_FLAGS	Source/ucos_ii.h	/^typedef  INT8U    OS_FLAGS;$/;"	t
OS_FLAGS_NBITS	Source/os_cfg_r.h	82;"	d
OS_FLAGS_NBITS	Stm32f1xx_Ports/os_cfg.h	81;"	d
OS_FLAG_ACCEPT_EN	Source/os_cfg_r.h	77;"	d
OS_FLAG_ACCEPT_EN	Stm32f1xx_Ports/os_cfg.h	76;"	d
OS_FLAG_CLR	Source/ucos_ii.h	159;"	d
OS_FLAG_CONSUME	Source/ucos_ii.h	156;"	d
OS_FLAG_DEL_EN	Source/os_cfg_r.h	78;"	d
OS_FLAG_DEL_EN	Stm32f1xx_Ports/os_cfg.h	77;"	d
OS_FLAG_EN	Source/os_cfg_r.h	76;"	d
OS_FLAG_EN	Stm32f1xx_Ports/os_cfg.h	75;"	d
OS_FLAG_GRP	Source/ucos_ii.h	/^} OS_FLAG_GRP;$/;"	t	typeref:struct:os_flag_grp
OS_FLAG_NAME_EN	Source/os_cfg_r.h	79;"	d
OS_FLAG_NAME_SIZE	Stm32f1xx_Ports/os_cfg.h	78;"	d
OS_FLAG_NODE	Source/ucos_ii.h	/^} OS_FLAG_NODE;$/;"	t	typeref:struct:os_flag_node
OS_FLAG_QUERY_EN	Source/os_cfg_r.h	80;"	d
OS_FLAG_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	79;"	d
OS_FLAG_SET	Source/ucos_ii.h	160;"	d
OS_FLAG_WAIT_CLR_ALL	Source/ucos_ii.h	143;"	d
OS_FLAG_WAIT_CLR_AND	Source/ucos_ii.h	144;"	d
OS_FLAG_WAIT_CLR_ANY	Source/ucos_ii.h	146;"	d
OS_FLAG_WAIT_CLR_EN	Source/os_cfg_r.h	81;"	d
OS_FLAG_WAIT_CLR_EN	Stm32f1xx_Ports/os_cfg.h	80;"	d
OS_FLAG_WAIT_CLR_OR	Source/ucos_ii.h	147;"	d
OS_FLAG_WAIT_SET_ALL	Source/ucos_ii.h	149;"	d
OS_FLAG_WAIT_SET_AND	Source/ucos_ii.h	150;"	d
OS_FLAG_WAIT_SET_ANY	Source/ucos_ii.h	152;"	d
OS_FLAG_WAIT_SET_OR	Source/ucos_ii.h	153;"	d
OS_FlagBlock	Source/os_flag.c	/^static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,$/;"	f	file:
OS_FlagInit	Source/os_flag.c	/^void  OS_FlagInit (void)$/;"	f
OS_FlagTaskRdy	Source/os_flag.c	/^static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,$/;"	f	file:
OS_FlagUnlink	Source/os_flag.c	/^void  OS_FlagUnlink (OS_FLAG_NODE *pnode)$/;"	f
OS_GLOBALS	Source/os_core.c	25;"	d	file:
OS_GLOBALS	Source/ucos_ii.c	23;"	d	file:
OS_InitEventList	Source/os_core.c	/^static  void  OS_InitEventList (void)$/;"	f	file:
OS_InitMisc	Source/os_core.c	/^static  void  OS_InitMisc (void)$/;"	f	file:
OS_InitRdyList	Source/os_core.c	/^static  void  OS_InitRdyList (void)$/;"	f	file:
OS_InitTCBList	Source/os_core.c	/^static  void  OS_InitTCBList (void)$/;"	f	file:
OS_InitTaskIdle	Source/os_core.c	/^static  void  OS_InitTaskIdle (void)$/;"	f	file:
OS_InitTaskStat	Source/os_core.c	/^static  void  OS_InitTaskStat (void)$/;"	f	file:
OS_LOWEST_PRIO	Source/os_cfg_r.h	39;"	d
OS_LOWEST_PRIO	Stm32f1xx_Ports/os_cfg.h	39;"	d
OS_MASTER_FILE	Source/ucos_ii.c	27;"	d	file:
OS_MAX_EVENTS	Source/os_cfg_r.h	42;"	d
OS_MAX_EVENTS	Stm32f1xx_Ports/os_cfg.h	42;"	d
OS_MAX_FLAGS	Source/os_cfg_r.h	43;"	d
OS_MAX_FLAGS	Stm32f1xx_Ports/os_cfg.h	43;"	d
OS_MAX_MEM_PART	Source/os_cfg_r.h	44;"	d
OS_MAX_MEM_PART	Stm32f1xx_Ports/os_cfg.h	44;"	d
OS_MAX_QS	Source/os_cfg_r.h	45;"	d
OS_MAX_QS	Stm32f1xx_Ports/os_cfg.h	45;"	d
OS_MAX_TASKS	Source/os_cfg_r.h	46;"	d
OS_MAX_TASKS	Stm32f1xx_Ports/os_cfg.h	46;"	d
OS_MBOX_ACCEPT_EN	Source/os_cfg_r.h	87;"	d
OS_MBOX_ACCEPT_EN	Stm32f1xx_Ports/os_cfg.h	86;"	d
OS_MBOX_DATA	Source/ucos_ii.h	/^} OS_MBOX_DATA;$/;"	t	typeref:struct:os_mbox_data
OS_MBOX_DEL_EN	Source/os_cfg_r.h	88;"	d
OS_MBOX_DEL_EN	Stm32f1xx_Ports/os_cfg.h	87;"	d
OS_MBOX_EN	Source/os_cfg_r.h	86;"	d
OS_MBOX_EN	Stm32f1xx_Ports/os_cfg.h	85;"	d
OS_MBOX_PEND_ABORT_EN	Source/os_cfg_r.h	89;"	d
OS_MBOX_PEND_ABORT_EN	Stm32f1xx_Ports/os_cfg.h	88;"	d
OS_MBOX_POST_EN	Source/os_cfg_r.h	90;"	d
OS_MBOX_POST_EN	Stm32f1xx_Ports/os_cfg.h	89;"	d
OS_MBOX_POST_OPT_EN	Source/os_cfg_r.h	91;"	d
OS_MBOX_POST_OPT_EN	Stm32f1xx_Ports/os_cfg.h	90;"	d
OS_MBOX_QUERY_EN	Source/os_cfg_r.h	92;"	d
OS_MBOX_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	91;"	d
OS_MEM	Source/ucos_ii.h	/^} OS_MEM;$/;"	t	typeref:struct:os_mem
OS_MEM_DATA	Source/ucos_ii.h	/^} OS_MEM_DATA;$/;"	t	typeref:struct:os_mem_data
OS_MEM_EN	Source/os_cfg_r.h	96;"	d
OS_MEM_EN	Stm32f1xx_Ports/os_cfg.h	95;"	d
OS_MEM_NAME_EN	Source/os_cfg_r.h	97;"	d
OS_MEM_NAME_SIZE	Stm32f1xx_Ports/os_cfg.h	96;"	d
OS_MEM_QUERY_EN	Source/os_cfg_r.h	98;"	d
OS_MEM_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	97;"	d
OS_MUTEX_ACCEPT_EN	Source/os_cfg_r.h	103;"	d
OS_MUTEX_ACCEPT_EN	Stm32f1xx_Ports/os_cfg.h	102;"	d
OS_MUTEX_AVAILABLE	Source/os_mutex.c	39;"	d	file:
OS_MUTEX_DATA	Source/ucos_ii.h	/^} OS_MUTEX_DATA;$/;"	t	typeref:struct:os_mutex_data
OS_MUTEX_DEL_EN	Source/os_cfg_r.h	104;"	d
OS_MUTEX_DEL_EN	Stm32f1xx_Ports/os_cfg.h	103;"	d
OS_MUTEX_EN	Source/os_cfg_r.h	102;"	d
OS_MUTEX_EN	Stm32f1xx_Ports/os_cfg.h	101;"	d
OS_MUTEX_KEEP_LOWER_8	Source/os_mutex.c	36;"	d	file:
OS_MUTEX_KEEP_UPPER_8	Source/os_mutex.c	37;"	d	file:
OS_MUTEX_QUERY_EN	Source/os_cfg_r.h	105;"	d
OS_MUTEX_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	104;"	d
OS_MemClr	Source/os_core.c	/^void  OS_MemClr (INT8U  *pdest,$/;"	f
OS_MemCopy	Source/os_core.c	/^void  OS_MemCopy (INT8U  *pdest,$/;"	f
OS_MemInit	Source/os_mem.c	/^void  OS_MemInit (void)$/;"	f
OS_N_SYS_TASKS	Source/ucos_ii.h	73;"	d
OS_N_SYS_TASKS	Source/ucos_ii.h	75;"	d
OS_PEND_OPT_BROADCAST	Source/ucos_ii.h	192;"	d
OS_PEND_OPT_NONE	Source/ucos_ii.h	191;"	d
OS_POST_OPT_BROADCAST	Source/ucos_ii.h	202;"	d
OS_POST_OPT_FRONT	Source/ucos_ii.h	203;"	d
OS_POST_OPT_NONE	Source/ucos_ii.h	201;"	d
OS_POST_OPT_NO_SCHED	Source/ucos_ii.h	204;"	d
OS_PRIO	Source/ucos_ii.h	/^typedef  INT16U   OS_PRIO;$/;"	t
OS_PRIO	Source/ucos_ii.h	/^typedef  INT8U    OS_PRIO;$/;"	t
OS_PRIO_SELF	Source/ucos_ii.h	70;"	d
OS_Q	Source/ucos_ii.h	/^} OS_Q;$/;"	t	typeref:struct:os_q
OS_QInit	Source/os_q.c	/^void  OS_QInit (void)$/;"	f
OS_Q_ACCEPT_EN	Source/os_cfg_r.h	110;"	d
OS_Q_ACCEPT_EN	Stm32f1xx_Ports/os_cfg.h	109;"	d
OS_Q_DATA	Source/ucos_ii.h	/^} OS_Q_DATA;$/;"	t	typeref:struct:os_q_data
OS_Q_DEL_EN	Source/os_cfg_r.h	111;"	d
OS_Q_DEL_EN	Stm32f1xx_Ports/os_cfg.h	110;"	d
OS_Q_EN	Source/os_cfg_r.h	109;"	d
OS_Q_EN	Stm32f1xx_Ports/os_cfg.h	108;"	d
OS_Q_FLUSH_EN	Source/os_cfg_r.h	112;"	d
OS_Q_FLUSH_EN	Stm32f1xx_Ports/os_cfg.h	111;"	d
OS_Q_PEND_ABORT_EN	Source/os_cfg_r.h	113;"	d
OS_Q_PEND_ABORT_EN	Stm32f1xx_Ports/os_cfg.h	112;"	d
OS_Q_POST_EN	Source/os_cfg_r.h	114;"	d
OS_Q_POST_EN	Stm32f1xx_Ports/os_cfg.h	113;"	d
OS_Q_POST_FRONT_EN	Source/os_cfg_r.h	115;"	d
OS_Q_POST_FRONT_EN	Stm32f1xx_Ports/os_cfg.h	114;"	d
OS_Q_POST_OPT_EN	Source/os_cfg_r.h	116;"	d
OS_Q_POST_OPT_EN	Stm32f1xx_Ports/os_cfg.h	115;"	d
OS_Q_QUERY_EN	Source/os_cfg_r.h	117;"	d
OS_Q_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	116;"	d
OS_RDY_TBL_SIZE	Source/ucos_ii.h	83;"	d
OS_RDY_TBL_SIZE	Source/ucos_ii.h	86;"	d
OS_SCHED_LOCK_EN	Source/os_cfg_r.h	48;"	d
OS_SCHED_LOCK_EN	Stm32f1xx_Ports/os_cfg.h	48;"	d
OS_SEM_ACCEPT_EN	Source/os_cfg_r.h	122;"	d
OS_SEM_ACCEPT_EN	Stm32f1xx_Ports/os_cfg.h	121;"	d
OS_SEM_DATA	Source/ucos_ii.h	/^} OS_SEM_DATA;$/;"	t	typeref:struct:os_sem_data
OS_SEM_DEL_EN	Source/os_cfg_r.h	123;"	d
OS_SEM_DEL_EN	Stm32f1xx_Ports/os_cfg.h	122;"	d
OS_SEM_EN	Source/os_cfg_r.h	121;"	d
OS_SEM_EN	Stm32f1xx_Ports/os_cfg.h	120;"	d
OS_SEM_PEND_ABORT_EN	Source/os_cfg_r.h	124;"	d
OS_SEM_PEND_ABORT_EN	Stm32f1xx_Ports/os_cfg.h	123;"	d
OS_SEM_QUERY_EN	Source/os_cfg_r.h	125;"	d
OS_SEM_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	124;"	d
OS_SEM_SET_EN	Source/os_cfg_r.h	126;"	d
OS_SEM_SET_EN	Stm32f1xx_Ports/os_cfg.h	125;"	d
OS_STAT_FLAG	Source/ucos_ii.h	109;"	d
OS_STAT_MBOX	Source/ucos_ii.h	105;"	d
OS_STAT_MULTI	Source/ucos_ii.h	110;"	d
OS_STAT_MUTEX	Source/ucos_ii.h	108;"	d
OS_STAT_PEND_ABORT	Source/ucos_ii.h	121;"	d
OS_STAT_PEND_ANY	Source/ucos_ii.h	112;"	d
OS_STAT_PEND_OK	Source/ucos_ii.h	119;"	d
OS_STAT_PEND_TO	Source/ucos_ii.h	120;"	d
OS_STAT_Q	Source/ucos_ii.h	106;"	d
OS_STAT_RDY	Source/ucos_ii.h	103;"	d
OS_STAT_SEM	Source/ucos_ii.h	104;"	d
OS_STAT_SUSPEND	Source/ucos_ii.h	107;"	d
OS_STK	Stm32f1xx_Ports/os_cpu.h	/^typedef unsigned int   OS_STK;                   \/* Each stack entry is 32-bit wide                    *\/$/;"	t
OS_STK_DATA	Source/ucos_ii.h	/^} OS_STK_DATA;$/;"	t	typeref:struct:os_stk_data
OS_STK_GROWTH	Stm32f1xx_Ports/os_cpu.h	90;"	d
OS_Sched	Source/os_core.c	/^void  OS_Sched (void)$/;"	f
OS_SchedNew	Source/os_core.c	/^static  void  OS_SchedNew (void)$/;"	f	file:
OS_StrLen	Source/os_core.c	/^INT8U  OS_StrLen (INT8U *psrc)$/;"	f
OS_TASK_CHANGE_PRIO_EN	Source/os_cfg_r.h	61;"	d
OS_TASK_CHANGE_PRIO_EN	Stm32f1xx_Ports/os_cfg.h	61;"	d
OS_TASK_CREATE_EN	Source/os_cfg_r.h	62;"	d
OS_TASK_CREATE_EN	Stm32f1xx_Ports/os_cfg.h	62;"	d
OS_TASK_CREATE_EXT_EN	Source/os_cfg_r.h	63;"	d
OS_TASK_CREATE_EXT_EN	Stm32f1xx_Ports/os_cfg.h	63;"	d
OS_TASK_DEL_EN	Source/os_cfg_r.h	64;"	d
OS_TASK_DEL_EN	Stm32f1xx_Ports/os_cfg.h	64;"	d
OS_TASK_IDLE_ID	Source/ucos_ii.h	89;"	d
OS_TASK_IDLE_PRIO	Source/ucos_ii.h	79;"	d
OS_TASK_IDLE_STK_SIZE	Source/os_cfg_r.h	57;"	d
OS_TASK_IDLE_STK_SIZE	Stm32f1xx_Ports/os_cfg.h	57;"	d
OS_TASK_NAME_EN	Source/os_cfg_r.h	65;"	d
OS_TASK_NAME_SIZE	Stm32f1xx_Ports/os_cfg.h	65;"	d
OS_TASK_OPT_NONE	Source/ucos_ii.h	211;"	d
OS_TASK_OPT_SAVE_FP	Source/ucos_ii.h	214;"	d
OS_TASK_OPT_STK_CHK	Source/ucos_ii.h	212;"	d
OS_TASK_OPT_STK_CLR	Source/ucos_ii.h	213;"	d
OS_TASK_PROFILE_EN	Source/os_cfg_r.h	66;"	d
OS_TASK_PROFILE_EN	Stm32f1xx_Ports/os_cfg.h	66;"	d
OS_TASK_QUERY_EN	Source/os_cfg_r.h	67;"	d
OS_TASK_QUERY_EN	Stm32f1xx_Ports/os_cfg.h	67;"	d
OS_TASK_REG_TBL_SIZE	Source/os_cfg_r.h	68;"	d
OS_TASK_STAT_EN	Source/os_cfg_r.h	69;"	d
OS_TASK_STAT_EN	Stm32f1xx_Ports/os_cfg.h	68;"	d
OS_TASK_STAT_ID	Source/ucos_ii.h	90;"	d
OS_TASK_STAT_PRIO	Source/ucos_ii.h	78;"	d
OS_TASK_STAT_STK_CHK_EN	Source/os_cfg_r.h	70;"	d
OS_TASK_STAT_STK_CHK_EN	Stm32f1xx_Ports/os_cfg.h	69;"	d
OS_TASK_STAT_STK_SIZE	Source/os_cfg_r.h	56;"	d
OS_TASK_STAT_STK_SIZE	Stm32f1xx_Ports/os_cfg.h	56;"	d
OS_TASK_SUSPEND_EN	Source/os_cfg_r.h	71;"	d
OS_TASK_SUSPEND_EN	Stm32f1xx_Ports/os_cfg.h	70;"	d
OS_TASK_SW	Stm32f1xx_Ports/os_cpu.h	92;"	d
OS_TASK_SW_HOOK_EN	Source/os_cfg_r.h	72;"	d
OS_TASK_SW_HOOK_EN	Stm32f1xx_Ports/os_cfg.h	71;"	d
OS_TASK_TMR_ID	Source/ucos_ii.h	91;"	d
OS_TASK_TMR_STK_SIZE	Source/os_cfg_r.h	55;"	d
OS_TASK_TMR_STK_SIZE	Stm32f1xx_Ports/os_cfg.h	55;"	d
OS_TCB	Source/ucos_ii.h	/^} OS_TCB;$/;"	t	typeref:struct:os_tcb
OS_TCBInit	Source/os_core.c	/^INT8U  OS_TCBInit (INT8U    prio,$/;"	f
OS_TCB_RESERVED	Source/ucos_ii.h	95;"	d
OS_TICKS_PER_SEC	Source/os_cfg_r.h	51;"	d
OS_TICKS_PER_SEC	Stm32f1xx_Ports/os_cfg.h	51;"	d
OS_TICK_STEP_DIS	Source/ucos_ii.h	171;"	d
OS_TICK_STEP_EN	Source/os_cfg_r.h	50;"	d
OS_TICK_STEP_EN	Stm32f1xx_Ports/os_cfg.h	50;"	d
OS_TICK_STEP_ONCE	Source/ucos_ii.h	173;"	d
OS_TICK_STEP_WAIT	Source/ucos_ii.h	172;"	d
OS_TIME_DLY_HMSM_EN	Source/os_cfg_r.h	130;"	d
OS_TIME_DLY_HMSM_EN	Stm32f1xx_Ports/os_cfg.h	129;"	d
OS_TIME_DLY_RESUME_EN	Source/os_cfg_r.h	131;"	d
OS_TIME_DLY_RESUME_EN	Stm32f1xx_Ports/os_cfg.h	130;"	d
OS_TIME_GET_SET_EN	Source/os_cfg_r.h	132;"	d
OS_TIME_GET_SET_EN	Stm32f1xx_Ports/os_cfg.h	131;"	d
OS_TIME_TICK_HOOK_EN	Source/os_cfg_r.h	133;"	d
OS_TIME_TICK_HOOK_EN	Stm32f1xx_Ports/os_cfg.h	132;"	d
OS_TMR	Source/ucos_ii.h	/^} OS_TMR;$/;"	t	typeref:struct:os_tmr
OS_TMR_CALLBACK	Source/ucos_ii.h	/^typedef  void (*OS_TMR_CALLBACK)(void *ptmr, void *parg);$/;"	t
OS_TMR_CFG_MAX	Source/os_cfg_r.h	138;"	d
OS_TMR_CFG_MAX	Stm32f1xx_Ports/os_cfg.h	137;"	d
OS_TMR_CFG_NAME_EN	Source/os_cfg_r.h	139;"	d
OS_TMR_CFG_NAME_SIZE	Stm32f1xx_Ports/os_cfg.h	138;"	d
OS_TMR_CFG_TICKS_PER_SEC	Source/os_cfg_r.h	141;"	d
OS_TMR_CFG_TICKS_PER_SEC	Stm32f1xx_Ports/os_cfg.h	140;"	d
OS_TMR_CFG_WHEEL_SIZE	Source/os_cfg_r.h	140;"	d
OS_TMR_CFG_WHEEL_SIZE	Stm32f1xx_Ports/os_cfg.h	139;"	d
OS_TMR_EN	Source/os_cfg_r.h	137;"	d
OS_TMR_EN	Stm32f1xx_Ports/os_cfg.h	136;"	d
OS_TMR_LINK_DLY	Source/os_tmr.c	46;"	d	file:
OS_TMR_LINK_PERIODIC	Source/os_tmr.c	47;"	d	file:
OS_TMR_OPT_CALLBACK	Source/ucos_ii.h	226;"	d
OS_TMR_OPT_CALLBACK_ARG	Source/ucos_ii.h	227;"	d
OS_TMR_OPT_NONE	Source/ucos_ii.h	221;"	d
OS_TMR_OPT_ONE_SHOT	Source/ucos_ii.h	223;"	d
OS_TMR_OPT_PERIODIC	Source/ucos_ii.h	224;"	d
OS_TMR_STATE_COMPLETED	Source/ucos_ii.h	236;"	d
OS_TMR_STATE_RUNNING	Source/ucos_ii.h	237;"	d
OS_TMR_STATE_STOPPED	Source/ucos_ii.h	235;"	d
OS_TMR_STATE_UNUSED	Source/ucos_ii.h	234;"	d
OS_TMR_TYPE	Source/ucos_ii.h	135;"	d
OS_TMR_WHEEL	Source/ucos_ii.h	/^} OS_TMR_WHEEL;$/;"	t	typeref:struct:os_tmr_wheel
OS_TRUE	Source/ucos_ii.h	65;"	d
OS_TaskIdle	Source/os_core.c	/^void  OS_TaskIdle (void *p_arg)$/;"	f
OS_TaskReturn	Source/os_task.c	/^void  OS_TaskReturn (void)$/;"	f
OS_TaskStat	Source/os_core.c	/^void  OS_TaskStat (void *p_arg)$/;"	f
OS_TaskStatStkChk	Source/os_core.c	/^void  OS_TaskStatStkChk (void)$/;"	f
OS_TaskStkClr	Source/os_task.c	/^void  OS_TaskStkClr (OS_STK  *pbos,$/;"	f
OS_VERSION	Source/ucos_ii.h	36;"	d
OS_uCOS_II_H	Source/ucos_ii.h	24;"	d
os_event	Source/ucos_ii.h	/^typedef struct os_event {$/;"	s
os_flag_grp	Source/ucos_ii.h	/^typedef struct os_flag_grp {                \/* Event Flag Group                                        *\/$/;"	s
os_flag_node	Source/ucos_ii.h	/^typedef struct os_flag_node {               \/* Event Flag Wait List Node                               *\/$/;"	s
os_mbox_data	Source/ucos_ii.h	/^typedef struct os_mbox_data {$/;"	s
os_mem	Source/ucos_ii.h	/^typedef struct os_mem {                   \/* MEMORY CONTROL BLOCK                                      *\/$/;"	s
os_mem_data	Source/ucos_ii.h	/^typedef struct os_mem_data {$/;"	s
os_mutex_data	Source/ucos_ii.h	/^typedef struct os_mutex_data {$/;"	s
os_q	Source/ucos_ii.h	/^typedef struct os_q {                   \/* QUEUE CONTROL BLOCK                                         *\/$/;"	s
os_q_data	Source/ucos_ii.h	/^typedef struct os_q_data {$/;"	s
os_sem_data	Source/ucos_ii.h	/^typedef struct os_sem_data {$/;"	s
os_stk_data	Source/ucos_ii.h	/^typedef struct os_stk_data {$/;"	s
os_tcb	Source/ucos_ii.h	/^typedef struct os_tcb {$/;"	s
os_tmr	Source/ucos_ii.h	/^typedef  struct  os_tmr {$/;"	s
os_tmr_wheel	Source/ucos_ii.h	/^typedef  struct  os_tmr_wheel {$/;"	s
